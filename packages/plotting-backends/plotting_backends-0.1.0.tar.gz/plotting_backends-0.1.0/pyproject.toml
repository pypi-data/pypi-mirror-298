[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "plotting_backends"
authors = [
  { name = "galax maintainers", email = "nstarkman@users.noreply.github.com" },
  { name = "Nathaniel Starkman", email = "nstarman@users.noreply.github.com" },
]
description = "Plotting dispatch backends"
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = []

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
  "sybil != 7.1.0",
]
dev = [
  "plotting_backends[test]",
]

[project.urls]
Homepage = "https://github.com/GalacticDynamics/plotting_backends"
"Bug Tracker" = "https://github.com/GalacticDynamics/plotting_backends/issues"
Changelog = "https://github.com/GalacticDynamics/plotting_backends/releases"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/plotting_backends/_version.py"

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"


[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = ["tests/", "src/"]


[tool.coverage]
run.source = ["plotting_backends"]
report.exclude_also = [
  # Have to re-enable the standard pragma
  'pragma: no cover',
  # Ignore type-checking stuff
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
python_version = "3.8"

disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = [
  '(^|/)tests/',    # tests
  '^conftest\.py$', # nox test configuration
]
files = ["src"]
strict = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true

disable_error_code = ["no-redef"]                                            # <- plum multiple dispatch
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]


[[tool.mypy.overrides]]
module = "plotting_backends.*"
disable_error_code = ["name-defined"] # <- jaxtyping


[tool.ruff]

[tool.ruff.lint]
extend-select = ["ALL"]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101", "T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]
