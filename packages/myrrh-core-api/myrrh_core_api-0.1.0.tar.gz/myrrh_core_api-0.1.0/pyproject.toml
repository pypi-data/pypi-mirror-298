[project]
name = "myrrh_core_api"
description = "This package contains API definitions for the myrrh procject"
readme = "README.md"
license = { expr = " GPL-3.0+", text = "GNU General Public License v3.0 or later" }

keywords = [
  "baseline:Earendel.",
]

requires-python = ">= 3.12"
dynamic = ["version"]

authors = [
  { name="PyAnjel7", email="PyAnjel7@gmail.com" },
]

classifiers = [

  # Pick your license as you wish (see also "license" above)
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",

  # Specify the Python versions you support here.
  "Programming Language :: Python :: 3.12",
]

dependencies = [
]

[project.optional-dependencies]


[project.urls]
# Homepage = "https://myrrh_core_api.github.io"
# Documentation = "https://myrrh_core_api.readthedocs.io"
# Repository = "https://github.com/PyAnjel7/myrrh_core_api.git"
# Issues = "https://github.com/PyAnjel7/myrrh_core_api/issues"
# Changelog = "https://github.com/PyAnjel7/myrrh_core_api/blob/master/CHANGELOG.md"

# [project.scripts]

# [project.gui-scripts]

# [project.entry-points.myrrh_core_api]

[build-system]
requires = [
    "setuptools",
    "wheel",
    "setuptools_scm",
]

build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

namespaces = true
[tool.setuptools_scm]

[tool.noxmake]
srcdir = "src"
testdir = "tests"
docdir = "doc"
devenv = ""

changelog = "CHANGELOG.md"



[tool.noxmake.options]
envdir = ""

[tool.noxmake.sessions]
venv_backend = ""
reuse_venv = false
venv_params =  []


[tool.black]
line-length = 200



[tool.codespell]



[tool.mypy]
disable_error_code = ["import-untyped", "abstract"]
allow_redefinition = true
namespace_packages = true
files = [ "src" ]


[tool.flake8]
max-line-length = 200








[tool.git-cliff]
output = "CHANGELOG.md"

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^ign", group = "Waste", skip = true },
    { message = "^[a|A]dd", group = "Added" },
    { message = "^[s|S]upport", group = "Added" },  # codespell:ignore
    { message = "^[r|R]emove", group = "Removed" },
    { message = "^.*: add", group = "Added" },
    { message = "^.*: support", group = "Added" },
    { message = "^.*: remove", group = "Removed" },
    { message = "^.*: delete", group = "Removed" },
    { message = "^test", group = "Fixed" },
    { message = "^fix", group = "Fixed" },
    { message = "^.*: fix", group = "Fixed" },
    { message = "^.*", group = "Waste", skip = true },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"

[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.
"""

# https://keats.github.io/tera/docs/#introduction

body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
      {{"- "}}
      {%- if commit.scope -%}
        [{{ commit.scope }}]{{" "}}
      {%- endif -%}
      {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}
{% endfor %}\n
"""

# template for the changelog footer

footer = """
<!-- generated by git-cliff -->
"""

# remove the leading and trailing whitespace from the templates
trim = true



