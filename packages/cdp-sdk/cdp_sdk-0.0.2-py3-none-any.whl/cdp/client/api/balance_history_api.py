"""Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

The version of the OpenAPI document: 0.0.1-alpha
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Annotated, Any

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call

from cdp.client.api_client import ApiClient, RequestSerialized
from cdp.client.api_response import ApiResponse
from cdp.client.models.address_historical_balance_list import AddressHistoricalBalanceList
from cdp.client.rest import RESTResponseType


class BalanceHistoryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def list_address_historical_balance(
        self,
        network_id: Annotated[StrictStr, Field(description="The ID of the blockchain network")],
        address_id: Annotated[
            StrictStr,
            Field(description="The ID of the address to fetch the historical balance for."),
        ],
        asset_id: Annotated[
            StrictStr,
            Field(description="The symbol of the asset to fetch the historical balance for."),
        ],
        limit: Annotated[
            StrictInt | None,
            Field(
                description="A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."
            ),
        ] = None,
        page: Annotated[
            Annotated[str, Field(strict=True, max_length=5000)] | None,
            Field(
                description="A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
            ),
        ] = None,
        _request_timeout: None
        | Annotated[StrictFloat, Field(gt=0)]
        | tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]] = None,
        _request_auth: dict[StrictStr, Any] | None = None,
        _content_type: StrictStr | None = None,
        _headers: dict[StrictStr, Any] | None = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AddressHistoricalBalanceList:
        """Get address balance history for asset

        List the historical balance of an asset in a specific address.

        :param network_id: The ID of the blockchain network (required)
        :type network_id: str
        :param address_id: The ID of the address to fetch the historical balance for. (required)
        :type address_id: str
        :param asset_id: The symbol of the asset to fetch the historical balance for. (required)
        :type asset_id: str
        :param limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        :type limit: int
        :param page: A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
        :type page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """
        _param = self._list_address_historical_balance_serialize(
            network_id=network_id,
            address_id=address_id,
            asset_id=asset_id,
            limit=limit,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, str | None] = {
            "200": "AddressHistoricalBalanceList",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_address_historical_balance_with_http_info(
        self,
        network_id: Annotated[StrictStr, Field(description="The ID of the blockchain network")],
        address_id: Annotated[
            StrictStr,
            Field(description="The ID of the address to fetch the historical balance for."),
        ],
        asset_id: Annotated[
            StrictStr,
            Field(description="The symbol of the asset to fetch the historical balance for."),
        ],
        limit: Annotated[
            StrictInt | None,
            Field(
                description="A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."
            ),
        ] = None,
        page: Annotated[
            Annotated[str, Field(strict=True, max_length=5000)] | None,
            Field(
                description="A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
            ),
        ] = None,
        _request_timeout: None
        | Annotated[StrictFloat, Field(gt=0)]
        | tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]] = None,
        _request_auth: dict[StrictStr, Any] | None = None,
        _content_type: StrictStr | None = None,
        _headers: dict[StrictStr, Any] | None = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AddressHistoricalBalanceList]:
        """Get address balance history for asset

        List the historical balance of an asset in a specific address.

        :param network_id: The ID of the blockchain network (required)
        :type network_id: str
        :param address_id: The ID of the address to fetch the historical balance for. (required)
        :type address_id: str
        :param asset_id: The symbol of the asset to fetch the historical balance for. (required)
        :type asset_id: str
        :param limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        :type limit: int
        :param page: A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
        :type page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """
        _param = self._list_address_historical_balance_serialize(
            network_id=network_id,
            address_id=address_id,
            asset_id=asset_id,
            limit=limit,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, str | None] = {
            "200": "AddressHistoricalBalanceList",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_address_historical_balance_without_preload_content(
        self,
        network_id: Annotated[StrictStr, Field(description="The ID of the blockchain network")],
        address_id: Annotated[
            StrictStr,
            Field(description="The ID of the address to fetch the historical balance for."),
        ],
        asset_id: Annotated[
            StrictStr,
            Field(description="The symbol of the asset to fetch the historical balance for."),
        ],
        limit: Annotated[
            StrictInt | None,
            Field(
                description="A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."
            ),
        ] = None,
        page: Annotated[
            Annotated[str, Field(strict=True, max_length=5000)] | None,
            Field(
                description="A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
            ),
        ] = None,
        _request_timeout: None
        | Annotated[StrictFloat, Field(gt=0)]
        | tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]] = None,
        _request_auth: dict[StrictStr, Any] | None = None,
        _content_type: StrictStr | None = None,
        _headers: dict[StrictStr, Any] | None = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get address balance history for asset

        List the historical balance of an asset in a specific address.

        :param network_id: The ID of the blockchain network (required)
        :type network_id: str
        :param address_id: The ID of the address to fetch the historical balance for. (required)
        :type address_id: str
        :param asset_id: The symbol of the asset to fetch the historical balance for. (required)
        :type asset_id: str
        :param limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        :type limit: int
        :param page: A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
        :type page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """
        _param = self._list_address_historical_balance_serialize(
            network_id=network_id,
            address_id=address_id,
            asset_id=asset_id,
            limit=limit,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, str | None] = {
            "200": "AddressHistoricalBalanceList",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_address_historical_balance_serialize(
        self,
        network_id,
        address_id,
        asset_id,
        limit,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, str | None] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[str, str | bytes] = {}
        _body_params: bytes | None = None

        # process the path parameters
        if network_id is not None:
            _path_params["network_id"] = network_id
        if address_id is not None:
            _path_params["address_id"] = address_id
        if asset_id is not None:
            _path_params["asset_id"] = asset_id
        # process the query parameters
        if limit is not None:
            _query_params.append(("limit", limit))

        if page is not None:
            _query_params.append(("page", page))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: list[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/networks/{network_id}/addresses/{address_id}/balance_history/{asset_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
