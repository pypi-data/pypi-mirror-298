"""Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

The version of the OpenAPI document: 0.0.1-alpha
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self


class EthereumTransactionFlattenedTrace(BaseModel):
    """EthereumTransactionFlattenedTrace"""

    error: StrictStr | None = None
    type: StrictStr | None = None
    var_from: StrictStr | None = Field(default=None, alias="from")
    to: StrictStr | None = None
    value: StrictStr | None = None
    gas: StrictInt | None = None
    gas_used: StrictInt | None = None
    input: StrictStr | None = None
    output: StrictStr | None = None
    sub_traces: StrictInt | None = None
    trace_address: list[StrictInt] | None = None
    trace_type: StrictStr | None = None
    call_type: StrictStr | None = None
    trace_id: StrictStr | None = None
    status: StrictInt | None = None
    block_hash: StrictStr | None = None
    block_number: StrictInt | None = None
    transaction_hash: StrictStr | None = None
    transaction_index: StrictInt | None = None
    __properties: ClassVar[list[str]] = [
        "error",
        "type",
        "from",
        "to",
        "value",
        "gas",
        "gas_used",
        "input",
        "output",
        "sub_traces",
        "trace_address",
        "trace_type",
        "call_type",
        "trace_id",
        "status",
        "block_hash",
        "block_number",
        "transaction_hash",
        "transaction_index",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of EthereumTransactionFlattenedTrace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of EthereumTransactionFlattenedTrace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "error": obj.get("error"),
                "type": obj.get("type"),
                "from": obj.get("from"),
                "to": obj.get("to"),
                "value": obj.get("value"),
                "gas": obj.get("gas"),
                "gas_used": obj.get("gas_used"),
                "input": obj.get("input"),
                "output": obj.get("output"),
                "sub_traces": obj.get("sub_traces"),
                "trace_address": obj.get("trace_address"),
                "trace_type": obj.get("trace_type"),
                "call_type": obj.get("call_type"),
                "trace_id": obj.get("trace_id"),
                "status": obj.get("status"),
                "block_hash": obj.get("block_hash"),
                "block_number": obj.get("block_number"),
                "transaction_hash": obj.get("transaction_hash"),
                "transaction_index": obj.get("transaction_index"),
            }
        )
        return _obj
