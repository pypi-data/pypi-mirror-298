
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jneqsim.neqsim.fluidMechanics.flowNode
import jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc
import jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.filmModelBoundary
import jneqsim.neqsim.thermo.system
import typing



class NonEquilibriumFluidBoundary(jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.FluidBoundary):
    molFractionDifference: typing.MutableSequence[typing.MutableSequence[float]] = ...
    @typing.overload
    def __init__(self, flowNodeInterface: jneqsim.neqsim.fluidMechanics.flowNode.FlowNodeInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def calcFluxes(self) -> typing.MutableSequence[float]: ...
    def calcHeatTransferCoefficients(self, int: int) -> None: ...
    def calcHeatTransferCorrection(self, int: int) -> None: ...
    def calcMolFractionDifference(self) -> None: ...
    def clone(self) -> 'NonEquilibriumFluidBoundary': ...
    def heatTransSolve(self) -> None: ...
    def init(self) -> None: ...
    def initHeatTransferCalc(self) -> None: ...
    def initMassTransferCalc(self) -> None: ...
    def massTransSolve(self) -> None: ...
    def setJacMassTrans(self) -> None: ...
    def setJacMassTrans2(self) -> None: ...
    def setfvecMassTrans(self) -> None: ...
    def setfvecMassTrans2(self) -> None: ...
    def setuMassTrans(self) -> None: ...
    def solve(self) -> None: ...
    def updateMassTrans(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary")``.

    NonEquilibriumFluidBoundary: typing.Type[NonEquilibriumFluidBoundary]
    filmModelBoundary: jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.filmModelBoundary.__module_protocol__
