
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jpype
import jneqsim.neqsim.fluidMechanics.flowNode
import jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode
import jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.twoPhaseReactorFlowNode
import jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.twoPhaseStirredCellNode
import jneqsim.neqsim.fluidMechanics.geometryDefinitions
import jneqsim.neqsim.thermo.system
import typing



class TwoPhaseFlowNode(jneqsim.neqsim.fluidMechanics.flowNode.FlowNode):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    def calcContactLength(self) -> float: ...
    def calcFluxes(self) -> None: ...
    def calcGasLiquidContactArea(self) -> float: ...
    def calcHydraulicDiameter(self) -> float: ...
    def calcReynoldNumber(self) -> float: ...
    def calcWallFrictionFactor(self) -> float: ...
    def clone(self) -> 'TwoPhaseFlowNode': ...
    def init(self) -> None: ...
    def initFlowCalc(self) -> None: ...
    def initVelocity(self) -> float: ...
    def setFluxes(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    @typing.overload
    def update(self) -> None: ...
    @typing.overload
    def update(self, double: float) -> None: ...
    def updateMolarFlow(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode")``.

    TwoPhaseFlowNode: typing.Type[TwoPhaseFlowNode]
    twoPhasePipeFlowNode: jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode.__module_protocol__
    twoPhaseReactorFlowNode: jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.twoPhaseReactorFlowNode.__module_protocol__
    twoPhaseStirredCellNode: jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.twoPhaseStirredCellNode.__module_protocol__
