
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jpype
import jneqsim.neqsim.fluidMechanics.flowNode
import jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode
import jneqsim.neqsim.fluidMechanics.geometryDefinitions
import jneqsim.neqsim.thermo.system
import typing



class AnnularFlow(jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.TwoPhaseFlowNode):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, systemInterface2: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    def calcContactLength(self) -> float: ...
    def clone(self) -> 'AnnularFlow': ...
    def getNextNode(self) -> jneqsim.neqsim.fluidMechanics.flowNode.FlowNodeInterface: ...
    def init(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...

class BubbleFlowNode(jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.TwoPhaseFlowNode):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, systemInterface2: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    def calcContactLength(self) -> float: ...
    def calcGasLiquidContactArea(self) -> float: ...
    def clone(self) -> 'BubbleFlowNode': ...
    def getAverageBubbleDiameter(self) -> float: ...
    def getNextNode(self) -> jneqsim.neqsim.fluidMechanics.flowNode.FlowNodeInterface: ...
    def init(self) -> None: ...
    def initFlowCalc(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    def setAverageBubbleDiameter(self, double: float) -> None: ...

class DropletFlowNode(jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.TwoPhaseFlowNode):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, systemInterface2: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    def calcContactLength(self) -> float: ...
    def calcGasLiquidContactArea(self) -> float: ...
    def clone(self) -> 'DropletFlowNode': ...
    def getAverageDropletDiameter(self) -> float: ...
    def getNextNode(self) -> jneqsim.neqsim.fluidMechanics.flowNode.FlowNodeInterface: ...
    def init(self) -> None: ...
    def initFlowCalc(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    @staticmethod
    def mainOld(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    def setAverageDropletDiameter(self, double: float) -> None: ...

class StratifiedFlowNode(jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.TwoPhaseFlowNode):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, systemInterface2: jneqsim.neqsim.thermo.system.SystemInterface, geometryDefinitionInterface: jneqsim.neqsim.fluidMechanics.geometryDefinitions.GeometryDefinitionInterface): ...
    def calcContactLength(self) -> float: ...
    def clone(self) -> 'StratifiedFlowNode': ...
    def getNextNode(self) -> jneqsim.neqsim.fluidMechanics.flowNode.FlowNodeInterface: ...
    def init(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode")``.

    AnnularFlow: typing.Type[AnnularFlow]
    BubbleFlowNode: typing.Type[BubbleFlowNode]
    DropletFlowNode: typing.Type[DropletFlowNode]
    StratifiedFlowNode: typing.Type[StratifiedFlowNode]
