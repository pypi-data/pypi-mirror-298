
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jpype
import jneqsim.neqsim.fluidMechanics.flowSystem.twoPhaseFlowSystem
import jneqsim.neqsim.standards.gasQuality
import jneqsim.neqsim.thermo.system
import typing



class LNGship(jneqsim.neqsim.fluidMechanics.flowSystem.twoPhaseFlowSystem.TwoPhaseFlowSystem):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, double: float, double2: float): ...
    def createSystem(self) -> None: ...
    def getEndTime(self) -> float: ...
    def getInitialTemperature(self) -> float: ...
    def getLiquidDensity(self) -> float: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def getResults(self, string: typing.Union[java.lang.String, str]) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def getStandardISO6976(self) -> jneqsim.neqsim.standards.gasQuality.Standard_ISO6976: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def init(self) -> None: ...
    def isBackCalculate(self) -> bool: ...
    def isSetInitialTemperature(self) -> bool: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    def setBackCalculate(self, boolean: bool) -> None: ...
    def setEndTime(self, double: float) -> None: ...
    @typing.overload
    def setInitialTemperature(self, boolean: bool) -> None: ...
    @typing.overload
    def setInitialTemperature(self, double: float) -> None: ...
    def setLiquidDensity(self, double: float) -> None: ...
    def setResultTable(self, stringArray: typing.Union[typing.List[typing.MutableSequence[java.lang.String]], jpype.JArray]) -> None: ...
    def setStandardISO6976(self, standard_ISO6976: jneqsim.neqsim.standards.gasQuality.Standard_ISO6976) -> None: ...
    def setThermoSystem(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface) -> None: ...
    @typing.overload
    def solveSteadyState(self, int: int) -> None: ...
    @typing.overload
    def solveSteadyState(self, int: int, uUID: java.util.UUID) -> None: ...
    @typing.overload
    def solveTransient(self, int: int) -> None: ...
    @typing.overload
    def solveTransient(self, int: int, uUID: java.util.UUID) -> None: ...
    def useStandardVersion(self, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.fluidMechanics.flowSystem.twoPhaseFlowSystem.shipSystem")``.

    LNGship: typing.Type[LNGship]
