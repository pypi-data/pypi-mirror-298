
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jneqsim.neqsim.processSimulation
import jneqsim.neqsim.processSimulation.controllerDevice
import jneqsim.neqsim.processSimulation.mechanicalDesign
import jneqsim.neqsim.processSimulation.processEquipment.absorber
import jneqsim.neqsim.processSimulation.processEquipment.adsorber
import jneqsim.neqsim.processSimulation.processEquipment.compressor
import jneqsim.neqsim.processSimulation.processEquipment.distillation
import jneqsim.neqsim.processSimulation.processEquipment.expander
import jneqsim.neqsim.processSimulation.processEquipment.filter
import jneqsim.neqsim.processSimulation.processEquipment.heatExchanger
import jneqsim.neqsim.processSimulation.processEquipment.manifold
import jneqsim.neqsim.processSimulation.processEquipment.mixer
import jneqsim.neqsim.processSimulation.processEquipment.pipeline
import jneqsim.neqsim.processSimulation.processEquipment.powerGeneration
import jneqsim.neqsim.processSimulation.processEquipment.pump
import jneqsim.neqsim.processSimulation.processEquipment.reservoir
import jneqsim.neqsim.processSimulation.processEquipment.separator
import jneqsim.neqsim.processSimulation.processEquipment.splitter
import jneqsim.neqsim.processSimulation.processEquipment.stream
import jneqsim.neqsim.processSimulation.processEquipment.subsea
import jneqsim.neqsim.processSimulation.processEquipment.tank
import jneqsim.neqsim.processSimulation.processEquipment.util
import jneqsim.neqsim.processSimulation.processEquipment.valve
import jneqsim.neqsim.thermo.system
import typing



class ProcessEquipmentInterface(jneqsim.neqsim.processSimulation.SimulationInterface):
    def displayResult(self) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getConditionAnalysisMessage(self) -> java.lang.String: ...
    def getController(self) -> jneqsim.neqsim.processSimulation.controllerDevice.ControllerDeviceInterface: ...
    def getEntropyProduction(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getExergyChange(self, string: typing.Union[java.lang.String, str], double: float) -> float: ...
    def getFluid(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def getMassBalance(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getMechanicalDesign(self) -> jneqsim.neqsim.processSimulation.mechanicalDesign.MechanicalDesign: ...
    @typing.overload
    def getPressure(self) -> float: ...
    @typing.overload
    def getPressure(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getReport_json(self) -> java.lang.String: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def getSpecification(self) -> java.lang.String: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def hashCode(self) -> int: ...
    def initMechanicalDesign(self) -> None: ...
    def needRecalculation(self) -> bool: ...
    def reportResults(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def runConditionAnalysis(self, processEquipmentInterface: 'ProcessEquipmentInterface') -> None: ...
    def setController(self, controllerDeviceInterface: jneqsim.neqsim.processSimulation.controllerDevice.ControllerDeviceInterface) -> None: ...
    def setPressure(self, double: float) -> None: ...
    def setRegulatorOutSignal(self, double: float) -> None: ...
    def setSpecification(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def toJson(self) -> java.lang.String: ...

class TwoPortInterface:
    def getInStream(self) -> jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface: ...
    def getInletPressure(self) -> float: ...
    def getInletStream(self) -> jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface: ...
    def getInletTemperature(self) -> float: ...
    def getOutStream(self) -> jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface: ...
    def getOutletPressure(self) -> float: ...
    def getOutletStream(self) -> jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface: ...
    def getOutletTemperature(self) -> float: ...
    def setInletPressure(self, double: float) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface) -> None: ...
    def setInletTemperature(self, double: float) -> None: ...
    def setOutletPressure(self, double: float) -> None: ...
    def setOutletStream(self, streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface) -> None: ...
    def setOutletTemperature(self, double: float) -> None: ...

class ProcessEquipmentBaseClass(jneqsim.neqsim.processSimulation.SimulationBaseClass, ProcessEquipmentInterface):
    hasController: bool = ...
    report: typing.MutableSequence[typing.MutableSequence[java.lang.String]] = ...
    properties: java.util.HashMap = ...
    energyStream: jneqsim.neqsim.processSimulation.processEquipment.stream.EnergyStream = ...
    conditionAnalysisMessage: java.lang.String = ...
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    def copy(self) -> ProcessEquipmentInterface: ...
    def displayResult(self) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getConditionAnalysisMessage(self) -> java.lang.String: ...
    def getController(self) -> jneqsim.neqsim.processSimulation.controllerDevice.ControllerDeviceInterface: ...
    def getEnergyStream(self) -> jneqsim.neqsim.processSimulation.processEquipment.stream.EnergyStream: ...
    def getEntropyProduction(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getExergyChange(self, string: typing.Union[java.lang.String, str], double: float) -> float: ...
    def getMassBalance(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getMechanicalDesign(self) -> jneqsim.neqsim.processSimulation.mechanicalDesign.MechanicalDesign: ...
    @typing.overload
    def getPressure(self) -> float: ...
    @typing.overload
    def getPressure(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getProperty(self, string: typing.Union[java.lang.String, str]) -> typing.Any: ...
    def getReport_json(self) -> java.lang.String: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def getSpecification(self) -> java.lang.String: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def hashCode(self) -> int: ...
    def initMechanicalDesign(self) -> None: ...
    def isSetEnergyStream(self) -> bool: ...
    def reportResults(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def runConditionAnalysis(self, processEquipmentInterface: ProcessEquipmentInterface) -> None: ...
    @typing.overload
    def run_step(self) -> None: ...
    @typing.overload
    def run_step(self, uUID: java.util.UUID) -> None: ...
    def setController(self, controllerDeviceInterface: jneqsim.neqsim.processSimulation.controllerDevice.ControllerDeviceInterface) -> None: ...
    @typing.overload
    def setEnergyStream(self, boolean: bool) -> None: ...
    @typing.overload
    def setEnergyStream(self, energyStream: jneqsim.neqsim.processSimulation.processEquipment.stream.EnergyStream) -> None: ...
    def setFlowValveController(self, controllerDeviceInterface: jneqsim.neqsim.processSimulation.controllerDevice.ControllerDeviceInterface) -> None: ...
    def setPressure(self, double: float) -> None: ...
    def setRegulatorOutSignal(self, double: float) -> None: ...
    def setSpecification(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def solved(self) -> bool: ...
    def toJson(self) -> java.lang.String: ...

class TwoPortEquipment(ProcessEquipmentBaseClass, TwoPortInterface):
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface): ...
    def getInletPressure(self) -> float: ...
    def getInletStream(self) -> jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface: ...
    def getInletTemperature(self) -> float: ...
    def getOutletPressure(self) -> float: ...
    def getOutletStream(self) -> jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface: ...
    def getOutletTemperature(self) -> float: ...
    def setInletPressure(self, double: float) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface) -> None: ...
    def setInletTemperature(self, double: float) -> None: ...
    def setOutletPressure(self, double: float) -> None: ...
    def setOutletStream(self, streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface) -> None: ...
    def setOutletTemperature(self, double: float) -> None: ...
    def toJson(self) -> java.lang.String: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.processSimulation.processEquipment")``.

    ProcessEquipmentBaseClass: typing.Type[ProcessEquipmentBaseClass]
    ProcessEquipmentInterface: typing.Type[ProcessEquipmentInterface]
    TwoPortEquipment: typing.Type[TwoPortEquipment]
    TwoPortInterface: typing.Type[TwoPortInterface]
    absorber: jneqsim.neqsim.processSimulation.processEquipment.absorber.__module_protocol__
    adsorber: jneqsim.neqsim.processSimulation.processEquipment.adsorber.__module_protocol__
    compressor: jneqsim.neqsim.processSimulation.processEquipment.compressor.__module_protocol__
    distillation: jneqsim.neqsim.processSimulation.processEquipment.distillation.__module_protocol__
    expander: jneqsim.neqsim.processSimulation.processEquipment.expander.__module_protocol__
    filter: jneqsim.neqsim.processSimulation.processEquipment.filter.__module_protocol__
    heatExchanger: jneqsim.neqsim.processSimulation.processEquipment.heatExchanger.__module_protocol__
    manifold: jneqsim.neqsim.processSimulation.processEquipment.manifold.__module_protocol__
    mixer: jneqsim.neqsim.processSimulation.processEquipment.mixer.__module_protocol__
    pipeline: jneqsim.neqsim.processSimulation.processEquipment.pipeline.__module_protocol__
    powerGeneration: jneqsim.neqsim.processSimulation.processEquipment.powerGeneration.__module_protocol__
    pump: jneqsim.neqsim.processSimulation.processEquipment.pump.__module_protocol__
    reservoir: jneqsim.neqsim.processSimulation.processEquipment.reservoir.__module_protocol__
    separator: jneqsim.neqsim.processSimulation.processEquipment.separator.__module_protocol__
    splitter: jneqsim.neqsim.processSimulation.processEquipment.splitter.__module_protocol__
    stream: jneqsim.neqsim.processSimulation.processEquipment.stream.__module_protocol__
    subsea: jneqsim.neqsim.processSimulation.processEquipment.subsea.__module_protocol__
    tank: jneqsim.neqsim.processSimulation.processEquipment.tank.__module_protocol__
    util: jneqsim.neqsim.processSimulation.processEquipment.util.__module_protocol__
    valve: jneqsim.neqsim.processSimulation.processEquipment.valve.__module_protocol__
