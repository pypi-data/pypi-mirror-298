
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import jpype
import jneqsim.neqsim.physicalProperties.interfaceProperties.solidAdsorption
import jneqsim.neqsim.physicalProperties.interfaceProperties.surfaceTension
import jneqsim.neqsim.thermo.system
import typing



class InterphasePropertiesInterface(java.lang.Cloneable):
    def calcAdsorption(self) -> None: ...
    def clone(self) -> 'InterphasePropertiesInterface': ...
    @typing.overload
    def getAdsorptionCalc(self, string: typing.Union[java.lang.String, str]) -> jneqsim.neqsim.physicalProperties.interfaceProperties.solidAdsorption.AdsorptionInterface: ...
    @typing.overload
    def getAdsorptionCalc(self) -> typing.MutableSequence[jneqsim.neqsim.physicalProperties.interfaceProperties.solidAdsorption.AdsorptionInterface]: ...
    def getInterfacialTensionModel(self) -> int: ...
    @typing.overload
    def getSurfaceTension(self, int: int, int2: int) -> float: ...
    @typing.overload
    def getSurfaceTension(self, int: int, int2: int, string: typing.Union[java.lang.String, str]) -> float: ...
    def getSurfaceTensionModel(self, int: int) -> jneqsim.neqsim.physicalProperties.interfaceProperties.surfaceTension.SurfaceTensionInterface: ...
    @typing.overload
    def init(self) -> None: ...
    @typing.overload
    def init(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface) -> None: ...
    def initAdsorption(self) -> None: ...
    def setAdsorptionCalc(self, adsorptionInterfaceArray: typing.Union[typing.List[jneqsim.neqsim.physicalProperties.interfaceProperties.solidAdsorption.AdsorptionInterface], jpype.JArray]) -> None: ...
    @typing.overload
    def setInterfacialTensionModel(self, int: int) -> None: ...
    @typing.overload
    def setInterfacialTensionModel(self, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str]) -> None: ...
    def setSolidAdsorbentMaterial(self, string: typing.Union[java.lang.String, str]) -> None: ...

class InterfaceProperties(InterphasePropertiesInterface, java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def calcAdsorption(self) -> None: ...
    def clone(self) -> 'InterfaceProperties': ...
    @typing.overload
    def getAdsorptionCalc(self, string: typing.Union[java.lang.String, str]) -> jneqsim.neqsim.physicalProperties.interfaceProperties.solidAdsorption.AdsorptionInterface: ...
    @typing.overload
    def getAdsorptionCalc(self) -> typing.MutableSequence[jneqsim.neqsim.physicalProperties.interfaceProperties.solidAdsorption.AdsorptionInterface]: ...
    def getInterfacialTensionModel(self) -> int: ...
    @typing.overload
    def getSurfaceTension(self, int: int, int2: int) -> float: ...
    @typing.overload
    def getSurfaceTension(self, int: int, int2: int, string: typing.Union[java.lang.String, str]) -> float: ...
    def getSurfaceTensionModel(self, int: int) -> jneqsim.neqsim.physicalProperties.interfaceProperties.surfaceTension.SurfaceTensionInterface: ...
    @typing.overload
    def init(self) -> None: ...
    @typing.overload
    def init(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface) -> None: ...
    def initAdsorption(self) -> None: ...
    def setAdsorptionCalc(self, adsorptionInterfaceArray: typing.Union[typing.List[jneqsim.neqsim.physicalProperties.interfaceProperties.solidAdsorption.AdsorptionInterface], jpype.JArray]) -> None: ...
    @typing.overload
    def setInterfacialTensionModel(self, int: int) -> None: ...
    @typing.overload
    def setInterfacialTensionModel(self, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str]) -> None: ...
    def setSolidAdsorbentMaterial(self, string: typing.Union[java.lang.String, str]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.physicalProperties.interfaceProperties")``.

    InterfaceProperties: typing.Type[InterfaceProperties]
    InterphasePropertiesInterface: typing.Type[InterphasePropertiesInterface]
    solidAdsorption: jneqsim.neqsim.physicalProperties.interfaceProperties.solidAdsorption.__module_protocol__
    surfaceTension: jneqsim.neqsim.physicalProperties.interfaceProperties.surfaceTension.__module_protocol__
