
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jpype
import jneqsim.neqsim.fluidMechanics.flowNode
import jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary
import jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.filmModelBoundary.reactiveFilmModel
import jneqsim.neqsim.thermo
import jneqsim.neqsim.thermo.system
import typing



class KrishnaStandartFilmModel(jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.NonEquilibriumFluidBoundary, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    @typing.overload
    def __init__(self, flowNodeInterface: jneqsim.neqsim.fluidMechanics.flowNode.FlowNodeInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def calcBinaryMassTransferCoefficients(self, int: int) -> float: ...
    def calcBinarySchmidtNumbers(self, int: int) -> float: ...
    def calcCorrectionMatrix(self, int: int) -> None: ...
    def calcMassTransferCoefficients(self, int: int) -> float: ...
    def calcPhiMatrix(self, int: int) -> None: ...
    def calcRedCorrectionMatrix(self, int: int) -> None: ...
    def calcRedPhiMatrix(self, int: int) -> None: ...
    def calcTotalMassTransferCoefficientMatrix(self, int: int) -> None: ...
    def clone(self) -> 'KrishnaStandartFilmModel': ...
    def init(self) -> None: ...
    def initCorrections(self, int: int) -> None: ...
    def initHeatTransferCalc(self) -> None: ...
    def initMassTransferCalc(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    def solve(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.filmModelBoundary")``.

    KrishnaStandartFilmModel: typing.Type[KrishnaStandartFilmModel]
    reactiveFilmModel: jneqsim.neqsim.fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.filmModelBoundary.reactiveFilmModel.__module_protocol__
