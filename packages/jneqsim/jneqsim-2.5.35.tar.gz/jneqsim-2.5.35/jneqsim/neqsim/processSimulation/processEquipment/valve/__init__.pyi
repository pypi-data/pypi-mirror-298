
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jneqsim.neqsim.processSimulation.mechanicalDesign.valve
import jneqsim.neqsim.processSimulation.processEquipment
import jneqsim.neqsim.processSimulation.processEquipment.stream
import jneqsim.neqsim.thermo.system
import typing



class ValveInterface(jneqsim.neqsim.processSimulation.processEquipment.ProcessEquipmentInterface, jneqsim.neqsim.processSimulation.processEquipment.TwoPortInterface):
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def getCv(self) -> float: ...
    @typing.overload
    def getCv(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getPercentValveOpening(self) -> float: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def hashCode(self) -> int: ...
    def isIsoThermal(self) -> bool: ...
    @typing.overload
    def setCv(self, double: float) -> None: ...
    @typing.overload
    def setCv(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...
    def setIsoThermal(self, boolean: bool) -> None: ...
    def setPercentValveOpening(self, double: float) -> None: ...

class ThrottlingValve(jneqsim.neqsim.processSimulation.processEquipment.TwoPortEquipment, ValveInterface):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface): ...
    @typing.overload
    def __init__(self, streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface): ...
    def calcCv(self, double: float, double2: float, double3: float, double4: float, double5: float) -> float: ...
    def calcPercentValveOpening(self, double: float, double2: float, double3: float, double4: float, double5: float) -> float: ...
    @staticmethod
    def calcPercentValveOpeningLiquid(double: float, double2: float, double3: float, double4: float, double5: float, double6: float) -> float: ...
    def calcValvePout(self, double: float, double2: float, double3: float, double4: float, double5: float) -> float: ...
    def calcmassflow(self, double: float, double2: float, double3: float, double4: float, double5: float) -> float: ...
    def displayResult(self) -> None: ...
    @typing.overload
    def getCv(self) -> float: ...
    @typing.overload
    def getCv(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getDeltaPressure(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getEntropyProduction(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getExergyChange(self, string: typing.Union[java.lang.String, str], double: float) -> float: ...
    def getFp(self) -> float: ...
    def getInletPressure(self) -> float: ...
    def getMechanicalDesign(self) -> jneqsim.neqsim.processSimulation.mechanicalDesign.valve.ValveMechanicalDesign: ...
    def getOutletPressure(self) -> float: ...
    def getPercentValveOpening(self) -> float: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def initMechanicalDesign(self) -> None: ...
    def isAcceptNegativeDP(self) -> bool: ...
    def isGasValve(self) -> bool: ...
    def isIsoThermal(self) -> bool: ...
    def isValveCvSet(self) -> bool: ...
    @staticmethod
    def liquidValveCv(double: float, double2: float, double3: float, double4: float, double5: float, double6: float) -> float: ...
    @staticmethod
    def liquidValveMassFlow(double: float, double2: float, double3: float, double4: float, double5: float, double6: float) -> float: ...
    @staticmethod
    def liquidValvePout(double: float, double2: float, double3: float, double4: float, double5: float, double6: float) -> float: ...
    def needRecalculation(self) -> bool: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def runController(self, double: float, uUID: java.util.UUID) -> None: ...
    @typing.overload
    def runTransient(self, double: float) -> None: ...
    @typing.overload
    def runTransient(self, double: float, uUID: java.util.UUID) -> None: ...
    def setAcceptNegativeDP(self, boolean: bool) -> None: ...
    @typing.overload
    def setCv(self, double: float) -> None: ...
    @typing.overload
    def setCv(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...
    def setFp(self, double: float) -> None: ...
    def setGasValve(self, boolean: bool) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface) -> None: ...
    def setIsCalcOutPressure(self, boolean: bool) -> None: ...
    def setIsoThermal(self, boolean: bool) -> None: ...
    def setMinimumValveOpening(self, double: float) -> None: ...
    @typing.overload
    def setOutletPressure(self, double: float) -> None: ...
    @typing.overload
    def setOutletPressure(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...
    def setPercentValveOpening(self, double: float) -> None: ...
    @typing.overload
    def setPressure(self, double: float) -> None: ...
    @typing.overload
    def setPressure(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...
    def setValveCvSet(self, boolean: bool) -> None: ...
    def toJson(self) -> java.lang.String: ...

class SafetyValve(ThrottlingValve):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface): ...
    @typing.overload
    def __init__(self, streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface): ...
    def getFullOpenPressure(self) -> float: ...
    def getPressureSpec(self) -> float: ...
    def setFullOpenPressure(self, double: float) -> None: ...
    def setPressureSpec(self, double: float) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.processSimulation.processEquipment.valve")``.

    SafetyValve: typing.Type[SafetyValve]
    ThrottlingValve: typing.Type[ThrottlingValve]
    ValveInterface: typing.Type[ValveInterface]
