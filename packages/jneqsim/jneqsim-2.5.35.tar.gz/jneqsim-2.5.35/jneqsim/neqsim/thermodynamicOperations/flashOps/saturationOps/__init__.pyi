
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import jpype
import jneqsim.neqsim.thermo
import jneqsim.neqsim.thermo.system
import jneqsim.neqsim.thermodynamicOperations
import org.jfree.chart
import typing



class ConstantDutyFlashInterface(jneqsim.neqsim.thermodynamicOperations.OperationInterface):
    def isSuperCritical(self) -> bool: ...

class cricondenBarTemp(java.io.Serializable):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, int: int, int2: int): ...
    def init(self) -> None: ...
    def setJac(self) -> None: ...
    def setfvec(self) -> None: ...
    def setu(self) -> None: ...
    def solve(self) -> float: ...

class cricondenBarTemp1(java.io.Serializable):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def displayResult(self) -> None: ...
    def get(self, string: typing.Union[java.lang.String, str]) -> typing.MutableSequence[float]: ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def init(self) -> None: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def setJac(self) -> None: ...
    def setfvec(self) -> None: ...
    def setu(self) -> None: ...
    def solve(self) -> float: ...

class constantDutyFlash(ConstantDutyFlashInterface):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def addData(self, string: typing.Union[java.lang.String, str], doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> None: ...
    def displayResult(self) -> None: ...
    def get(self, string: typing.Union[java.lang.String, str]) -> typing.MutableSequence[float]: ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def isSuperCritical(self) -> bool: ...
    def run(self) -> None: ...
    def setSuperCritical(self, boolean: bool) -> None: ...

class constantDutyPressureFlash(constantDutyFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class constantDutyTemperatureFlash(constantDutyFlash):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class FreezeOut(constantDutyTemperatureFlash, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    FCompTemp: typing.MutableSequence[float] = ...
    FCompNames: typing.MutableSequence[java.lang.String] = ...
    noFreezeFlash: bool = ...
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class FugTestConstP(constantDutyTemperatureFlash, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    temp: float = ...
    pres: float = ...
    testSystem: jneqsim.neqsim.thermo.system.SystemInterface = ...
    testSystem2: jneqsim.neqsim.thermo.system.SystemInterface = ...
    testOps: jneqsim.neqsim.thermodynamicOperations.ThermodynamicOperations = ...
    testOps2: jneqsim.neqsim.thermodynamicOperations.ThermodynamicOperations = ...
    compNumber: int = ...
    compName: java.lang.String = ...
    compNameGiven: bool = ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, double: float): ...
    def PrintToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def initTestSystem2(self, int: int) -> None: ...
    def run(self) -> None: ...

class HCdewPointPressureFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class HydrateEquilibriumLine(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, double: float, double2: float): ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def run(self) -> None: ...

class HydrateFormationPressureFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def setFug(self) -> None: ...

class HydrateFormationTemperatureFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def run2(self) -> None: ...
    def setFug(self) -> None: ...
    def stop(self) -> None: ...

class HydrateInhibitorConcentrationFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...

class HydrateInhibitorwtFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...

class SolidComplexTemperatureCalc(constantDutyTemperatureFlash):
    Kcomplex: typing.ClassVar[float] = ...
    HrefComplex: typing.ClassVar[float] = ...
    TrefComplex: typing.ClassVar[float] = ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]): ...
    def getHrefComplex(self) -> float: ...
    def getKcomplex(self) -> float: ...
    def getTrefComplex(self) -> float: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def runOld(self) -> None: ...
    def setHrefComplex(self, double: float) -> None: ...
    def setKcomplex(self, double: float) -> None: ...
    def setTrefComplex(self, double: float) -> None: ...

class WATcalc(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class WaterDewPointEquilibriumLine(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, double: float, double2: float): ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def run(self) -> None: ...

class addIonToScaleSaturation(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, int: int, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]): ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class bubblePointPressureFlash(constantDutyPressureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class bubblePointPressureFlashDer(constantDutyPressureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class bubblePointTemperatureFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class bubblePointTemperatureNoDer(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class calcSaltSatauration(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str]): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class checkScalePotential(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, int: int): ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class cricondebarFlash(constantDutyPressureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def calcx(self) -> float: ...
    def initMoleFraction(self) -> float: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def run2(self) -> None: ...
    def setJac(self) -> None: ...
    def setfvec(self) -> None: ...

class dewPointPressureFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class dewPointTemperatureFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class dewPointTemperatureFlashDer(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class freezingPointTemperatureFlash(constantDutyTemperatureFlash, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    noFreezeFlash: bool = ...
    Niterations: int = ...
    name: java.lang.String = ...
    phaseName: java.lang.String = ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, boolean: bool): ...
    def calcFunc(self) -> float: ...
    @typing.overload
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def printToFile(self, string: typing.Union[java.lang.String, str], stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray], doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def run(self) -> None: ...

class freezingPointTemperatureFlashOld(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class freezingPointTemperatureFlashTR(constantDutyTemperatureFlash, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    noFreezeFlash: bool = ...
    Niterations: int = ...
    FCompNames: typing.MutableSequence[java.lang.String] = ...
    FCompTemp: typing.MutableSequence[float] = ...
    compnr: int = ...
    name: java.lang.String = ...
    CCequation: bool = ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, boolean: bool): ...
    def getNiterations(self) -> int: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class waterDewPointTemperatureFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class waterDewPointTemperatureMultiphaseFlash(constantDutyTemperatureFlash):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.thermodynamicOperations.flashOps.saturationOps")``.

    ConstantDutyFlashInterface: typing.Type[ConstantDutyFlashInterface]
    FreezeOut: typing.Type[FreezeOut]
    FugTestConstP: typing.Type[FugTestConstP]
    HCdewPointPressureFlash: typing.Type[HCdewPointPressureFlash]
    HydrateEquilibriumLine: typing.Type[HydrateEquilibriumLine]
    HydrateFormationPressureFlash: typing.Type[HydrateFormationPressureFlash]
    HydrateFormationTemperatureFlash: typing.Type[HydrateFormationTemperatureFlash]
    HydrateInhibitorConcentrationFlash: typing.Type[HydrateInhibitorConcentrationFlash]
    HydrateInhibitorwtFlash: typing.Type[HydrateInhibitorwtFlash]
    SolidComplexTemperatureCalc: typing.Type[SolidComplexTemperatureCalc]
    WATcalc: typing.Type[WATcalc]
    WaterDewPointEquilibriumLine: typing.Type[WaterDewPointEquilibriumLine]
    addIonToScaleSaturation: typing.Type[addIonToScaleSaturation]
    bubblePointPressureFlash: typing.Type[bubblePointPressureFlash]
    bubblePointPressureFlashDer: typing.Type[bubblePointPressureFlashDer]
    bubblePointTemperatureFlash: typing.Type[bubblePointTemperatureFlash]
    bubblePointTemperatureNoDer: typing.Type[bubblePointTemperatureNoDer]
    calcSaltSatauration: typing.Type[calcSaltSatauration]
    checkScalePotential: typing.Type[checkScalePotential]
    constantDutyFlash: typing.Type[constantDutyFlash]
    constantDutyPressureFlash: typing.Type[constantDutyPressureFlash]
    constantDutyTemperatureFlash: typing.Type[constantDutyTemperatureFlash]
    cricondebarFlash: typing.Type[cricondebarFlash]
    cricondenBarTemp: typing.Type[cricondenBarTemp]
    cricondenBarTemp1: typing.Type[cricondenBarTemp1]
    dewPointPressureFlash: typing.Type[dewPointPressureFlash]
    dewPointTemperatureFlash: typing.Type[dewPointTemperatureFlash]
    dewPointTemperatureFlashDer: typing.Type[dewPointTemperatureFlashDer]
    freezingPointTemperatureFlash: typing.Type[freezingPointTemperatureFlash]
    freezingPointTemperatureFlashOld: typing.Type[freezingPointTemperatureFlashOld]
    freezingPointTemperatureFlashTR: typing.Type[freezingPointTemperatureFlashTR]
    waterDewPointTemperatureFlash: typing.Type[waterDewPointTemperatureFlash]
    waterDewPointTemperatureMultiphaseFlash: typing.Type[waterDewPointTemperatureMultiphaseFlash]
