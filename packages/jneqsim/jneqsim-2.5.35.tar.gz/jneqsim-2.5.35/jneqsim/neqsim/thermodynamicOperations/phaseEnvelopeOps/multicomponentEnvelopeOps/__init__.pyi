
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import jpype
import jneqsim.neqsim.thermo.system
import jneqsim.neqsim.thermodynamicOperations
import org.jfree.chart
import typing



class HPTphaseEnvelope(jneqsim.neqsim.thermodynamicOperations.BaseOperation):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def displayResult(self) -> None: ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class pTphaseEnvelope(jneqsim.neqsim.thermodynamicOperations.BaseOperation):
    points2: typing.MutableSequence[typing.MutableSequence[float]] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float, double2: float, boolean: bool): ...
    def addData(self, string: typing.Union[java.lang.String, str], doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> None: ...
    def calcHydrateLine(self) -> None: ...
    def displayResult(self) -> None: ...
    def get(self, string: typing.Union[java.lang.String, str]) -> typing.MutableSequence[float]: ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def isBubblePointFirst(self) -> bool: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def setBubblePointFirst(self, boolean: bool) -> None: ...
    def tempKWilson(self, double: float, double2: float) -> float: ...

class pTphaseEnvelope1(jneqsim.neqsim.thermodynamicOperations.BaseOperation):
    points2: typing.MutableSequence[typing.MutableSequence[float]] = ...
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float, double2: float, boolean: bool): ...
    def displayResult(self) -> None: ...
    def get(self, string: typing.Union[java.lang.String, str]) -> typing.MutableSequence[float]: ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def isBubblePointFirst(self) -> bool: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def setBubblePointFirst(self, boolean: bool) -> None: ...

class pTphaseEnvelopeMay(jneqsim.neqsim.thermodynamicOperations.BaseOperation):
    points2: typing.MutableSequence[typing.MutableSequence[float]] = ...
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float, double2: float, boolean: bool): ...
    def addData(self, string: typing.Union[java.lang.String, str], doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> None: ...
    def calcHydrateLine(self) -> None: ...
    def displayResult(self) -> None: ...
    def get(self, string: typing.Union[java.lang.String, str]) -> typing.MutableSequence[float]: ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def isBubblePointFirst(self) -> bool: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def setBubblePointFirst(self, boolean: bool) -> None: ...
    def tempKWilson(self, double: float, double2: float) -> float: ...

class pTphaseEnvelopeNew(jneqsim.neqsim.thermodynamicOperations.BaseOperation):
    points2: typing.MutableSequence[typing.MutableSequence[float]] = ...
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float, double2: float): ...
    def displayResult(self) -> None: ...
    def get(self, string: typing.Union[java.lang.String, str]) -> typing.MutableSequence[float]: ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getPoints(self, int: int) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...

class pTphaseEnvelopeNew2(jneqsim.neqsim.thermodynamicOperations.BaseOperation):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float, double2: float, boolean: bool): ...
    def calcHydrateLine(self) -> None: ...
    def displayResult(self) -> None: ...
    def get(self, string: typing.Union[java.lang.String, str]) -> typing.MutableSequence[float]: ...
    def getJFreeChart(self, string: typing.Union[java.lang.String, str]) -> org.jfree.chart.JFreeChart: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def isBubblePointFirst(self) -> bool: ...
    def printToFile(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def run(self) -> None: ...
    def setBubblePointFirst(self, boolean: bool) -> None: ...
    def tempKWilson(self, double: float, double2: float) -> float: ...

class sysNewtonRhapsonPhaseEnvelope(java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, int: int, int2: int): ...
    def calcCrit(self) -> None: ...
    def calcInc(self, int: int) -> None: ...
    def calcInc2(self, int: int) -> None: ...
    def calc_x_y(self) -> None: ...
    def findSpecEq(self) -> None: ...
    def findSpecEqInit(self) -> None: ...
    def getNpCrit(self) -> int: ...
    def init(self) -> None: ...
    def setJac(self) -> None: ...
    def setJac2(self) -> None: ...
    def setfvec(self) -> None: ...
    def setfvec22(self) -> None: ...
    def setu(self) -> None: ...
    def sign(self, double: float, double2: float) -> float: ...
    def solve(self, int: int) -> None: ...
    def useAsSpecEq(self, int: int) -> None: ...

class sysNewtonRhapsonPhaseEnvelope2(java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def calcInc(self, int: int) -> None: ...
    def calcInc2(self, int: int) -> None: ...
    def critPassed(self) -> bool: ...
    def findSpecEq(self) -> None: ...
    def findSpecEqInit(self) -> None: ...
    def getNpCrit(self) -> int: ...
    def init(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    def setJac(self) -> None: ...
    def setfvec(self) -> None: ...
    def setu(self) -> None: ...
    def sign(self, double: float, double2: float) -> float: ...
    def solve(self, int: int) -> None: ...

class CricondenBarFlash(pTphaseEnvelope):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray], doubleArray3: typing.Union[typing.List[float], jpype.JArray]): ...
    def funcP(self) -> None: ...
    def funcT(self) -> None: ...
    def init(self) -> None: ...
    def run(self) -> None: ...
    def setNewK(self) -> None: ...
    def setNewX(self) -> None: ...

class CricondenThermFlash(pTphaseEnvelope):
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: typing.Union[java.lang.String, str], double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray], doubleArray3: typing.Union[typing.List[float], jpype.JArray]): ...
    def funcP(self) -> None: ...
    def funcT(self) -> None: ...
    def init(self) -> None: ...
    def run(self) -> None: ...
    def setNewK(self) -> None: ...
    def setNewX(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.thermodynamicOperations.phaseEnvelopeOps.multicomponentEnvelopeOps")``.

    CricondenBarFlash: typing.Type[CricondenBarFlash]
    CricondenThermFlash: typing.Type[CricondenThermFlash]
    HPTphaseEnvelope: typing.Type[HPTphaseEnvelope]
    pTphaseEnvelope: typing.Type[pTphaseEnvelope]
    pTphaseEnvelope1: typing.Type[pTphaseEnvelope1]
    pTphaseEnvelopeMay: typing.Type[pTphaseEnvelopeMay]
    pTphaseEnvelopeNew: typing.Type[pTphaseEnvelopeNew]
    pTphaseEnvelopeNew2: typing.Type[pTphaseEnvelopeNew2]
    sysNewtonRhapsonPhaseEnvelope: typing.Type[sysNewtonRhapsonPhaseEnvelope]
    sysNewtonRhapsonPhaseEnvelope2: typing.Type[sysNewtonRhapsonPhaseEnvelope2]
