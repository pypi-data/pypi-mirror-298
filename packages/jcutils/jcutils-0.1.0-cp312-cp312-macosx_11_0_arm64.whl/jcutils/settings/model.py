# generated by datamodel-codegen:
#   filename:  <stdin>

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field


class App(BaseModel):
    name: str
    name10: str
    mode: str
    workers: int
    cron_workers: int
    reload: bool
    debug: bool


class Dirs(BaseModel):
    logs_dir: str
    temp_dir: str
    out_dir: str
    mail_dir: str
    conf_dir: str
    logs_path: str
    temp_path: str
    out_path: str
    mail_path: str
    app_log_path: str


class Common(BaseModel):
    app_log_path: str


class ApocalypseDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class ReceiveDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class FrameDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class RedisDb(BaseModel):
    host: str
    port: int
    password: str


class Ck1Db(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class Ck2Db(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class DwsDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class GuanyuanDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class GqshStoreDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class GqshOrderDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class SpiderDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class EcologyDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class GqshTpDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class GqshActivity(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class GqshStock(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class GqshProvider(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class OpsigenesDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class GqshSpiderDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class DingtalkDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class MssqlDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class MasterMssqlDb(BaseModel):
    host: str
    user: str
    passwd: str
    db: str
    port: int


class Databases(BaseModel):
    apocalypse_db: ApocalypseDb
    receive_db: ReceiveDb
    frame_db: FrameDb
    redis_db: RedisDb
    ck1_db: Ck1Db
    ck2_db: Ck2Db
    dws_db: DwsDb
    guanyuan_db: GuanyuanDb
    gqsh_store_db: GqshStoreDb
    gqsh_order_db: GqshOrderDb
    spider_db: SpiderDb
    ecology_db: EcologyDb
    gqsh_tp_db: GqshTpDb
    gqsh_activity: GqshActivity
    gqsh_stock: GqshStock
    gqsh_provider: GqshProvider
    opsigenes_db: OpsigenesDb
    gqsh_spider_db: GqshSpiderDb
    dingtalk_db: DingtalkDb
    mssql_db: MssqlDb
    master_mssql_db: MasterMssqlDb


class CrmFtp(BaseModel):
    host: str
    user: str
    passwd: str
    port: int


class Ftp(BaseModel):
    crm_ftp: CrmFtp


class HbaseDb(BaseModel):
    host: str
    port: int


class Hbase(BaseModel):
    hbase_db: HbaseDb


class Urls(BaseModel):
    flink_ui: str
    icc_url: str
    dianchi_url: str
    xuanji_url: str
    databi_url: str
    shence_url: str
    airflow_url: str
    sentry_url: str
    sentry_url_cron: str


class Wechat(BaseModel):
    wechat_personal_alarm: str
    wechat_personal_notify: str
    wechat_data_quality: str
    wechat_data_real: str
    wechat_data_app: str
    wechat_data_flink: str


class Kafka(BaseModel):
    bootstrap_servers: str


class Credentials(BaseModel):
    agent_code: str
    app_id: str
    signature_key: str
    access_id: str
    access_key: str
    dli_ak: str
    dli_sk: str
    dli_endpoint: str
    dli_project_id: str
    shence_api_secret: str
    guanyuan_user_token: str


class Ldap(BaseModel):
    host: str
    port: int
    admin_user: str
    admin_password: str
    base_search: str


class Email(BaseModel):
    server: str
    address: str
    username: str
    password: str
    from_: str = Field(..., alias='from')
    to: str


class Data(BaseModel):
    dataworks_project: List[str]


class Model(BaseModel):
    app: App
    dirs: Dirs
    common: Common
    databases: Databases
    ftp: Ftp
    hbase: Hbase
    urls: Urls
    wechat: Wechat
    kafka: Kafka
    credentials: Credentials
    ldap: Ldap
    email: Email
    data: Data
