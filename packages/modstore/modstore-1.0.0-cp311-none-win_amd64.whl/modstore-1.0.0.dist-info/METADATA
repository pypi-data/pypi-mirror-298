Metadata-Version: 2.3
Name: modstore
Version: 1.0.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Dist: maturin
License-File: LICENSE
Summary: Basic and Moded data structures with rust backend for speed.
Author-email: Soumyo Deep Gupta <deep.main.ac@gmail.com>
Maintainer-email: Soumyo Deep Gupta <deep.main.ac@gmail.com>
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Project-URL: GitHub, https://github.com/d33p0st/modstore
Project-URL: Pull-Requests, https://github.com/d33p0st/modstore/pulls
Project-URL: Issues, https://github.com/d33p0st/modstore/pulls

[![Unit Tests](https://github.com/d33p0st/modstore/actions/workflows/tests.yml/badge.svg)](https://github.com/d33p0st/modstore/actions/workflows/tests.yml)
[![Build](https://github.com/d33p0st/modstore/actions/workflows/generate_wheels.yml/badge.svg)](https://github.com/d33p0st/modstore/actions/workflows/generate_wheels.yml)

# Overview

`modstore` brings about the speed python lacked while implementing complex `Data Structures`. `modstore` upgrades pre-existing `Data Structures` to the point you can laid back and use `pre-built` complex functions. While still keeping the base Structures, `modstore` introduces better and improves ones such as `BlockChain`, `DAG` and much more.

Leveraging `Rust`'s speed and safety, new `Data Structures` are lightning fast and gives you the comfortability of using them via `Python`.

## Features

`modstore` provides a ton of data structures to mess around with.

`Categories:`

- Rust

  - [BlockChain](/docs/BlockChain/blockchain.md): Using Rust's performance, create a tamper proof blockchain data structure of your required difficulty. Search through the blockchain and retrieve data in their original form as provided. See docs [here](/docs/BlockChain/blockchain.md).

  - [DAG](/docs/DAG/dag.md): Directed Acyclic Graphs is a graph with no cycles, used in certain blockchain variants like [IOTA](https://www.iota.org). Create and manipulate and store Network Like data in DAGs. See docs [here](/docs/DAG/dag.md).

  - More Coming Soon!

- Python
  
  - [Stack](/docs/Stack/stack.md)
  - [List](/docs/List/list.md)
  - More Coming Soon!

## Installation

Install using pip,

```sh
pip install modstore
```

## Documentation

For documentation, check out the [docs](/docs/) folder in the repository.

Repository Link for PYPI users. Click [here](https://github.com/d33p0st/modstore)

## Issues

#### File Bugs in the issue tracker with this template [here](https://github.com/d33p0st/modstore/blob/main/.github/ISSUE_TEMPLATE/bug_report.md).

#### Feature Requests [here](https://github.com/d33p0st/modstore/blob/main/.github/ISSUE_TEMPLATE/feature_request.md)

#### Other issues [here](https://github.com/d33p0st/modstore/blob/main/.github/ISSUE_TEMPLATE/custom.md)
