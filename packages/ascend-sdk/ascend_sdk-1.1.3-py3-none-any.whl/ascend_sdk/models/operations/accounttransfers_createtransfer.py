"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    acatstransfer as components_acatstransfer,
    httpmetadata as components_httpmetadata,
    transfercreate as components_transfercreate,
)
from ascend_sdk.models.errors import status as errors_status
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class AccountTransfersCreateTransferRequestTypedDict(TypedDict):
    correspondent_id: str
    r"""The correspondent id."""
    account_id: str
    r"""The account id."""
    transfer_create: components_transfercreate.TransferCreateTypedDict
    request_id: NotRequired[str]
    r"""A client-specified ID for the account transfer; no specific pattern is imposed. This field is used for idempotency to ensure that repeated requests with the same ID do not result in duplicate transfers."""


class AccountTransfersCreateTransferRequest(BaseModel):
    correspondent_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The correspondent id."""
    account_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The account id."""
    transfer_create: Annotated[
        components_transfercreate.TransferCreate,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    request_id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A client-specified ID for the account transfer; no specific pattern is imposed. This field is used for idempotency to ensure that repeated requests with the same ID do not result in duplicate transfers."""


class AccountTransfersCreateTransferResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    acats_transfer: NotRequired[components_acatstransfer.AcatsTransferTypedDict]
    r"""OK"""
    status: NotRequired[errors_status.Status]
    r"""INVALID_ARGUMENT: The request has an invalid argument."""


class AccountTransfersCreateTransferResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None
    acats_transfer: Optional[components_acatstransfer.AcatsTransfer] = None
    r"""OK"""
    status: Optional[errors_status.Status] = None
    r"""INVALID_ARGUMENT: The request has an invalid argument."""
