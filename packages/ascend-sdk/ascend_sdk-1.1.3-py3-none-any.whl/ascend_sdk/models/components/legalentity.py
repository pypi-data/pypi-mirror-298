"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .relatedpep import RelatedPep, RelatedPepTypedDict
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class LegalEntityCorporateStructure(str, Enum):
    r"""Corporate structure of the entity."""
    ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED = "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED"
    CORPORATION_C_CORP = "CORPORATION_C_CORP"
    CORPORATION_S_CORP = "CORPORATION_S_CORP"
    CORPORATION_B_CORP = "CORPORATION_B_CORP"
    CORPORATION_NONPROFIT = "CORPORATION_NONPROFIT"


class LegalEntityBusinessIndustrialClassification(str, Enum):
    BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED = (
        "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED"
    )
    AGRICULTURE_FORESTRY_AND_FISHING = "AGRICULTURE_FORESTRY_AND_FISHING"
    MINING = "MINING"
    CONSTRUCTION = "CONSTRUCTION"
    MANUFACTURING = "MANUFACTURING"
    TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES = (
        "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES"
    )
    WHOLESALE_TRADE = "WHOLESALE_TRADE"
    RETAIL_TRADE = "RETAIL_TRADE"
    FINANCE_INSURANCE_AND_REAL_ESTATE = "FINANCE_INSURANCE_AND_REAL_ESTATE"
    SERVICES = "SERVICES"
    PUBLIC_ADMINISTRATION = "PUBLIC_ADMINISTRATION"


class InternalAmlPolicyPrincipalReviewDateTypedDict(TypedDict):
    r"""The date when the principal reviewed the internal anti-money laundering policy"""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class InternalAmlPolicyPrincipalReviewDate(BaseModel):
    r"""The date when the principal reviewed the internal anti-money laundering policy"""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class BrokerAmlPolicyInternalReviewTypedDict(TypedDict):
    r"""The broker's internal review of their anti-money laundering policy"""

    internal_aml_policy_principal_review_date: NotRequired[
        Nullable[InternalAmlPolicyPrincipalReviewDateTypedDict]
    ]
    r"""The date when the principal reviewed the internal anti-money laundering policy"""
    internal_aml_policy_principal_reviewer_name: NotRequired[str]
    r"""The name of the principal who reviewed the internal anti-money laundering policy"""
    internal_aml_policy_principal_reviewer_title: NotRequired[str]
    r"""The title of the principal who reviewed the internal anti-money laundering policy"""
    internally_reviewed_by_appropriate_principal: NotRequired[bool]
    r"""Indicates whether the anti-money laundering policy has been reviewed internally by an appropriate principal"""


class BrokerAmlPolicyInternalReview(BaseModel):
    r"""The broker's internal review of their anti-money laundering policy"""

    internal_aml_policy_principal_review_date: OptionalNullable[
        InternalAmlPolicyPrincipalReviewDate
    ] = UNSET
    r"""The date when the principal reviewed the internal anti-money laundering policy"""
    internal_aml_policy_principal_reviewer_name: Optional[str] = None
    r"""The name of the principal who reviewed the internal anti-money laundering policy"""
    internal_aml_policy_principal_reviewer_title: Optional[str] = None
    r"""The title of the principal who reviewed the internal anti-money laundering policy"""
    internally_reviewed_by_appropriate_principal: Optional[bool] = None
    r"""Indicates whether the anti-money laundering policy has been reviewed internally by an appropriate principal"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "internal_aml_policy_principal_review_date",
            "internal_aml_policy_principal_reviewer_name",
            "internal_aml_policy_principal_reviewer_title",
            "internally_reviewed_by_appropriate_principal",
        ]
        nullable_fields = ["internal_aml_policy_principal_review_date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class BrokerResponsesTypedDict(TypedDict):
    r"""Responses generated by the representing broker regarding a foreign financial institution customer"""

    broker_aml_policy_internal_review: NotRequired[
        Nullable[BrokerAmlPolicyInternalReviewTypedDict]
    ]
    r"""The broker's internal review of their anti-money laundering policy"""
    customer_is_foreign_bank_or_will_establish_accounts_requiring_edd: NotRequired[bool]
    r"""Indicates whether the customer is a foreign bank or will establish accounts requiring enhanced due diligence"""
    nature_and_duration_of_relationship_to_ffi: NotRequired[str]
    r"""The nature and duration of the introducing broker's relationship to the foreign financial institution"""
    person_name_of_responsible_party_for_transaction_monitoring: NotRequired[str]
    r"""The name of the person responsible for transaction monitoring"""
    transaction_monitoring_procedure_for_aml_and_suspicious_activity: NotRequired[str]
    r"""The procedure for monitoring transactions for anti-money laundering and suspicious activity"""


class BrokerResponses(BaseModel):
    r"""Responses generated by the representing broker regarding a foreign financial institution customer"""

    broker_aml_policy_internal_review: OptionalNullable[
        BrokerAmlPolicyInternalReview
    ] = UNSET
    r"""The broker's internal review of their anti-money laundering policy"""
    customer_is_foreign_bank_or_will_establish_accounts_requiring_edd: Optional[
        bool
    ] = None
    r"""Indicates whether the customer is a foreign bank or will establish accounts requiring enhanced due diligence"""
    nature_and_duration_of_relationship_to_ffi: Optional[str] = None
    r"""The nature and duration of the introducing broker's relationship to the foreign financial institution"""
    person_name_of_responsible_party_for_transaction_monitoring: Optional[str] = None
    r"""The name of the person responsible for transaction monitoring"""
    transaction_monitoring_procedure_for_aml_and_suspicious_activity: Optional[
        str
    ] = None
    r"""The procedure for monitoring transactions for anti-money laundering and suspicious activity"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "broker_aml_policy_internal_review",
            "customer_is_foreign_bank_or_will_establish_accounts_requiring_edd",
            "nature_and_duration_of_relationship_to_ffi",
            "person_name_of_responsible_party_for_transaction_monitoring",
            "transaction_monitoring_procedure_for_aml_and_suspicious_activity",
        ]
        nullable_fields = ["broker_aml_policy_internal_review"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class LegalEntityAddressTypedDict(TypedDict):
    r"""The address of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""

    address_lines: NotRequired[List[str]]
    r"""Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.

    The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.

    Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
    """
    administrative_area: NotRequired[str]
    r"""Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."""
    language_code: NotRequired[str]
    r"""Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).

    Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
    """
    locality: NotRequired[str]
    r"""Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."""
    organization: NotRequired[str]
    r"""Optional. The name of the organization at the address."""
    postal_code: NotRequired[str]
    r"""Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."""
    recipients: NotRequired[List[str]]
    r"""Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."""
    region_code: NotRequired[str]
    r"""Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."""
    revision: NotRequired[int]
    r"""The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.

    All new revisions **must** be backward compatible with old revisions.
    """
    sorting_code: NotRequired[str]
    r"""Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."""
    sublocality: NotRequired[str]
    r"""Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."""


class LegalEntityAddress(BaseModel):
    r"""The address of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""

    address_lines: Optional[List[str]] = None
    r"""Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.

    The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.

    Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
    """
    administrative_area: Optional[str] = None
    r"""Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."""
    language_code: Optional[str] = None
    r"""Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).

    Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
    """
    locality: Optional[str] = None
    r"""Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."""
    organization: Optional[str] = None
    r"""Optional. The name of the organization at the address."""
    postal_code: Optional[str] = None
    r"""Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."""
    recipients: Optional[List[str]] = None
    r"""Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."""
    region_code: Optional[str] = None
    r"""Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."""
    revision: Optional[int] = None
    r"""The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.

    All new revisions **must** be backward compatible with old revisions.
    """
    sorting_code: Optional[str] = None
    r"""Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."""
    sublocality: Optional[str] = None
    r"""Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."""


class LegalEntityShortCodeTypedDict(TypedDict):
    r"""A short code.

    Reference(s):
    - https://en.wikipedia.org/wiki/Short_code
    """

    number: NotRequired[str]
    r"""Required. The short code digits, without a leading plus ('+') or country calling code, e.g. \"611\"."""
    region_code: NotRequired[str]
    r"""Required. The BCP-47 region code of the location where calls to this short code can be made, such as \"US\" and \"BB\".

    Reference(s):
    - http://www.unicode.org/reports/tr35/#unicode_region_subtag
    """


class LegalEntityShortCode(BaseModel):
    r"""A short code.

    Reference(s):
    - https://en.wikipedia.org/wiki/Short_code
    """

    number: Optional[str] = None
    r"""Required. The short code digits, without a leading plus ('+') or country calling code, e.g. \"611\"."""
    region_code: Optional[str] = None
    r"""Required. The BCP-47 region code of the location where calls to this short code can be made, such as \"US\" and \"BB\".

    Reference(s):
    - http://www.unicode.org/reports/tr35/#unicode_region_subtag
    """


class LegalEntityPhoneNumberTypedDict(TypedDict):
    r"""The phone number of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""

    e164_number: NotRequired[str]
    r"""The phone number, represented as a leading plus sign ('+'), followed by a phone number that uses a relaxed ITU E.164 format consisting of the country calling code (1 to 3 digits) and the subscriber number, with no additional spaces or formatting, e.g.: - correct: \"+15552220123\" - incorrect: \"+1 (555) 222-01234 x123\".

    The ITU E.164 format limits the latter to 12 digits, but in practice not all countries respect that, so we relax that restriction here. National-only numbers are not allowed.

    References: - https://www.itu.int/rec/T-REC-E.164-201011-I - https://en.wikipedia.org/wiki/E.164. - https://en.wikipedia.org/wiki/List_of_country_calling_codes
    """
    extension: NotRequired[str]
    r"""The phone number's extension. The extension is not standardized in ITU recommendations, except for being defined as a series of numbers with a maximum length of 40 digits. Other than digits, some other dialing characters such as ',' (indicating a wait) or '#' may be stored here.

    Note that no regions currently use extensions with short codes, so this field is normally only set in conjunction with an E.164 number. It is held separately from the E.164 number to allow for short code extensions in the future.
    """
    short_code: NotRequired[Nullable[LegalEntityShortCodeTypedDict]]
    r"""A short code.

    Reference(s):
    - https://en.wikipedia.org/wiki/Short_code
    """


class LegalEntityPhoneNumber(BaseModel):
    r"""The phone number of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""

    e164_number: Optional[str] = None
    r"""The phone number, represented as a leading plus sign ('+'), followed by a phone number that uses a relaxed ITU E.164 format consisting of the country calling code (1 to 3 digits) and the subscriber number, with no additional spaces or formatting, e.g.: - correct: \"+15552220123\" - incorrect: \"+1 (555) 222-01234 x123\".

    The ITU E.164 format limits the latter to 12 digits, but in practice not all countries respect that, so we relax that restriction here. National-only numbers are not allowed.

    References: - https://www.itu.int/rec/T-REC-E.164-201011-I - https://en.wikipedia.org/wiki/E.164. - https://en.wikipedia.org/wiki/List_of_country_calling_codes
    """
    extension: Optional[str] = None
    r"""The phone number's extension. The extension is not standardized in ITU recommendations, except for being defined as a series of numbers with a maximum length of 40 digits. Other than digits, some other dialing characters such as ',' (indicating a wait) or '#' may be stored here.

    Note that no regions currently use extensions with short codes, so this field is normally only set in conjunction with an E.164 number. It is held separately from the E.164 number to allow for short code extensions in the future.
    """
    short_code: OptionalNullable[LegalEntityShortCode] = UNSET
    r"""A short code.

    Reference(s):
    - https://en.wikipedia.org/wiki/Short_code
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["e164_number", "extension", "short_code"]
        nullable_fields = ["short_code"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FfiAmlcoContactInformationTypedDict(TypedDict):
    r"""Contact information for the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""

    address: NotRequired[Nullable[LegalEntityAddressTypedDict]]
    r"""The address of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""
    aml_compliance_officer_name: NotRequired[str]
    r"""The name of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""
    phone_number: NotRequired[Nullable[LegalEntityPhoneNumberTypedDict]]
    r"""The phone number of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""


class FfiAmlcoContactInformation(BaseModel):
    r"""Contact information for the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""

    address: OptionalNullable[LegalEntityAddress] = UNSET
    r"""The address of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""
    aml_compliance_officer_name: Optional[str] = None
    r"""The name of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""
    phone_number: OptionalNullable[LegalEntityPhoneNumber] = UNSET
    r"""The phone number of the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["address", "aml_compliance_officer_name", "phone_number"]
        nullable_fields = ["address", "phone_number"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FfiAmlProgramTypedDict(TypedDict):
    r"""The Anti-Money Laundering (AML) program of the foreign financial institution"""

    accepts_politically_exposed_persons_as_customers: NotRequired[bool]
    r"""Indicates whether the foreign financial institution accepts politically exposed persons as customers"""
    adhere_to_ofac_un_and_similar_database_restrictions: NotRequired[bool]
    r"""Indicates whether the foreign financial institution adheres to OFAC, UN, and similar database restrictions"""
    aml_program_description_in_lieu_of_related_questions: NotRequired[str]
    r"""A description of the FFI's anti-money laundering program in lieu of related questions"""
    ffi_amlco_contact_information: NotRequired[
        Nullable[FfiAmlcoContactInformationTypedDict]
    ]
    r"""Contact information for the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""
    has_cip: NotRequired[bool]
    r"""Indicates whether the foreign financial institution has a Customer Identification Program (CIP)"""
    has_kyc: NotRequired[bool]
    r"""Indicates whether the foreign financial institution has a Know Your Customer (KYC) program"""
    pep_edd_procedure_description: NotRequired[str]
    r"""A description of the procedure for enhanced due diligence for politically exposed person customers of the FFI"""


class FfiAmlProgram(BaseModel):
    r"""The Anti-Money Laundering (AML) program of the foreign financial institution"""

    accepts_politically_exposed_persons_as_customers: Optional[bool] = None
    r"""Indicates whether the foreign financial institution accepts politically exposed persons as customers"""
    adhere_to_ofac_un_and_similar_database_restrictions: Optional[bool] = None
    r"""Indicates whether the foreign financial institution adheres to OFAC, UN, and similar database restrictions"""
    aml_program_description_in_lieu_of_related_questions: Optional[str] = None
    r"""A description of the FFI's anti-money laundering program in lieu of related questions"""
    ffi_amlco_contact_information: OptionalNullable[FfiAmlcoContactInformation] = UNSET
    r"""Contact information for the foreign financial institution's Anti-Money Laundering Compliance Officer (AMLCO)"""
    has_cip: Optional[bool] = None
    r"""Indicates whether the foreign financial institution has a Customer Identification Program (CIP)"""
    has_kyc: Optional[bool] = None
    r"""Indicates whether the foreign financial institution has a Know Your Customer (KYC) program"""
    pep_edd_procedure_description: Optional[str] = None
    r"""A description of the procedure for enhanced due diligence for politically exposed person customers of the FFI"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "accepts_politically_exposed_persons_as_customers",
            "adhere_to_ofac_un_and_similar_database_restrictions",
            "aml_program_description_in_lieu_of_related_questions",
            "ffi_amlco_contact_information",
            "has_cip",
            "has_kyc",
            "pep_edd_procedure_description",
        ]
        nullable_fields = ["ffi_amlco_contact_information"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FfiServicingOfFisTypedDict(TypedDict):
    r"""Information about the servicing of financial institutions by the foreign financial institution"""

    fis_located_outside_country_of_incorporation: NotRequired[bool]
    r"""Indicates whether the foreign financial institution services financial institutions located outside the country of incorporation"""
    money_services_businesses_or_money_transmitters: NotRequired[bool]
    r"""Indicates whether the foreign financial institution services money services businesses or money transmitters"""
    offshore_banks: NotRequired[bool]
    r"""Indicates whether the foreign financial institution services offshore banks"""
    shell_banks: NotRequired[bool]
    r"""Indicates whether the foreign financial institution services shell banks"""


class FfiServicingOfFis(BaseModel):
    r"""Information about the servicing of financial institutions by the foreign financial institution"""

    fis_located_outside_country_of_incorporation: Optional[bool] = None
    r"""Indicates whether the foreign financial institution services financial institutions located outside the country of incorporation"""
    money_services_businesses_or_money_transmitters: Optional[bool] = None
    r"""Indicates whether the foreign financial institution services money services businesses or money transmitters"""
    offshore_banks: Optional[bool] = None
    r"""Indicates whether the foreign financial institution services offshore banks"""
    shell_banks: Optional[bool] = None
    r"""Indicates whether the foreign financial institution services shell banks"""


class FfiEddTypedDict(TypedDict):
    r"""Enhanced Due Diligence (EDD) information for the foreign financial institution"""

    broker_responses: NotRequired[Nullable[BrokerResponsesTypedDict]]
    r"""Responses generated by the representing broker regarding a foreign financial institution customer"""
    customer_annual_independent_audit_of_aml_program: NotRequired[bool]
    r"""Indicates whether the customer conducts an annual independent audit of their AML program"""
    customer_annual_independent_audit_unsatisfactory_rating: NotRequired[bool]
    r"""Indicates whether the customer's annual independent audit of their AML program received an unsatisfactory rating"""
    customer_or_affiliates_regulatory_or_criminal_enforcement_for_aml_violations: NotRequired[
        bool
    ]
    r"""Indicates whether the customer or their affiliates have faced regulatory or criminal enforcement for AML violations"""
    customer_or_affiliates_regulatory_or_criminal_enforcement_for_aml_violations_description: NotRequired[
        str
    ]
    r"""Description of the regulatory or criminal enforcement faced by the customer or their affiliates for AML violations"""
    customer_or_affiliates_subject_of_terrorist_financing_matter: NotRequired[bool]
    r"""Indicates whether the customer or their affiliates have been subject to a terrorist financing matter"""
    customer_or_affiliates_subject_of_terrorist_financing_matter_description: NotRequired[
        str
    ]
    r"""Description of the terrorist financing matter that the customer or their affiliates have been subject to"""
    ffi_aml_program: NotRequired[Nullable[FfiAmlProgramTypedDict]]
    r"""The Anti-Money Laundering (AML) program of the foreign financial institution"""
    ffi_servicing_of_fis: NotRequired[Nullable[FfiServicingOfFisTypedDict]]
    r"""Information about the servicing of financial institutions by the foreign financial institution"""
    geographical_markets_served: NotRequired[str]
    r"""The geographical markets served by the foreign financial institution"""
    negative_information_regarding_ffi_aml_record: NotRequired[str]
    r"""Negative information regarding the AML record of the foreign financial institution such as public information in standard guides, periodicals, and major publications"""
    regulating_body_overseeing_ffi: NotRequired[str]
    r"""The regulating body overseeing the foreign financial institution"""


class FfiEdd(BaseModel):
    r"""Enhanced Due Diligence (EDD) information for the foreign financial institution"""

    broker_responses: OptionalNullable[BrokerResponses] = UNSET
    r"""Responses generated by the representing broker regarding a foreign financial institution customer"""
    customer_annual_independent_audit_of_aml_program: Optional[bool] = None
    r"""Indicates whether the customer conducts an annual independent audit of their AML program"""
    customer_annual_independent_audit_unsatisfactory_rating: Optional[bool] = None
    r"""Indicates whether the customer's annual independent audit of their AML program received an unsatisfactory rating"""
    customer_or_affiliates_regulatory_or_criminal_enforcement_for_aml_violations: Optional[
        bool
    ] = None
    r"""Indicates whether the customer or their affiliates have faced regulatory or criminal enforcement for AML violations"""
    customer_or_affiliates_regulatory_or_criminal_enforcement_for_aml_violations_description: Optional[
        str
    ] = None
    r"""Description of the regulatory or criminal enforcement faced by the customer or their affiliates for AML violations"""
    customer_or_affiliates_subject_of_terrorist_financing_matter: Optional[bool] = None
    r"""Indicates whether the customer or their affiliates have been subject to a terrorist financing matter"""
    customer_or_affiliates_subject_of_terrorist_financing_matter_description: Optional[
        str
    ] = None
    r"""Description of the terrorist financing matter that the customer or their affiliates have been subject to"""
    ffi_aml_program: OptionalNullable[FfiAmlProgram] = UNSET
    r"""The Anti-Money Laundering (AML) program of the foreign financial institution"""
    ffi_servicing_of_fis: OptionalNullable[FfiServicingOfFis] = UNSET
    r"""Information about the servicing of financial institutions by the foreign financial institution"""
    geographical_markets_served: Optional[str] = None
    r"""The geographical markets served by the foreign financial institution"""
    negative_information_regarding_ffi_aml_record: Optional[str] = None
    r"""Negative information regarding the AML record of the foreign financial institution such as public information in standard guides, periodicals, and major publications"""
    regulating_body_overseeing_ffi: Optional[str] = None
    r"""The regulating body overseeing the foreign financial institution"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "broker_responses",
            "customer_annual_independent_audit_of_aml_program",
            "customer_annual_independent_audit_unsatisfactory_rating",
            "customer_or_affiliates_regulatory_or_criminal_enforcement_for_aml_violations",
            "customer_or_affiliates_regulatory_or_criminal_enforcement_for_aml_violations_description",
            "customer_or_affiliates_subject_of_terrorist_financing_matter",
            "customer_or_affiliates_subject_of_terrorist_financing_matter_description",
            "ffi_aml_program",
            "ffi_servicing_of_fis",
            "geographical_markets_served",
            "negative_information_regarding_ffi_aml_record",
            "regulating_body_overseeing_ffi",
        ]
        nullable_fields = [
            "broker_responses",
            "ffi_aml_program",
            "ffi_servicing_of_fis",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class LegalEntityNegativeNewsTypedDict(TypedDict):
    r"""Information about any negative news against related parties and entities"""

    negative_news_against_related_parties_and_entities: NotRequired[bool]
    r"""Indicates whether there is negative news against related parties and entities"""
    negative_news_against_related_parties_description: NotRequired[str]
    r"""Description of the negative news against related parties"""
    owner_has_negative_news_against_related_parties: NotRequired[bool]
    r"""Indicates whether there is negative news against related parties"""


class LegalEntityNegativeNews(BaseModel):
    r"""Information about any negative news against related parties and entities"""

    negative_news_against_related_parties_and_entities: Annotated[
        Optional[bool],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""Indicates whether there is negative news against related parties and entities"""
    negative_news_against_related_parties_description: Optional[str] = None
    r"""Description of the negative news against related parties"""
    owner_has_negative_news_against_related_parties: Optional[bool] = None
    r"""Indicates whether there is negative news against related parties"""


class EntityEddTypedDict(TypedDict):
    r"""Enhanced Due Diligence (EDD) information for the legal entity"""

    business_industrial_classification: NotRequired[
        LegalEntityBusinessIndustrialClassification
    ]
    direct_or_indirect_related_politically_exposed_persons: NotRequired[bool]
    r"""Indicates whether the entity is directly or indirectly related to politically exposed persons"""
    entity_issues_bearer_shares: NotRequired[bool]
    r"""Indicates whether the entity issues bearer shares"""
    ffi_edd: NotRequired[Nullable[FfiEddTypedDict]]
    r"""Enhanced Due Diligence (EDD) information for the foreign financial institution"""
    foreign_bank: NotRequired[bool]
    r"""Indicates whether the entity is a foreign bank as defined by the Bank Secrecy Act via 31 CFR 103.176(c)"""
    foreign_bank_us_agent_for_process_of_service: NotRequired[str]
    r"""The name of the US agent for process of service if the entity is a foreign bank; receives legal documents on behalf of the foreign bank and enables the bank to be brought under U.S. jurisdiction in case of legal issues"""
    nature_of_business: NotRequired[str]
    r"""The nature of the business that the entity is involved in"""
    negative_news: NotRequired[Nullable[LegalEntityNegativeNewsTypedDict]]
    r"""Information about any negative news against related parties and entities"""
    parent_company_name: NotRequired[str]
    r"""The name of the parent company of the entity"""
    related_peps: NotRequired[List[RelatedPepTypedDict]]
    r"""Information about the related politically exposed persons"""


class EntityEdd(BaseModel):
    r"""Enhanced Due Diligence (EDD) information for the legal entity"""

    business_industrial_classification: Optional[
        LegalEntityBusinessIndustrialClassification
    ] = None
    direct_or_indirect_related_politically_exposed_persons: Optional[bool] = None
    r"""Indicates whether the entity is directly or indirectly related to politically exposed persons"""
    entity_issues_bearer_shares: Optional[bool] = None
    r"""Indicates whether the entity issues bearer shares"""
    ffi_edd: OptionalNullable[FfiEdd] = UNSET
    r"""Enhanced Due Diligence (EDD) information for the foreign financial institution"""
    foreign_bank: Optional[bool] = None
    r"""Indicates whether the entity is a foreign bank as defined by the Bank Secrecy Act via 31 CFR 103.176(c)"""
    foreign_bank_us_agent_for_process_of_service: Optional[str] = None
    r"""The name of the US agent for process of service if the entity is a foreign bank; receives legal documents on behalf of the foreign bank and enables the bank to be brought under U.S. jurisdiction in case of legal issues"""
    nature_of_business: Optional[str] = None
    r"""The nature of the business that the entity is involved in"""
    negative_news: OptionalNullable[LegalEntityNegativeNews] = UNSET
    r"""Information about any negative news against related parties and entities"""
    parent_company_name: Optional[str] = None
    r"""The name of the parent company of the entity"""
    related_peps: Optional[List[RelatedPep]] = None
    r"""Information about the related politically exposed persons"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "business_industrial_classification",
            "direct_or_indirect_related_politically_exposed_persons",
            "entity_issues_bearer_shares",
            "ffi_edd",
            "foreign_bank",
            "foreign_bank_us_agent_for_process_of_service",
            "nature_of_business",
            "negative_news",
            "parent_company_name",
            "related_peps",
        ]
        nullable_fields = ["ffi_edd", "negative_news"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class LegalEntityEntityType(str, Enum):
    r"""The entity type."""
    ENTITY_TYPE_UNSPECIFIED = "ENTITY_TYPE_UNSPECIFIED"
    CORPORATION = "CORPORATION"
    LIMITED_LIABILITY_COMPANY = "LIMITED_LIABILITY_COMPANY"
    PARTNERSHIP = "PARTNERSHIP"
    SOLE_PROPRIETORSHIP_OR_SINGLE_MEMBER_LLC = (
        "SOLE_PROPRIETORSHIP_OR_SINGLE_MEMBER_LLC"
    )
    TRUST = "TRUST"
    ESTATE = "ESTATE"


class LegalEntityExemptCustomerReason(str, Enum):
    r"""The reason the customer is exempt from verifying beneficial owners, if applicable."""
    EXEMPT_REASON_UNSPECIFIED = "EXEMPT_REASON_UNSPECIFIED"
    REGULATED_FINANCIAL_INSTITUTION = "REGULATED_FINANCIAL_INSTITUTION"
    DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION = (
        "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION"
    )
    NON_BANK_LISTED_ENTITY = "NON_BANK_LISTED_ENTITY"
    SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15_D = (
        "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D"
    )
    SECTION_3_INVESTMENT_COMPANY_ACT_1940 = "SECTION_3_INVESTMENT_COMPANY_ACT_1940"
    SECTION_202_A_INVESTMENT_ADVISORS_ACT_1940 = (
        "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940"
    )
    SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17_A = (
        "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A"
    )
    ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934 = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934"
    COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED = (
        "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED"
    )
    PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY = (
        "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY"
    )
    STATE_REGULATED_INSURANCE_COMPANY = "STATE_REGULATED_INSURANCE_COMPANY"


class FormationDateTypedDict(TypedDict):
    r"""If the legal entity is a trust, the formation date is required."""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class FormationDate(BaseModel):
    r"""If the legal entity is a trust, the formation date is required."""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class LegalEntityEffectiveDateTypedDict(TypedDict):
    r"""The date on which the trader meets or exceeds the large trader reporting threshold, which is defined by the U.S. Securities and Exchange Commission (SEC) as trades of 2 million shares or $20 million in a single day or 20 million shares or $200 million during a calendar month"""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class LegalEntityEffectiveDate(BaseModel):
    r"""The date on which the trader meets or exceeds the large trader reporting threshold, which is defined by the U.S. Securities and Exchange Commission (SEC) as trades of 2 million shares or $20 million in a single day or 20 million shares or $200 million during a calendar month"""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class LegalEntityLargeTraderTypedDict(TypedDict):
    r"""Large trader for the legal entity."""

    effective_date: NotRequired[Nullable[LegalEntityEffectiveDateTypedDict]]
    r"""The date on which the trader meets or exceeds the large trader reporting threshold, which is defined by the U.S. Securities and Exchange Commission (SEC) as trades of 2 million shares or $20 million in a single day or 20 million shares or $200 million during a calendar month"""
    large_trader_id: NotRequired[str]
    r"""SEC-issued ID signifying the person/entity as a large trader; Required for CAIS regulatory reporting."""


class LegalEntityLargeTrader(BaseModel):
    r"""Large trader for the legal entity."""

    effective_date: OptionalNullable[LegalEntityEffectiveDate] = UNSET
    r"""The date on which the trader meets or exceeds the large trader reporting threshold, which is defined by the U.S. Securities and Exchange Commission (SEC) as trades of 2 million shares or $20 million in a single day or 20 million shares or $200 million during a calendar month"""
    large_trader_id: Optional[str] = None
    r"""SEC-issued ID signifying the person/entity as a large trader; Required for CAIS regulatory reporting."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["effective_date", "large_trader_id"]
        nullable_fields = ["effective_date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class LegalAddressTypedDict(TypedDict):
    r"""The mailing address of the legal entity. Required fields within the `legal_address` object include:
    - `administrative_area`
    - `region_code` - 2 character CLDR Code
    - `postal_code`
    - `locality`
    - `address_lines` - max 5 lines
    """

    address_lines: NotRequired[List[str]]
    r"""Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.

    The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.

    Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
    """
    administrative_area: NotRequired[str]
    r"""Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."""
    language_code: NotRequired[str]
    r"""Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).

    Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
    """
    locality: NotRequired[str]
    r"""Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."""
    organization: NotRequired[str]
    r"""Optional. The name of the organization at the address."""
    postal_code: NotRequired[str]
    r"""Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."""
    recipients: NotRequired[List[str]]
    r"""Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."""
    region_code: NotRequired[str]
    r"""Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."""
    revision: NotRequired[int]
    r"""The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.

    All new revisions **must** be backward compatible with old revisions.
    """
    sorting_code: NotRequired[str]
    r"""Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."""
    sublocality: NotRequired[str]
    r"""Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."""


class LegalAddress(BaseModel):
    r"""The mailing address of the legal entity. Required fields within the `legal_address` object include:
    - `administrative_area`
    - `region_code` - 2 character CLDR Code
    - `postal_code`
    - `locality`
    - `address_lines` - max 5 lines
    """

    address_lines: Optional[List[str]] = None
    r"""Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.

    The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.

    Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
    """
    administrative_area: Optional[str] = None
    r"""Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."""
    language_code: Optional[str] = None
    r"""Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).

    Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
    """
    locality: Optional[str] = None
    r"""Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."""
    organization: Optional[str] = None
    r"""Optional. The name of the organization at the address."""
    postal_code: Optional[str] = None
    r"""Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."""
    recipients: Optional[List[str]] = None
    r"""Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."""
    region_code: Optional[str] = None
    r"""Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."""
    revision: Optional[int] = None
    r"""The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.

    All new revisions **must** be backward compatible with old revisions.
    """
    sorting_code: Optional[str] = None
    r"""Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."""
    sublocality: Optional[str] = None
    r"""Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."""


class LegalEntityTaxIDType(str, Enum):
    r"""The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN."""
    TAX_ID_TYPE_UNSPECIFIED = "TAX_ID_TYPE_UNSPECIFIED"
    TAX_ID_TYPE_SSN = "TAX_ID_TYPE_SSN"
    TAX_ID_TYPE_ITIN = "TAX_ID_TYPE_ITIN"
    TAX_ID_TYPE_EIN = "TAX_ID_TYPE_EIN"


class LegalEntityCNoticeDateTypedDict(TypedDict):
    r"""C Notice date."""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class LegalEntityCNoticeDate(BaseModel):
    r"""C Notice date."""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class LegalEntityFederalTaxClassification(str, Enum):
    r"""Federal tax classification."""
    FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED"
    INDIV_SOLEPROP_OR_SINGLEMEMBERLLC = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC"
    PARTNERSHIP = "PARTNERSHIP"
    C_CORPORATION = "C_CORPORATION"
    S_CORPORATION = "S_CORPORATION"
    TRUST_ESTATE = "TRUST_ESTATE"
    LLC_TAXED_AS_C_CORP = "LLC_TAXED_AS_C_CORP"
    LLC_TAXED_AS_S_CORP = "LLC_TAXED_AS_S_CORP"
    LLC_TAXED_AS_PARTNERSHIP = "LLC_TAXED_AS_PARTNERSHIP"
    OTHER = "OTHER"


class LegalEntityFirstBNoticeDateTypedDict(TypedDict):
    r"""Initial B Notice date."""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class LegalEntityFirstBNoticeDate(BaseModel):
    r"""Initial B Notice date."""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class LegalEntityIrsFormType(str, Enum):
    r"""IRS form type."""
    IRS_FORM_TYPE_UNSPECIFIED = "IRS_FORM_TYPE_UNSPECIFIED"
    W_9 = "W_9"
    W_8_BEN = "W_8BEN"


class LegalEntityReportingEligibility(str, Enum):
    r"""Tax reporting eligibility."""
    TAX_REPORTING_ELIGIBILITY_UNSPECIFIED = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED"
    ELIGIBLE = "ELIGIBLE"
    INELIGIBLE = "INELIGIBLE"


class LegalEntityTaxpayerCertificationState(str, Enum):
    r"""Taxpayer certification status."""
    TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED = (
        "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED"
    )
    CERTIFIED = "CERTIFIED"
    UNCERTIFIED = "UNCERTIFIED"


class LegalEntityUsTinStatus(str, Enum):
    r"""United States Individual Taxpayer Identification Number (ITIN) status."""
    US_TIN_STATUS_UNSPECIFIED = "US_TIN_STATUS_UNSPECIFIED"
    PASSING = "PASSING"
    FAILING = "FAILING"


class LegalEntityWithholdingState(str, Enum):
    r"""B/C Notice status."""
    WITHHOLDING_STATE_UNSPECIFIED = "WITHHOLDING_STATE_UNSPECIFIED"
    FIRST_B_NOTICE_RECEIVED = "FIRST_B_NOTICE_RECEIVED"
    SECOND_B_NOTICE_RECEIVED = "SECOND_B_NOTICE_RECEIVED"
    C_NOTICE_RECEIVED = "C_NOTICE_RECEIVED"
    C_NOTICE_INDICATED_BY_CUSTOMER = "C_NOTICE_INDICATED_BY_CUSTOMER"


class LegalEntityTaxProfileTypedDict(TypedDict):
    r"""The tax profile for the legal entity."""

    c_notice_date: NotRequired[Nullable[LegalEntityCNoticeDateTypedDict]]
    r"""C Notice date."""
    federal_tax_classification: NotRequired[LegalEntityFederalTaxClassification]
    r"""Federal tax classification."""
    first_b_notice_date: NotRequired[Nullable[LegalEntityFirstBNoticeDateTypedDict]]
    r"""Initial B Notice date."""
    irs_form_type: NotRequired[LegalEntityIrsFormType]
    r"""IRS form type."""
    legal_tax_region_code: NotRequired[str]
    r"""Legal tax region must be \"US\" if provided W-9, otherwise must be a non-US country."""
    reporting_eligibility: NotRequired[LegalEntityReportingEligibility]
    r"""Tax reporting eligibility."""
    taxpayer_certification_state: NotRequired[LegalEntityTaxpayerCertificationState]
    r"""Taxpayer certification status."""
    us_tin_status: NotRequired[LegalEntityUsTinStatus]
    r"""United States Individual Taxpayer Identification Number (ITIN) status."""
    withholding_state: NotRequired[LegalEntityWithholdingState]
    r"""B/C Notice status."""


class LegalEntityTaxProfile(BaseModel):
    r"""The tax profile for the legal entity."""

    c_notice_date: OptionalNullable[LegalEntityCNoticeDate] = UNSET
    r"""C Notice date."""
    federal_tax_classification: Optional[LegalEntityFederalTaxClassification] = None
    r"""Federal tax classification."""
    first_b_notice_date: OptionalNullable[LegalEntityFirstBNoticeDate] = UNSET
    r"""Initial B Notice date."""
    irs_form_type: Optional[LegalEntityIrsFormType] = None
    r"""IRS form type."""
    legal_tax_region_code: Optional[str] = None
    r"""Legal tax region must be \"US\" if provided W-9, otherwise must be a non-US country."""
    reporting_eligibility: Optional[LegalEntityReportingEligibility] = None
    r"""Tax reporting eligibility."""
    taxpayer_certification_state: Optional[LegalEntityTaxpayerCertificationState] = None
    r"""Taxpayer certification status."""
    us_tin_status: Optional[LegalEntityUsTinStatus] = None
    r"""United States Individual Taxpayer Identification Number (ITIN) status."""
    withholding_state: Optional[LegalEntityWithholdingState] = None
    r"""B/C Notice status."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "c_notice_date",
            "federal_tax_classification",
            "first_b_notice_date",
            "irs_form_type",
            "legal_tax_region_code",
            "reporting_eligibility",
            "taxpayer_certification_state",
            "us_tin_status",
            "withholding_state",
        ]
        nullable_fields = ["c_notice_date", "first_b_notice_date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class LegalEntityTypedDict(TypedDict):
    r"""A legal entity. Legal entities are organizations, such as companies, that participate in financial transactions"""

    accredited_investor: NotRequired[bool]
    r"""Indicates whether the entity is an accredited investor. By default, this is set to `false`."""
    adviser: NotRequired[bool]
    r"""Indicates whether the entity is an adviser. By default, this is set to `false`."""
    broker_dealer: NotRequired[bool]
    r"""Indicates whether the entity is a broker dealer. By default, this is set to `false`."""
    corporate_structure: NotRequired[LegalEntityCorporateStructure]
    r"""Corporate structure of the entity."""
    correspondent_id: NotRequired[str]
    r"""The correspondent id associated with the legal entity."""
    entity_edd: NotRequired[Nullable[EntityEddTypedDict]]
    r"""Enhanced Due Diligence (EDD) information for the legal entity"""
    entity_name: NotRequired[str]
    r"""The legal entity name."""
    entity_type: NotRequired[LegalEntityEntityType]
    r"""The entity type."""
    exempt_customer_reason: NotRequired[LegalEntityExemptCustomerReason]
    r"""The reason the customer is exempt from verifying beneficial owners, if applicable."""
    exempt_verifying_beneficial_owners: NotRequired[bool]
    r"""Indicates whether the entity is exempt from verifying beneficial owners. By default, this is set to `false`."""
    for_the_benefit_of: NotRequired[str]
    r"""If the legal entity is a trust, they may set this field to convey ownership and value to a trustee."""
    foreign_entity: NotRequired[bool]
    r"""Indicates whether the entity is a foreign entity. By default, this is set to `false`."""
    foreign_financial_institution: NotRequired[bool]
    r"""Indicates whether the entity is a foreign financial institution. By default, this is set to `false`."""
    formation_date: NotRequired[Nullable[FormationDateTypedDict]]
    r"""If the legal entity is a trust, the formation date is required."""
    global_person_id: NotRequired[str]
    r"""Globally Unique identifier for a legal natural person"""
    institutional_customer: NotRequired[bool]
    r"""Indicates whether the entity is an institutional customer"""
    investigation_id: NotRequired[str]
    r"""Investigation id relating to the Customer Identification Program (CIP) and Customer Due Diligence (CDD)."""
    large_trader: NotRequired[Nullable[LegalEntityLargeTraderTypedDict]]
    r"""Large trader for the legal entity."""
    legal_address: NotRequired[Nullable[LegalAddressTypedDict]]
    r"""The mailing address of the legal entity. Required fields within the `legal_address` object include:
    - `administrative_area`
    - `region_code` - 2 character CLDR Code
    - `postal_code`
    - `locality`
    - `address_lines` - max 5 lines
    """
    legal_entity_id: NotRequired[str]
    r"""A system-generated unique identifier referencing a single juridical (non-natural) person (e.g., a corporation); Used to access the record after creation"""
    lei_code: NotRequired[str]
    r"""The Legal Entity Identifier (LEI) is the financial industry term for a unique global identifier for legal entities participating in financial transactions"""
    name: NotRequired[str]
    r"""The name field Format: legalEntities/{legalEntity}"""
    operating_regions: NotRequired[List[str]]
    r"""The operational footprint of an entity. Operating regions encompass all countries and regions where a company has a significant business presence This includes locations with physical offices, manufacturing plants, service centers, and sales and marketing activities Regions must be provided as two-character CLDR country codes"""
    registration_region: NotRequired[str]
    r"""The legal home of an entity. A region of registration, in the context of a corporation, refers to the specific geographic area where the corporation is legally registered and incorporated Defines the legal jurisdiction and framework under which the corporation operates, including legal regulations, tax obligations, and compliance requirements Region must be provided as a two-character CLDR country code"""
    regulated_investment_company: NotRequired[bool]
    r"""Indicates whether the entity is a regulated investment company. By default, this is set to `false`."""
    related_document_ids: NotRequired[List[str]]
    r"""Document ids related to the legal entity. At least one is required for RIA correspondents when creating Estate or Trust accounts."""
    revocable_trust: NotRequired[bool]
    r"""Indicates whether the trust is a revocable trust. By default, this is set to `false`."""
    tax_id: NotRequired[str]
    r"""The full U.S. tax ID for a related entity; Must be provided with `EIN` tax ID type"""
    tax_id_last_four: NotRequired[str]
    r"""The last four characters of the related person's tax identifier; Masked/truncated to \"last four\" in most usage contexts to preserve data privacy."""
    tax_id_type: NotRequired[LegalEntityTaxIDType]
    r"""The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN."""
    tax_profile: NotRequired[Nullable[LegalEntityTaxProfileTypedDict]]
    r"""The tax profile for the legal entity."""


class LegalEntity(BaseModel):
    r"""A legal entity. Legal entities are organizations, such as companies, that participate in financial transactions"""

    accredited_investor: Optional[bool] = None
    r"""Indicates whether the entity is an accredited investor. By default, this is set to `false`."""
    adviser: Optional[bool] = None
    r"""Indicates whether the entity is an adviser. By default, this is set to `false`."""
    broker_dealer: Optional[bool] = None
    r"""Indicates whether the entity is a broker dealer. By default, this is set to `false`."""
    corporate_structure: Optional[LegalEntityCorporateStructure] = None
    r"""Corporate structure of the entity."""
    correspondent_id: Optional[str] = None
    r"""The correspondent id associated with the legal entity."""
    entity_edd: OptionalNullable[EntityEdd] = UNSET
    r"""Enhanced Due Diligence (EDD) information for the legal entity"""
    entity_name: Optional[str] = None
    r"""The legal entity name."""
    entity_type: Optional[LegalEntityEntityType] = None
    r"""The entity type."""
    exempt_customer_reason: Optional[LegalEntityExemptCustomerReason] = None
    r"""The reason the customer is exempt from verifying beneficial owners, if applicable."""
    exempt_verifying_beneficial_owners: Optional[bool] = None
    r"""Indicates whether the entity is exempt from verifying beneficial owners. By default, this is set to `false`."""
    for_the_benefit_of: Optional[str] = None
    r"""If the legal entity is a trust, they may set this field to convey ownership and value to a trustee."""
    foreign_entity: Optional[bool] = None
    r"""Indicates whether the entity is a foreign entity. By default, this is set to `false`."""
    foreign_financial_institution: Optional[bool] = None
    r"""Indicates whether the entity is a foreign financial institution. By default, this is set to `false`."""
    formation_date: OptionalNullable[FormationDate] = UNSET
    r"""If the legal entity is a trust, the formation date is required."""
    global_person_id: Optional[str] = None
    r"""Globally Unique identifier for a legal natural person"""
    institutional_customer: Optional[bool] = None
    r"""Indicates whether the entity is an institutional customer"""
    investigation_id: Optional[str] = None
    r"""Investigation id relating to the Customer Identification Program (CIP) and Customer Due Diligence (CDD)."""
    large_trader: OptionalNullable[LegalEntityLargeTrader] = UNSET
    r"""Large trader for the legal entity."""
    legal_address: OptionalNullable[LegalAddress] = UNSET
    r"""The mailing address of the legal entity. Required fields within the `legal_address` object include:
    - `administrative_area`
    - `region_code` - 2 character CLDR Code
    - `postal_code`
    - `locality`
    - `address_lines` - max 5 lines
    """
    legal_entity_id: Optional[str] = None
    r"""A system-generated unique identifier referencing a single juridical (non-natural) person (e.g., a corporation); Used to access the record after creation"""
    lei_code: Optional[str] = None
    r"""The Legal Entity Identifier (LEI) is the financial industry term for a unique global identifier for legal entities participating in financial transactions"""
    name: Optional[str] = None
    r"""The name field Format: legalEntities/{legalEntity}"""
    operating_regions: Optional[List[str]] = None
    r"""The operational footprint of an entity. Operating regions encompass all countries and regions where a company has a significant business presence This includes locations with physical offices, manufacturing plants, service centers, and sales and marketing activities Regions must be provided as two-character CLDR country codes"""
    registration_region: Optional[str] = None
    r"""The legal home of an entity. A region of registration, in the context of a corporation, refers to the specific geographic area where the corporation is legally registered and incorporated Defines the legal jurisdiction and framework under which the corporation operates, including legal regulations, tax obligations, and compliance requirements Region must be provided as a two-character CLDR country code"""
    regulated_investment_company: Optional[bool] = None
    r"""Indicates whether the entity is a regulated investment company. By default, this is set to `false`."""
    related_document_ids: Optional[List[str]] = None
    r"""Document ids related to the legal entity. At least one is required for RIA correspondents when creating Estate or Trust accounts."""
    revocable_trust: Optional[bool] = None
    r"""Indicates whether the trust is a revocable trust. By default, this is set to `false`."""
    tax_id: Optional[str] = None
    r"""The full U.S. tax ID for a related entity; Must be provided with `EIN` tax ID type"""
    tax_id_last_four: Optional[str] = None
    r"""The last four characters of the related person's tax identifier; Masked/truncated to \"last four\" in most usage contexts to preserve data privacy."""
    tax_id_type: Optional[LegalEntityTaxIDType] = None
    r"""The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN."""
    tax_profile: OptionalNullable[LegalEntityTaxProfile] = UNSET
    r"""The tax profile for the legal entity."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "accredited_investor",
            "adviser",
            "broker_dealer",
            "corporate_structure",
            "correspondent_id",
            "entity_edd",
            "entity_name",
            "entity_type",
            "exempt_customer_reason",
            "exempt_verifying_beneficial_owners",
            "for_the_benefit_of",
            "foreign_entity",
            "foreign_financial_institution",
            "formation_date",
            "global_person_id",
            "institutional_customer",
            "investigation_id",
            "large_trader",
            "legal_address",
            "legal_entity_id",
            "lei_code",
            "name",
            "operating_regions",
            "registration_region",
            "regulated_investment_company",
            "related_document_ids",
            "revocable_trust",
            "tax_id",
            "tax_id_last_four",
            "tax_id_type",
            "tax_profile",
        ]
        nullable_fields = [
            "entity_edd",
            "formation_date",
            "large_trader",
            "legal_address",
            "tax_profile",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
