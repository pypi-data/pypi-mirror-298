# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PostV1TeamsTeamIdSignalRules(BaseModel):
    """
    Create a Signals rule for a team.
    """ # noqa: E501
    name: StrictStr = Field(description="The rule's name.")
    expression: StrictStr = Field(description="The CEL expression that defines the rule.")
    target_type: StrictStr = Field(description="The type of target that the rule will notify when matched.")
    target_id: StrictStr = Field(description="The ID of the target that the rule will notify when matched.")
    incident_type_id: Optional[StrictStr] = Field(default=None, description="The ID of an incident type that should be used when an alert is promoted to an incident")
    notification_priority_override: Optional[StrictStr] = Field(default=None, description="A notification priority that will be set on the resulting alert (default: HIGH)")
    __properties: ClassVar[List[str]] = ["name", "expression", "target_type", "target_id", "incident_type_id", "notification_priority_override"]

    @field_validator('target_type')
    def target_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EscalationPolicy', 'OnCallSchedule', 'User']):
            raise ValueError("must be one of enum values ('EscalationPolicy', 'OnCallSchedule', 'User')")
        return value

    @field_validator('notification_priority_override')
    def notification_priority_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HIGH', 'MEDIUM', 'LOW', '']):
            raise ValueError("must be one of enum values ('HIGH', 'MEDIUM', 'LOW', '')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostV1TeamsTeamIdSignalRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostV1TeamsTeamIdSignalRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "expression": obj.get("expression"),
            "target_type": obj.get("target_type"),
            "target_id": obj.get("target_id"),
            "incident_type_id": obj.get("incident_type_id"),
            "notification_priority_override": obj.get("notification_priority_override")
        })
        return _obj


