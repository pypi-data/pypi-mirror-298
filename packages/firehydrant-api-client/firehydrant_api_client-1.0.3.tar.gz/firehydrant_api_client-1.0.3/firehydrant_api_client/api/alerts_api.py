# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from firehydrant_api_client.models.alerts_alert_entity import AlertsAlertEntity
from firehydrant_api_client.models.alerts_alert_entity_paginated import AlertsAlertEntityPaginated

from firehydrant_api_client.api_client import ApiClient, RequestSerialized
from firehydrant_api_client.api_response import ApiResponse
from firehydrant_api_client.rest import RESTResponseType


class AlertsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_v1_alerts(
        self,
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for alerts")] = None,
        users: Annotated[Optional[StrictStr], Field(description="A comma separated list of user IDs. This currently only works for Signals alerts.")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs. This currently only works for Signals alerts.")] = None,
        signal_rules: Annotated[Optional[StrictStr], Field(description="A comma separated list of signals rule IDs. This currently only works for Signals alerts.")] = None,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs. This currently only works for Signals alerts.")] = None,
        functionalities: Annotated[Optional[StrictStr], Field(description="A comma separated list of functionality IDs. This currently only works for Signals alerts.")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs. This currently only works for Signals alerts.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A comma separated list of tags. This currently only works for Signals alerts.")] = None,
        tag_match_strategy: Annotated[Optional[StrictStr], Field(description="The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.")] = None,
        statuses: Annotated[Optional[StrictStr], Field(description="A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, or expired")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsAlertEntityPaginated:
        """Retrieve all alerts

        Retrieve all alerts from third parties

        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param query: A text query for alerts
        :type query: str
        :param users: A comma separated list of user IDs. This currently only works for Signals alerts.
        :type users: str
        :param teams: A comma separated list of team IDs. This currently only works for Signals alerts.
        :type teams: str
        :param signal_rules: A comma separated list of signals rule IDs. This currently only works for Signals alerts.
        :type signal_rules: str
        :param environments: A comma separated list of environment IDs. This currently only works for Signals alerts.
        :type environments: str
        :param functionalities: A comma separated list of functionality IDs. This currently only works for Signals alerts.
        :type functionalities: str
        :param services: A comma separated list of service IDs. This currently only works for Signals alerts.
        :type services: str
        :param tags: A comma separated list of tags. This currently only works for Signals alerts.
        :type tags: str
        :param tag_match_strategy: The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.
        :type tag_match_strategy: str
        :param statuses: A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, or expired
        :type statuses: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_alerts_serialize(
            page=page,
            per_page=per_page,
            query=query,
            users=users,
            teams=teams,
            signal_rules=signal_rules,
            environments=environments,
            functionalities=functionalities,
            services=services,
            tags=tags,
            tag_match_strategy=tag_match_strategy,
            statuses=statuses,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsAlertEntityPaginated",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_alerts_with_http_info(
        self,
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for alerts")] = None,
        users: Annotated[Optional[StrictStr], Field(description="A comma separated list of user IDs. This currently only works for Signals alerts.")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs. This currently only works for Signals alerts.")] = None,
        signal_rules: Annotated[Optional[StrictStr], Field(description="A comma separated list of signals rule IDs. This currently only works for Signals alerts.")] = None,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs. This currently only works for Signals alerts.")] = None,
        functionalities: Annotated[Optional[StrictStr], Field(description="A comma separated list of functionality IDs. This currently only works for Signals alerts.")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs. This currently only works for Signals alerts.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A comma separated list of tags. This currently only works for Signals alerts.")] = None,
        tag_match_strategy: Annotated[Optional[StrictStr], Field(description="The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.")] = None,
        statuses: Annotated[Optional[StrictStr], Field(description="A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, or expired")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsAlertEntityPaginated]:
        """Retrieve all alerts

        Retrieve all alerts from third parties

        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param query: A text query for alerts
        :type query: str
        :param users: A comma separated list of user IDs. This currently only works for Signals alerts.
        :type users: str
        :param teams: A comma separated list of team IDs. This currently only works for Signals alerts.
        :type teams: str
        :param signal_rules: A comma separated list of signals rule IDs. This currently only works for Signals alerts.
        :type signal_rules: str
        :param environments: A comma separated list of environment IDs. This currently only works for Signals alerts.
        :type environments: str
        :param functionalities: A comma separated list of functionality IDs. This currently only works for Signals alerts.
        :type functionalities: str
        :param services: A comma separated list of service IDs. This currently only works for Signals alerts.
        :type services: str
        :param tags: A comma separated list of tags. This currently only works for Signals alerts.
        :type tags: str
        :param tag_match_strategy: The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.
        :type tag_match_strategy: str
        :param statuses: A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, or expired
        :type statuses: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_alerts_serialize(
            page=page,
            per_page=per_page,
            query=query,
            users=users,
            teams=teams,
            signal_rules=signal_rules,
            environments=environments,
            functionalities=functionalities,
            services=services,
            tags=tags,
            tag_match_strategy=tag_match_strategy,
            statuses=statuses,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsAlertEntityPaginated",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_alerts_without_preload_content(
        self,
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for alerts")] = None,
        users: Annotated[Optional[StrictStr], Field(description="A comma separated list of user IDs. This currently only works for Signals alerts.")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs. This currently only works for Signals alerts.")] = None,
        signal_rules: Annotated[Optional[StrictStr], Field(description="A comma separated list of signals rule IDs. This currently only works for Signals alerts.")] = None,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs. This currently only works for Signals alerts.")] = None,
        functionalities: Annotated[Optional[StrictStr], Field(description="A comma separated list of functionality IDs. This currently only works for Signals alerts.")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs. This currently only works for Signals alerts.")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A comma separated list of tags. This currently only works for Signals alerts.")] = None,
        tag_match_strategy: Annotated[Optional[StrictStr], Field(description="The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.")] = None,
        statuses: Annotated[Optional[StrictStr], Field(description="A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, or expired")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve all alerts

        Retrieve all alerts from third parties

        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param query: A text query for alerts
        :type query: str
        :param users: A comma separated list of user IDs. This currently only works for Signals alerts.
        :type users: str
        :param teams: A comma separated list of team IDs. This currently only works for Signals alerts.
        :type teams: str
        :param signal_rules: A comma separated list of signals rule IDs. This currently only works for Signals alerts.
        :type signal_rules: str
        :param environments: A comma separated list of environment IDs. This currently only works for Signals alerts.
        :type environments: str
        :param functionalities: A comma separated list of functionality IDs. This currently only works for Signals alerts.
        :type functionalities: str
        :param services: A comma separated list of service IDs. This currently only works for Signals alerts.
        :type services: str
        :param tags: A comma separated list of tags. This currently only works for Signals alerts.
        :type tags: str
        :param tag_match_strategy: The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.
        :type tag_match_strategy: str
        :param statuses: A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, or expired
        :type statuses: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_alerts_serialize(
            page=page,
            per_page=per_page,
            query=query,
            users=users,
            teams=teams,
            signal_rules=signal_rules,
            environments=environments,
            functionalities=functionalities,
            services=services,
            tags=tags,
            tag_match_strategy=tag_match_strategy,
            statuses=statuses,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsAlertEntityPaginated",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_alerts_serialize(
        self,
        page,
        per_page,
        query,
        users,
        teams,
        signal_rules,
        environments,
        functionalities,
        services,
        tags,
        tag_match_strategy,
        statuses,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if users is not None:
            
            _query_params.append(('users', users))
            
        if teams is not None:
            
            _query_params.append(('teams', teams))
            
        if signal_rules is not None:
            
            _query_params.append(('signal_rules', signal_rules))
            
        if environments is not None:
            
            _query_params.append(('environments', environments))
            
        if functionalities is not None:
            
            _query_params.append(('functionalities', functionalities))
            
        if services is not None:
            
            _query_params.append(('services', services))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if tag_match_strategy is not None:
            
            _query_params.append(('tag_match_strategy', tag_match_strategy))
            
        if statuses is not None:
            
            _query_params.append(('statuses', statuses))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/alerts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v1_alerts_alert_id(
        self,
        alert_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlertsAlertEntity:
        """Retrieve a single alert

        Retrieve a single alert

        :param alert_id: (required)
        :type alert_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_alerts_alert_id_serialize(
            alert_id=alert_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsAlertEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_alerts_alert_id_with_http_info(
        self,
        alert_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlertsAlertEntity]:
        """Retrieve a single alert

        Retrieve a single alert

        :param alert_id: (required)
        :type alert_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_alerts_alert_id_serialize(
            alert_id=alert_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsAlertEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_alerts_alert_id_without_preload_content(
        self,
        alert_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a single alert

        Retrieve a single alert

        :param alert_id: (required)
        :type alert_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_alerts_alert_id_serialize(
            alert_id=alert_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlertsAlertEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_alerts_alert_id_serialize(
        self,
        alert_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if alert_id is not None:
            _path_params['alert_id'] = alert_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/alerts/{alert_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


