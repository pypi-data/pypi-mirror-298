# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class PostV1TeamsTeamIdOnCallSchedulesRestrictionsInner(BaseModel):
    """
    PostV1TeamsTeamIdOnCallSchedulesRestrictionsInner
    """ # noqa: E501
    start_day: StrictStr = Field(description="The day of the week on which the restriction should start, as its long-form name (e.g. \"monday\", \"tuesday\", etc).")
    start_time: StrictStr = Field(description="An ISO8601 time string specifying when the restriction should start.")
    end_day: StrictStr = Field(description="The day of the week on which the restriction should end, as its long-form name (e.g. \"monday\", \"tuesday\", etc).")
    end_time: StrictStr = Field(description="An ISO8601 time string specifying when the restriction should end.")
    __properties: ClassVar[List[str]] = ["start_day", "start_time", "end_day", "end_time"]

    @field_validator('start_day')
    def start_day_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']):
            raise ValueError("must be one of enum values ('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')")
        return value

    @field_validator('end_day')
    def end_day_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']):
            raise ValueError("must be one of enum values ('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostV1TeamsTeamIdOnCallSchedulesRestrictionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostV1TeamsTeamIdOnCallSchedulesRestrictionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_day": obj.get("start_day"),
            "start_time": obj.get("start_time"),
            "end_day": obj.get("end_day"),
            "end_time": obj.get("end_time")
        })
        return _obj


