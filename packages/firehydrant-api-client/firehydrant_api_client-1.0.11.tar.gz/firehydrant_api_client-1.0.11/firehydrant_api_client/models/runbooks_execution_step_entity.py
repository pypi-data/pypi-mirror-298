# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.rules_rule_entity import RulesRuleEntity
from firehydrant_api_client.models.runbooks_execution_step_execution_entity import RunbooksExecutionStepExecutionEntity
from typing import Optional, Set
from typing_extensions import Self

class RunbooksExecutionStepEntity(BaseModel):
    """
    RunbooksExecutionStepEntity
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    action_slug: Optional[StrictStr] = None
    action_type: Optional[StrictStr] = None
    integration_name: Optional[StrictStr] = None
    integration_slug: Optional[StrictStr] = None
    automatic: Optional[StrictBool] = None
    config: Optional[Dict[str, Any]] = None
    step_elements: Optional[List[Dict[str, Any]]] = None
    executable: Optional[StrictBool] = None
    repeats: Optional[StrictBool] = None
    repeats_duration: Optional[StrictStr] = Field(default=None, description="ISO8601 formatted duration string")
    repeats_at: Optional[datetime] = None
    has_been_rerun: Optional[StrictBool] = None
    has_been_retried: Optional[StrictBool] = None
    execution: Optional[RunbooksExecutionStepExecutionEntity] = None
    repeatable: Optional[StrictBool] = None
    rule: Optional[RulesRuleEntity] = None
    __properties: ClassVar[List[str]] = ["id", "name", "action_slug", "action_type", "integration_name", "integration_slug", "automatic", "config", "step_elements", "executable", "repeats", "repeats_duration", "repeats_at", "has_been_rerun", "has_been_retried", "execution", "repeatable", "rule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbooksExecutionStepEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution
        if self.execution:
            _dict['execution'] = self.execution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule
        if self.rule:
            _dict['rule'] = self.rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbooksExecutionStepEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "action_slug": obj.get("action_slug"),
            "action_type": obj.get("action_type"),
            "integration_name": obj.get("integration_name"),
            "integration_slug": obj.get("integration_slug"),
            "automatic": obj.get("automatic"),
            "config": obj.get("config"),
            "step_elements": obj.get("step_elements"),
            "executable": obj.get("executable"),
            "repeats": obj.get("repeats"),
            "repeats_duration": obj.get("repeats_duration"),
            "repeats_at": obj.get("repeats_at"),
            "has_been_rerun": obj.get("has_been_rerun"),
            "has_been_retried": obj.get("has_been_retried"),
            "execution": RunbooksExecutionStepExecutionEntity.from_dict(obj["execution"]) if obj.get("execution") is not None else None,
            "repeatable": obj.get("repeatable"),
            "rule": RulesRuleEntity.from_dict(obj["rule"]) if obj.get("rule") is not None else None
        })
        return _obj


