# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.ticketing_project_field_map_cases_else_entity import TicketingProjectFieldMapCasesElseEntity
from firehydrant_api_client.models.ticketing_project_field_map_cases_entity import TicketingProjectFieldMapCasesEntity
from firehydrant_api_client.models.ticketing_project_field_map_external_value_entity import TicketingProjectFieldMapExternalValueEntity
from typing import Optional, Set
from typing_extensions import Self

class TicketingProjectFieldMapBodyEntity(BaseModel):
    """
    TicketingProjectFieldMapBodyEntity
    """ # noqa: E501
    strategy: Optional[StrictStr] = None
    external_field: Optional[StrictStr] = None
    external_value: Optional[TicketingProjectFieldMapExternalValueEntity] = None
    user_data: Optional[Dict[str, Any]] = None
    cases: Optional[List[TicketingProjectFieldMapCasesEntity]] = None
    var_else: Optional[TicketingProjectFieldMapCasesElseEntity] = Field(default=None, alias="else")
    __properties: ClassVar[List[str]] = ["strategy", "external_field", "external_value", "user_data", "cases", "else"]

    @field_validator('strategy')
    def strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['basic', 'logic']):
            raise ValueError("must be one of enum values ('basic', 'logic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TicketingProjectFieldMapBodyEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external_value
        if self.external_value:
            _dict['external_value'] = self.external_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cases (list)
        _items = []
        if self.cases:
            for _item_cases in self.cases:
                if _item_cases:
                    _items.append(_item_cases.to_dict())
            _dict['cases'] = _items
        # override the default output from pydantic by calling `to_dict()` of var_else
        if self.var_else:
            _dict['else'] = self.var_else.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TicketingProjectFieldMapBodyEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "strategy": obj.get("strategy"),
            "external_field": obj.get("external_field"),
            "external_value": TicketingProjectFieldMapExternalValueEntity.from_dict(obj["external_value"]) if obj.get("external_value") is not None else None,
            "user_data": obj.get("user_data"),
            "cases": [TicketingProjectFieldMapCasesEntity.from_dict(_item) for _item in obj["cases"]] if obj.get("cases") is not None else None,
            "else": TicketingProjectFieldMapCasesElseEntity.from_dict(obj["else"]) if obj.get("else") is not None else None
        })
        return _obj


