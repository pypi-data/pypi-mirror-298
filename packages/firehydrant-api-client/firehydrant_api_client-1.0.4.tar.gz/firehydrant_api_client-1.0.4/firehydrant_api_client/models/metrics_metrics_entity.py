# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.metrics_metrics_entity_sort_entity import MetricsMetricsEntitySortEntity
from typing import Optional, Set
from typing_extensions import Self

class MetricsMetricsEntity(BaseModel):
    """
    Metrics_MetricsEntity model
    """ # noqa: E501
    type: Optional[StrictStr] = None
    by: Optional[StrictStr] = Field(default=None, description="The field by which the metrics are grouped. Can be one of: total, severity, priority, functionality, service, environment, or user.")
    bucket_size: Optional[StrictInt] = Field(default=None, description="The size of returned buckets. Can be one of: day, week, month, or all_time.")
    display_information: Optional[Dict[str, Any]] = None
    keys: Optional[List[StrictStr]] = None
    buckets: Optional[List[Dict[str, Any]]] = None
    sort: Optional[MetricsMetricsEntitySortEntity] = None
    __properties: ClassVar[List[str]] = ["type", "by", "bucket_size", "display_information", "keys", "buckets", "sort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricsMetricsEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricsMetricsEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "by": obj.get("by"),
            "bucket_size": obj.get("bucket_size"),
            "display_information": obj.get("display_information"),
            "keys": obj.get("keys"),
            "buckets": obj.get("buckets"),
            "sort": MetricsMetricsEntitySortEntity.from_dict(obj["sort"]) if obj.get("sort") is not None else None
        })
        return _obj


