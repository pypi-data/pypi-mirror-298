# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.post_v1_changes_events_attachments_inner import PostV1ChangesEventsAttachmentsInner
from firehydrant_api_client.models.post_v1_changes_events_authors_inner import PostV1ChangesEventsAuthorsInner
from firehydrant_api_client.models.post_v1_changes_events_change_identities_inner import PostV1ChangesEventsChangeIdentitiesInner
from typing import Optional, Set
from typing_extensions import Self

class PostV1ChangesEvents(BaseModel):
    """
    Create a change event
    """ # noqa: E501
    summary: StrictStr
    description: Optional[StrictStr] = None
    labels: Optional[Dict[str, StrictStr]] = None
    starts_at: Optional[datetime] = None
    ends_at: Optional[datetime] = None
    environments: Optional[List[StrictStr]] = Field(default=None, description="An array of environment IDs")
    services: Optional[List[StrictStr]] = Field(default=None, description="An array of service IDs")
    changes: Optional[List[StrictStr]] = Field(default=None, description="An array of change IDs")
    external_id: Optional[StrictStr] = Field(default=None, description="The ID of a change event as assigned by an external provider")
    change_identities: Optional[List[PostV1ChangesEventsChangeIdentitiesInner]] = Field(default=None, description="If provided and valid, the event will be linked to all changes that have the same identities. Identity *values* must be unique.")
    attachments: Optional[List[PostV1ChangesEventsAttachmentsInner]] = Field(default=None, description="JSON objects representing attachments, see attachments documentation for the schema")
    authors: Optional[List[PostV1ChangesEventsAuthorsInner]] = Field(default=None, description="Array of additional authors to add to the change event, the creating actor will automatically be added as an author")
    __properties: ClassVar[List[str]] = ["summary", "description", "labels", "starts_at", "ends_at", "environments", "services", "changes", "external_id", "change_identities", "attachments", "authors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostV1ChangesEvents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in change_identities (list)
        _items = []
        if self.change_identities:
            for _item_change_identities in self.change_identities:
                if _item_change_identities:
                    _items.append(_item_change_identities.to_dict())
            _dict['change_identities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authors (list)
        _items = []
        if self.authors:
            for _item_authors in self.authors:
                if _item_authors:
                    _items.append(_item_authors.to_dict())
            _dict['authors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostV1ChangesEvents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "labels": obj.get("labels"),
            "starts_at": obj.get("starts_at"),
            "ends_at": obj.get("ends_at"),
            "environments": obj.get("environments"),
            "services": obj.get("services"),
            "changes": obj.get("changes"),
            "external_id": obj.get("external_id"),
            "change_identities": [PostV1ChangesEventsChangeIdentitiesInner.from_dict(_item) for _item in obj["change_identities"]] if obj.get("change_identities") is not None else None,
            "attachments": [PostV1ChangesEventsAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "authors": [PostV1ChangesEventsAuthorsInner.from_dict(_item) for _item in obj["authors"]] if obj.get("authors") is not None else None
        })
        return _obj


