# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.post_v1_teams_team_id_on_call_schedules_restrictions_inner import PostV1TeamsTeamIdOnCallSchedulesRestrictionsInner
from firehydrant_api_client.models.post_v1_teams_team_id_on_call_schedules_strategy import PostV1TeamsTeamIdOnCallSchedulesStrategy
from typing import Optional, Set
from typing_extensions import Self

class PatchV1TeamsTeamIdOnCallSchedulesScheduleId(BaseModel):
    """
    Update a Signals on-call schedule by ID
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The on-call schedule's name.")
    description: Optional[StrictStr] = Field(default=None, description="A detailed description of the on-call schedule.")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone in which the on-call schedule operates. This value must be a valid IANA time zone name.")
    member_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of user IDs that should be added to the on-call schedule rotation. If not provided, shifts will need to be assigned manually.")
    slack_user_group_id: Optional[StrictStr] = Field(default=None, description="The ID of a Slack user group for syncing purposes. If provided, we will automatically sync whoever is on call to the user group in Slack.")
    strategy: Optional[PostV1TeamsTeamIdOnCallSchedulesStrategy] = None
    restrictions: Optional[List[PostV1TeamsTeamIdOnCallSchedulesRestrictionsInner]] = Field(default=None, description="A list of objects that restrict the schedule to speccific on-call periods.")
    effective_at: Optional[StrictStr] = Field(default=None, description="An ISO8601 time string specifying when the updated schedule should take effect. This value must be provided if editing an attribute that would affect how the schedule's shifts are generated, such as the time zone, members, strategy, or restrictions. ")
    color: Optional[StrictStr] = Field(default=None, description="A hex color code that will be used to represent the schedule in the UI and iCal subscriptions.")
    __properties: ClassVar[List[str]] = ["name", "description", "time_zone", "member_ids", "slack_user_group_id", "strategy", "restrictions", "effective_at", "color"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchV1TeamsTeamIdOnCallSchedulesScheduleId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of strategy
        if self.strategy:
            _dict['strategy'] = self.strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item_restrictions in self.restrictions:
                if _item_restrictions:
                    _items.append(_item_restrictions.to_dict())
            _dict['restrictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchV1TeamsTeamIdOnCallSchedulesScheduleId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "time_zone": obj.get("time_zone"),
            "member_ids": obj.get("member_ids"),
            "slack_user_group_id": obj.get("slack_user_group_id"),
            "strategy": PostV1TeamsTeamIdOnCallSchedulesStrategy.from_dict(obj["strategy"]) if obj.get("strategy") is not None else None,
            "restrictions": [PostV1TeamsTeamIdOnCallSchedulesRestrictionsInner.from_dict(_item) for _item in obj["restrictions"]] if obj.get("restrictions") is not None else None,
            "effective_at": obj.get("effective_at"),
            "color": obj.get("color")
        })
        return _obj


