# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.links_entity import LinksEntity
from firehydrant_api_client.models.media_image_entity import MediaImageEntity
from firehydrant_api_client.models.nunc_component_entity import NuncComponentEntity
from firehydrant_api_client.models.nunc_component_group_entity import NuncComponentGroupEntity
from firehydrant_api_client.models.nunc_condition_entity import NuncConditionEntity
from typing import Optional, Set
from typing_extensions import Self

class NuncConnectionEntity(BaseModel):
    """
    NuncConnectionEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    company_name: Optional[StrictStr] = None
    company_website: Optional[StrictStr] = None
    cname: Optional[StrictStr] = None
    greeting_title: Optional[StrictStr] = None
    greeting_body: Optional[StrictStr] = None
    operational_message: Optional[StrictStr] = None
    company_tos_url: Optional[StrictStr] = None
    primary_color: Optional[StrictStr] = None
    secondary_color: Optional[StrictStr] = None
    button_background_color: Optional[StrictStr] = None
    button_text_color: Optional[StrictStr] = None
    link_color: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    exposed_fields: Optional[StrictStr] = None
    conditions: Optional[NuncConditionEntity] = None
    components: Optional[NuncComponentEntity] = None
    component_groups: Optional[NuncComponentGroupEntity] = None
    logo: Optional[MediaImageEntity] = None
    cover_image: Optional[MediaImageEntity] = None
    favicon: Optional[MediaImageEntity] = None
    open_graph_image: Optional[MediaImageEntity] = None
    dark_logo: Optional[MediaImageEntity] = None
    enable_histogram: Optional[StrictBool] = None
    ui_version: Optional[StrictInt] = None
    links: Optional[List[LinksEntity]] = Field(default=None, description="List of links attached to this status page.")
    __properties: ClassVar[List[str]] = ["id", "domain", "company_name", "company_website", "cname", "greeting_title", "greeting_body", "operational_message", "company_tos_url", "primary_color", "secondary_color", "button_background_color", "button_text_color", "link_color", "title", "exposed_fields", "conditions", "components", "component_groups", "logo", "cover_image", "favicon", "open_graph_image", "dark_logo", "enable_histogram", "ui_version", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NuncConnectionEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of components
        if self.components:
            _dict['components'] = self.components.to_dict()
        # override the default output from pydantic by calling `to_dict()` of component_groups
        if self.component_groups:
            _dict['component_groups'] = self.component_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cover_image
        if self.cover_image:
            _dict['cover_image'] = self.cover_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of favicon
        if self.favicon:
            _dict['favicon'] = self.favicon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_graph_image
        if self.open_graph_image:
            _dict['open_graph_image'] = self.open_graph_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dark_logo
        if self.dark_logo:
            _dict['dark_logo'] = self.dark_logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NuncConnectionEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "domain": obj.get("domain"),
            "company_name": obj.get("company_name"),
            "company_website": obj.get("company_website"),
            "cname": obj.get("cname"),
            "greeting_title": obj.get("greeting_title"),
            "greeting_body": obj.get("greeting_body"),
            "operational_message": obj.get("operational_message"),
            "company_tos_url": obj.get("company_tos_url"),
            "primary_color": obj.get("primary_color"),
            "secondary_color": obj.get("secondary_color"),
            "button_background_color": obj.get("button_background_color"),
            "button_text_color": obj.get("button_text_color"),
            "link_color": obj.get("link_color"),
            "title": obj.get("title"),
            "exposed_fields": obj.get("exposed_fields"),
            "conditions": NuncConditionEntity.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None,
            "components": NuncComponentEntity.from_dict(obj["components"]) if obj.get("components") is not None else None,
            "component_groups": NuncComponentGroupEntity.from_dict(obj["component_groups"]) if obj.get("component_groups") is not None else None,
            "logo": MediaImageEntity.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "cover_image": MediaImageEntity.from_dict(obj["cover_image"]) if obj.get("cover_image") is not None else None,
            "favicon": MediaImageEntity.from_dict(obj["favicon"]) if obj.get("favicon") is not None else None,
            "open_graph_image": MediaImageEntity.from_dict(obj["open_graph_image"]) if obj.get("open_graph_image") is not None else None,
            "dark_logo": MediaImageEntity.from_dict(obj["dark_logo"]) if obj.get("dark_logo") is not None else None,
            "enable_histogram": obj.get("enable_histogram"),
            "ui_version": obj.get("ui_version"),
            "links": [LinksEntity.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


