# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IntegrationsMicrosoftTeamsV2ChannelEntity(BaseModel):
    """
    IntegrationsMicrosoftTeamsV2ChannelEntity
    """ # noqa: E501
    id: Optional[StrictStr] = None
    channel_id: Optional[StrictStr] = None
    channel_name: Optional[StrictStr] = None
    ms_team_id: Optional[StrictStr] = None
    team_name: Optional[StrictStr] = None
    channel_url: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    incident: Optional[IncidentEntity] = None
    __properties: ClassVar[List[str]] = ["id", "channel_id", "channel_name", "ms_team_id", "team_name", "channel_url", "status", "incident"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationsMicrosoftTeamsV2ChannelEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of incident
        if self.incident:
            _dict['incident'] = self.incident.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationsMicrosoftTeamsV2ChannelEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "channel_id": obj.get("channel_id"),
            "channel_name": obj.get("channel_name"),
            "ms_team_id": obj.get("ms_team_id"),
            "team_name": obj.get("team_name"),
            "channel_url": obj.get("channel_url"),
            "status": obj.get("status"),
            "incident": IncidentEntity.from_dict(obj["incident"]) if obj.get("incident") is not None else None
        })
        return _obj

from firehydrant_api_client.models.incident_entity import IncidentEntity
# TODO: Rewrite to not use raise_errors
IntegrationsMicrosoftTeamsV2ChannelEntity.model_rebuild(raise_errors=False)

