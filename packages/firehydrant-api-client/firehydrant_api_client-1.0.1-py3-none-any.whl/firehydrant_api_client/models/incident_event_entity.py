# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.author_entity import AuthorEntity
from firehydrant_api_client.models.conversations_api_entities_reference import ConversationsAPIEntitiesReference
from firehydrant_api_client.models.votes_entity import VotesEntity
from typing import Optional, Set
from typing_extensions import Self

class IncidentEventEntity(BaseModel):
    """
    IncidentEventEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    incident_id: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    context: Optional[StrictStr] = None
    data: Optional[Dict[str, Any]] = Field(default=None, description="Can be one of: NoteEntity, TourStepEntity, RootCauseEntity, ChangeTypeEntity, RoleUpdateEntity, TaskUpdateEntity, AlertLinkedEntity, ChatMessageEntity, AddTaskListEntity, ImpactUpdateEntity, TicketUpdateEntity, GeneralUpdateEntity, ChangelogEntryEntity, IncidentStatusEntity, TeamAssignmentEntity, BulkUpdateEntity")
    occurred_at: Optional[datetime] = None
    visibility: Optional[StrictStr] = None
    author: Optional[AuthorEntity] = None
    votes: Optional[VotesEntity] = None
    conversations: Optional[List[ConversationsAPIEntitiesReference]] = None
    __properties: ClassVar[List[str]] = ["id", "incident_id", "type", "context", "data", "occurred_at", "visibility", "author", "votes", "conversations"]

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['private_to_org', 'open_to_public', 'internal_status_page']):
            raise ValueError("must be one of enum values ('private_to_org', 'open_to_public', 'internal_status_page')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncidentEventEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of votes
        if self.votes:
            _dict['votes'] = self.votes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conversations (list)
        _items = []
        if self.conversations:
            for _item_conversations in self.conversations:
                if _item_conversations:
                    _items.append(_item_conversations.to_dict())
            _dict['conversations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncidentEventEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "incident_id": obj.get("incident_id"),
            "type": obj.get("type"),
            "context": obj.get("context"),
            "data": obj.get("data"),
            "occurred_at": obj.get("occurred_at"),
            "visibility": obj.get("visibility"),
            "author": AuthorEntity.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "votes": VotesEntity.from_dict(obj["votes"]) if obj.get("votes") is not None else None,
            "conversations": [ConversationsAPIEntitiesReference.from_dict(_item) for _item in obj["conversations"]] if obj.get("conversations") is not None else None
        })
        return _obj


