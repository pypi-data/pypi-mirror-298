# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from firehydrant_api_client.models.metrics_infrastructure_list_entity import MetricsInfrastructureListEntity
from firehydrant_api_client.models.metrics_infrastructure_metrics_entity import MetricsInfrastructureMetricsEntity
from firehydrant_api_client.models.metrics_metrics_entity import MetricsMetricsEntity
from firehydrant_api_client.models.metrics_mttx_data_entity import MetricsMttxDataEntity
from firehydrant_api_client.models.metrics_retrospective_entity import MetricsRetrospectiveEntity

from firehydrant_api_client.api_client import ApiClient, RequestSerialized
from firehydrant_api_client.api_response import ApiResponse
from firehydrant_api_client.rest import RESTResponseType


class MetricsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_v1_metrics_incidents(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        bucket_size: Optional[StrictStr] = None,
        by: Optional[StrictStr] = None,
        sort_field: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        sort_limit: Optional[StrictInt] = None,
        conditions: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricsMetricsEntity:
        """List incident metrics

        Returns a report with time bucketed analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param bucket_size:
        :type bucket_size: str
        :param by:
        :type by: str
        :param sort_field:
        :type sort_field: str
        :param sort_direction:
        :type sort_direction: str
        :param sort_limit:
        :type sort_limit: int
        :param conditions:
        :type conditions: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_incidents_serialize(
            start_date=start_date,
            end_date=end_date,
            bucket_size=bucket_size,
            by=by,
            sort_field=sort_field,
            sort_direction=sort_direction,
            sort_limit=sort_limit,
            conditions=conditions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_metrics_incidents_with_http_info(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        bucket_size: Optional[StrictStr] = None,
        by: Optional[StrictStr] = None,
        sort_field: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        sort_limit: Optional[StrictInt] = None,
        conditions: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricsMetricsEntity]:
        """List incident metrics

        Returns a report with time bucketed analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param bucket_size:
        :type bucket_size: str
        :param by:
        :type by: str
        :param sort_field:
        :type sort_field: str
        :param sort_direction:
        :type sort_direction: str
        :param sort_limit:
        :type sort_limit: int
        :param conditions:
        :type conditions: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_incidents_serialize(
            start_date=start_date,
            end_date=end_date,
            bucket_size=bucket_size,
            by=by,
            sort_field=sort_field,
            sort_direction=sort_direction,
            sort_limit=sort_limit,
            conditions=conditions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_metrics_incidents_without_preload_content(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        bucket_size: Optional[StrictStr] = None,
        by: Optional[StrictStr] = None,
        sort_field: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        sort_limit: Optional[StrictInt] = None,
        conditions: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List incident metrics

        Returns a report with time bucketed analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param bucket_size:
        :type bucket_size: str
        :param by:
        :type by: str
        :param sort_field:
        :type sort_field: str
        :param sort_direction:
        :type sort_direction: str
        :param sort_limit:
        :type sort_limit: int
        :param conditions:
        :type conditions: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_incidents_serialize(
            start_date=start_date,
            end_date=end_date,
            bucket_size=bucket_size,
            by=by,
            sort_field=sort_field,
            sort_direction=sort_direction,
            sort_limit=sort_limit,
            conditions=conditions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_metrics_incidents_serialize(
        self,
        start_date,
        end_date,
        bucket_size,
        by,
        sort_field,
        sort_direction,
        sort_limit,
        conditions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if bucket_size is not None:
            
            _query_params.append(('bucket_size', bucket_size))
            
        if by is not None:
            
            _query_params.append(('by', by))
            
        if sort_field is not None:
            
            _query_params.append(('sort_field', sort_field))
            
        if sort_direction is not None:
            
            _query_params.append(('sort_direction', sort_direction))
            
        if sort_limit is not None:
            
            _query_params.append(('sort_limit', sort_limit))
            
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/metrics/incidents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v1_metrics_infra_type(
        self,
        infra_type: StrictStr,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from; defaults to 30 days ago")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from, defaults to today")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricsInfrastructureListEntity:
        """List metrics for a component type

        Returns metrics for all components of a given type

        :param infra_type: (required)
        :type infra_type: str
        :param start_date: The start date to return metrics from; defaults to 30 days ago
        :type start_date: date
        :param end_date: The end date to return metrics from, defaults to today
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_infra_type_serialize(
            infra_type=infra_type,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsInfrastructureListEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_metrics_infra_type_with_http_info(
        self,
        infra_type: StrictStr,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from; defaults to 30 days ago")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from, defaults to today")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricsInfrastructureListEntity]:
        """List metrics for a component type

        Returns metrics for all components of a given type

        :param infra_type: (required)
        :type infra_type: str
        :param start_date: The start date to return metrics from; defaults to 30 days ago
        :type start_date: date
        :param end_date: The end date to return metrics from, defaults to today
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_infra_type_serialize(
            infra_type=infra_type,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsInfrastructureListEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_metrics_infra_type_without_preload_content(
        self,
        infra_type: StrictStr,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from; defaults to 30 days ago")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from, defaults to today")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List metrics for a component type

        Returns metrics for all components of a given type

        :param infra_type: (required)
        :type infra_type: str
        :param start_date: The start date to return metrics from; defaults to 30 days ago
        :type start_date: date
        :param end_date: The end date to return metrics from, defaults to today
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_infra_type_serialize(
            infra_type=infra_type,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsInfrastructureListEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_metrics_infra_type_serialize(
        self,
        infra_type,
        start_date,
        end_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if infra_type is not None:
            _path_params['infra_type'] = infra_type
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/metrics/{infra_type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v1_metrics_infra_type_infra_id(
        self,
        infra_type: StrictStr,
        infra_id: Annotated[StrictStr, Field(description="Component UUID")],
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from; defaults to 30 days ago")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from, defaults to today")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricsInfrastructureMetricsEntity:
        """Show metrics for a component

        Return metrics for a specific component

        :param infra_type: (required)
        :type infra_type: str
        :param infra_id: Component UUID (required)
        :type infra_id: str
        :param start_date: The start date to return metrics from; defaults to 30 days ago
        :type start_date: date
        :param end_date: The end date to return metrics from, defaults to today
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_infra_type_infra_id_serialize(
            infra_type=infra_type,
            infra_id=infra_id,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsInfrastructureMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_metrics_infra_type_infra_id_with_http_info(
        self,
        infra_type: StrictStr,
        infra_id: Annotated[StrictStr, Field(description="Component UUID")],
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from; defaults to 30 days ago")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from, defaults to today")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricsInfrastructureMetricsEntity]:
        """Show metrics for a component

        Return metrics for a specific component

        :param infra_type: (required)
        :type infra_type: str
        :param infra_id: Component UUID (required)
        :type infra_id: str
        :param start_date: The start date to return metrics from; defaults to 30 days ago
        :type start_date: date
        :param end_date: The end date to return metrics from, defaults to today
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_infra_type_infra_id_serialize(
            infra_type=infra_type,
            infra_id=infra_id,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsInfrastructureMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_metrics_infra_type_infra_id_without_preload_content(
        self,
        infra_type: StrictStr,
        infra_id: Annotated[StrictStr, Field(description="Component UUID")],
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from; defaults to 30 days ago")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from, defaults to today")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show metrics for a component

        Return metrics for a specific component

        :param infra_type: (required)
        :type infra_type: str
        :param infra_id: Component UUID (required)
        :type infra_id: str
        :param start_date: The start date to return metrics from; defaults to 30 days ago
        :type start_date: date
        :param end_date: The end date to return metrics from, defaults to today
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_infra_type_infra_id_serialize(
            infra_type=infra_type,
            infra_id=infra_id,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsInfrastructureMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_metrics_infra_type_infra_id_serialize(
        self,
        infra_type,
        infra_id,
        start_date,
        end_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if infra_type is not None:
            _path_params['infra_type'] = infra_type
        if infra_id is not None:
            _path_params['infra_id'] = infra_id
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/metrics/{infra_type}/{infra_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v1_metrics_mttx(
        self,
        start_date: Annotated[date, Field(description="Filters for incidents that started on or after this date")],
        end_date: Annotated[date, Field(description="Filters for incidents that started on or before this date")],
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        conditions: Annotated[Optional[StrictStr], Field(description="A JSON string that defines 'logic' and 'user_data'")] = None,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services")] = None,
        functionalities: Annotated[Optional[StrictStr], Field(description="A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities")] = None,
        excluded_infrastructure_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of infrastucture IDs. Returns incidents that do not have the following infrastructure ids associated with them.")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs")] = None,
        assigned_teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Incident status")] = None,
        resolved_at_or_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.")] = None,
        resolved_at_or_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.")] = None,
        created_at_or_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were created at or after this time")] = None,
        created_at_or_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were created at or before this time")] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for an incident that searches on name, summary, and desciption")] = None,
        name: Annotated[Optional[StrictStr], Field(description="A query to search incidents by their name")] = None,
        saved_search_id: Annotated[Optional[StrictStr], Field(description="The id of a previously saved search.")] = None,
        priorities: Annotated[Optional[StrictStr], Field(description="A text value of priority")] = None,
        priority_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where priority has not been set")] = None,
        severities: Annotated[Optional[StrictStr], Field(description="A text value of severity")] = None,
        severity_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where severity has not been set")] = None,
        current_milestones: Annotated[Optional[StrictStr], Field(description="A comma separated list of current milestones")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A comma separated list of tags")] = None,
        tag_match_strategy: Annotated[Optional[StrictStr], Field(description="A matching strategy for the tags provided")] = None,
        archived: Annotated[Optional[StrictBool], Field(description="Return archived incidents")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were updated after this date")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were updated before this date")] = None,
        custom_field_id: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        measurements: Annotated[Optional[StrictStr], Field(description="Comma-separated list of measurements to include in the response")] = None,
        group_by: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricsMttxDataEntity:
        """get_v1_metrics_mttx

        Fetch infrastructure metrics based on custom query

        :param start_date: Filters for incidents that started on or after this date (required)
        :type start_date: date
        :param end_date: Filters for incidents that started on or before this date (required)
        :type end_date: date
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param conditions: A JSON string that defines 'logic' and 'user_data'
        :type conditions: str
        :param environments: A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments
        :type environments: str
        :param services: A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services
        :type services: str
        :param functionalities: A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities
        :type functionalities: str
        :param excluded_infrastructure_ids: A comma separated list of infrastucture IDs. Returns incidents that do not have the following infrastructure ids associated with them.
        :type excluded_infrastructure_ids: str
        :param teams: A comma separated list of team IDs
        :type teams: str
        :param assigned_teams: A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments
        :type assigned_teams: str
        :param status: Incident status
        :type status: str
        :param resolved_at_or_after: Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
        :type resolved_at_or_after: datetime
        :param resolved_at_or_before: Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
        :type resolved_at_or_before: datetime
        :param created_at_or_after: Filters for incidents that were created at or after this time
        :type created_at_or_after: datetime
        :param created_at_or_before: Filters for incidents that were created at or before this time
        :type created_at_or_before: datetime
        :param query: A text query for an incident that searches on name, summary, and desciption
        :type query: str
        :param name: A query to search incidents by their name
        :type name: str
        :param saved_search_id: The id of a previously saved search.
        :type saved_search_id: str
        :param priorities: A text value of priority
        :type priorities: str
        :param priority_not_set: Flag for including incidents where priority has not been set
        :type priority_not_set: bool
        :param severities: A text value of severity
        :type severities: str
        :param severity_not_set: Flag for including incidents where severity has not been set
        :type severity_not_set: bool
        :param current_milestones: A comma separated list of current milestones
        :type current_milestones: str
        :param tags: A comma separated list of tags
        :type tags: str
        :param tag_match_strategy: A matching strategy for the tags provided
        :type tag_match_strategy: str
        :param archived: Return archived incidents
        :type archived: bool
        :param updated_after: Filters for incidents that were updated after this date
        :type updated_after: datetime
        :param updated_before: Filters for incidents that were updated before this date
        :type updated_before: datetime
        :param custom_field_id:
        :type custom_field_id: str
        :param sort_by:
        :type sort_by: str
        :param measurements: Comma-separated list of measurements to include in the response
        :type measurements: str
        :param group_by:
        :type group_by: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_mttx_serialize(
            start_date=start_date,
            end_date=end_date,
            page=page,
            per_page=per_page,
            conditions=conditions,
            environments=environments,
            services=services,
            functionalities=functionalities,
            excluded_infrastructure_ids=excluded_infrastructure_ids,
            teams=teams,
            assigned_teams=assigned_teams,
            status=status,
            resolved_at_or_after=resolved_at_or_after,
            resolved_at_or_before=resolved_at_or_before,
            created_at_or_after=created_at_or_after,
            created_at_or_before=created_at_or_before,
            query=query,
            name=name,
            saved_search_id=saved_search_id,
            priorities=priorities,
            priority_not_set=priority_not_set,
            severities=severities,
            severity_not_set=severity_not_set,
            current_milestones=current_milestones,
            tags=tags,
            tag_match_strategy=tag_match_strategy,
            archived=archived,
            updated_after=updated_after,
            updated_before=updated_before,
            custom_field_id=custom_field_id,
            sort_by=sort_by,
            measurements=measurements,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMttxDataEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_metrics_mttx_with_http_info(
        self,
        start_date: Annotated[date, Field(description="Filters for incidents that started on or after this date")],
        end_date: Annotated[date, Field(description="Filters for incidents that started on or before this date")],
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        conditions: Annotated[Optional[StrictStr], Field(description="A JSON string that defines 'logic' and 'user_data'")] = None,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services")] = None,
        functionalities: Annotated[Optional[StrictStr], Field(description="A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities")] = None,
        excluded_infrastructure_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of infrastucture IDs. Returns incidents that do not have the following infrastructure ids associated with them.")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs")] = None,
        assigned_teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Incident status")] = None,
        resolved_at_or_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.")] = None,
        resolved_at_or_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.")] = None,
        created_at_or_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were created at or after this time")] = None,
        created_at_or_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were created at or before this time")] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for an incident that searches on name, summary, and desciption")] = None,
        name: Annotated[Optional[StrictStr], Field(description="A query to search incidents by their name")] = None,
        saved_search_id: Annotated[Optional[StrictStr], Field(description="The id of a previously saved search.")] = None,
        priorities: Annotated[Optional[StrictStr], Field(description="A text value of priority")] = None,
        priority_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where priority has not been set")] = None,
        severities: Annotated[Optional[StrictStr], Field(description="A text value of severity")] = None,
        severity_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where severity has not been set")] = None,
        current_milestones: Annotated[Optional[StrictStr], Field(description="A comma separated list of current milestones")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A comma separated list of tags")] = None,
        tag_match_strategy: Annotated[Optional[StrictStr], Field(description="A matching strategy for the tags provided")] = None,
        archived: Annotated[Optional[StrictBool], Field(description="Return archived incidents")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were updated after this date")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were updated before this date")] = None,
        custom_field_id: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        measurements: Annotated[Optional[StrictStr], Field(description="Comma-separated list of measurements to include in the response")] = None,
        group_by: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricsMttxDataEntity]:
        """get_v1_metrics_mttx

        Fetch infrastructure metrics based on custom query

        :param start_date: Filters for incidents that started on or after this date (required)
        :type start_date: date
        :param end_date: Filters for incidents that started on or before this date (required)
        :type end_date: date
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param conditions: A JSON string that defines 'logic' and 'user_data'
        :type conditions: str
        :param environments: A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments
        :type environments: str
        :param services: A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services
        :type services: str
        :param functionalities: A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities
        :type functionalities: str
        :param excluded_infrastructure_ids: A comma separated list of infrastucture IDs. Returns incidents that do not have the following infrastructure ids associated with them.
        :type excluded_infrastructure_ids: str
        :param teams: A comma separated list of team IDs
        :type teams: str
        :param assigned_teams: A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments
        :type assigned_teams: str
        :param status: Incident status
        :type status: str
        :param resolved_at_or_after: Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
        :type resolved_at_or_after: datetime
        :param resolved_at_or_before: Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
        :type resolved_at_or_before: datetime
        :param created_at_or_after: Filters for incidents that were created at or after this time
        :type created_at_or_after: datetime
        :param created_at_or_before: Filters for incidents that were created at or before this time
        :type created_at_or_before: datetime
        :param query: A text query for an incident that searches on name, summary, and desciption
        :type query: str
        :param name: A query to search incidents by their name
        :type name: str
        :param saved_search_id: The id of a previously saved search.
        :type saved_search_id: str
        :param priorities: A text value of priority
        :type priorities: str
        :param priority_not_set: Flag for including incidents where priority has not been set
        :type priority_not_set: bool
        :param severities: A text value of severity
        :type severities: str
        :param severity_not_set: Flag for including incidents where severity has not been set
        :type severity_not_set: bool
        :param current_milestones: A comma separated list of current milestones
        :type current_milestones: str
        :param tags: A comma separated list of tags
        :type tags: str
        :param tag_match_strategy: A matching strategy for the tags provided
        :type tag_match_strategy: str
        :param archived: Return archived incidents
        :type archived: bool
        :param updated_after: Filters for incidents that were updated after this date
        :type updated_after: datetime
        :param updated_before: Filters for incidents that were updated before this date
        :type updated_before: datetime
        :param custom_field_id:
        :type custom_field_id: str
        :param sort_by:
        :type sort_by: str
        :param measurements: Comma-separated list of measurements to include in the response
        :type measurements: str
        :param group_by:
        :type group_by: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_mttx_serialize(
            start_date=start_date,
            end_date=end_date,
            page=page,
            per_page=per_page,
            conditions=conditions,
            environments=environments,
            services=services,
            functionalities=functionalities,
            excluded_infrastructure_ids=excluded_infrastructure_ids,
            teams=teams,
            assigned_teams=assigned_teams,
            status=status,
            resolved_at_or_after=resolved_at_or_after,
            resolved_at_or_before=resolved_at_or_before,
            created_at_or_after=created_at_or_after,
            created_at_or_before=created_at_or_before,
            query=query,
            name=name,
            saved_search_id=saved_search_id,
            priorities=priorities,
            priority_not_set=priority_not_set,
            severities=severities,
            severity_not_set=severity_not_set,
            current_milestones=current_milestones,
            tags=tags,
            tag_match_strategy=tag_match_strategy,
            archived=archived,
            updated_after=updated_after,
            updated_before=updated_before,
            custom_field_id=custom_field_id,
            sort_by=sort_by,
            measurements=measurements,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMttxDataEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_metrics_mttx_without_preload_content(
        self,
        start_date: Annotated[date, Field(description="Filters for incidents that started on or after this date")],
        end_date: Annotated[date, Field(description="Filters for incidents that started on or before this date")],
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        conditions: Annotated[Optional[StrictStr], Field(description="A JSON string that defines 'logic' and 'user_data'")] = None,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services")] = None,
        functionalities: Annotated[Optional[StrictStr], Field(description="A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities")] = None,
        excluded_infrastructure_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of infrastucture IDs. Returns incidents that do not have the following infrastructure ids associated with them.")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs")] = None,
        assigned_teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Incident status")] = None,
        resolved_at_or_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.")] = None,
        resolved_at_or_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.")] = None,
        created_at_or_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were created at or after this time")] = None,
        created_at_or_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were created at or before this time")] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for an incident that searches on name, summary, and desciption")] = None,
        name: Annotated[Optional[StrictStr], Field(description="A query to search incidents by their name")] = None,
        saved_search_id: Annotated[Optional[StrictStr], Field(description="The id of a previously saved search.")] = None,
        priorities: Annotated[Optional[StrictStr], Field(description="A text value of priority")] = None,
        priority_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where priority has not been set")] = None,
        severities: Annotated[Optional[StrictStr], Field(description="A text value of severity")] = None,
        severity_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where severity has not been set")] = None,
        current_milestones: Annotated[Optional[StrictStr], Field(description="A comma separated list of current milestones")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="A comma separated list of tags")] = None,
        tag_match_strategy: Annotated[Optional[StrictStr], Field(description="A matching strategy for the tags provided")] = None,
        archived: Annotated[Optional[StrictBool], Field(description="Return archived incidents")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="Filters for incidents that were updated after this date")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="Filters for incidents that were updated before this date")] = None,
        custom_field_id: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        measurements: Annotated[Optional[StrictStr], Field(description="Comma-separated list of measurements to include in the response")] = None,
        group_by: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v1_metrics_mttx

        Fetch infrastructure metrics based on custom query

        :param start_date: Filters for incidents that started on or after this date (required)
        :type start_date: date
        :param end_date: Filters for incidents that started on or before this date (required)
        :type end_date: date
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param conditions: A JSON string that defines 'logic' and 'user_data'
        :type conditions: str
        :param environments: A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments
        :type environments: str
        :param services: A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services
        :type services: str
        :param functionalities: A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities
        :type functionalities: str
        :param excluded_infrastructure_ids: A comma separated list of infrastucture IDs. Returns incidents that do not have the following infrastructure ids associated with them.
        :type excluded_infrastructure_ids: str
        :param teams: A comma separated list of team IDs
        :type teams: str
        :param assigned_teams: A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments
        :type assigned_teams: str
        :param status: Incident status
        :type status: str
        :param resolved_at_or_after: Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
        :type resolved_at_or_after: datetime
        :param resolved_at_or_before: Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
        :type resolved_at_or_before: datetime
        :param created_at_or_after: Filters for incidents that were created at or after this time
        :type created_at_or_after: datetime
        :param created_at_or_before: Filters for incidents that were created at or before this time
        :type created_at_or_before: datetime
        :param query: A text query for an incident that searches on name, summary, and desciption
        :type query: str
        :param name: A query to search incidents by their name
        :type name: str
        :param saved_search_id: The id of a previously saved search.
        :type saved_search_id: str
        :param priorities: A text value of priority
        :type priorities: str
        :param priority_not_set: Flag for including incidents where priority has not been set
        :type priority_not_set: bool
        :param severities: A text value of severity
        :type severities: str
        :param severity_not_set: Flag for including incidents where severity has not been set
        :type severity_not_set: bool
        :param current_milestones: A comma separated list of current milestones
        :type current_milestones: str
        :param tags: A comma separated list of tags
        :type tags: str
        :param tag_match_strategy: A matching strategy for the tags provided
        :type tag_match_strategy: str
        :param archived: Return archived incidents
        :type archived: bool
        :param updated_after: Filters for incidents that were updated after this date
        :type updated_after: datetime
        :param updated_before: Filters for incidents that were updated before this date
        :type updated_before: datetime
        :param custom_field_id:
        :type custom_field_id: str
        :param sort_by:
        :type sort_by: str
        :param measurements: Comma-separated list of measurements to include in the response
        :type measurements: str
        :param group_by:
        :type group_by: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_mttx_serialize(
            start_date=start_date,
            end_date=end_date,
            page=page,
            per_page=per_page,
            conditions=conditions,
            environments=environments,
            services=services,
            functionalities=functionalities,
            excluded_infrastructure_ids=excluded_infrastructure_ids,
            teams=teams,
            assigned_teams=assigned_teams,
            status=status,
            resolved_at_or_after=resolved_at_or_after,
            resolved_at_or_before=resolved_at_or_before,
            created_at_or_after=created_at_or_after,
            created_at_or_before=created_at_or_before,
            query=query,
            name=name,
            saved_search_id=saved_search_id,
            priorities=priorities,
            priority_not_set=priority_not_set,
            severities=severities,
            severity_not_set=severity_not_set,
            current_milestones=current_milestones,
            tags=tags,
            tag_match_strategy=tag_match_strategy,
            archived=archived,
            updated_after=updated_after,
            updated_before=updated_before,
            custom_field_id=custom_field_id,
            sort_by=sort_by,
            measurements=measurements,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMttxDataEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_metrics_mttx_serialize(
        self,
        start_date,
        end_date,
        page,
        per_page,
        conditions,
        environments,
        services,
        functionalities,
        excluded_infrastructure_ids,
        teams,
        assigned_teams,
        status,
        resolved_at_or_after,
        resolved_at_or_before,
        created_at_or_after,
        created_at_or_before,
        query,
        name,
        saved_search_id,
        priorities,
        priority_not_set,
        severities,
        severity_not_set,
        current_milestones,
        tags,
        tag_match_strategy,
        archived,
        updated_after,
        updated_before,
        custom_field_id,
        sort_by,
        measurements,
        group_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'group_by': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if conditions is not None:
            
            _query_params.append(('conditions', conditions))
            
        if environments is not None:
            
            _query_params.append(('environments', environments))
            
        if services is not None:
            
            _query_params.append(('services', services))
            
        if functionalities is not None:
            
            _query_params.append(('functionalities', functionalities))
            
        if excluded_infrastructure_ids is not None:
            
            _query_params.append(('excluded_infrastructure_ids', excluded_infrastructure_ids))
            
        if teams is not None:
            
            _query_params.append(('teams', teams))
            
        if assigned_teams is not None:
            
            _query_params.append(('assigned_teams', assigned_teams))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if resolved_at_or_after is not None:
            if isinstance(resolved_at_or_after, datetime):
                _query_params.append(
                    (
                        'resolved_at_or_after',
                        resolved_at_or_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resolved_at_or_after', resolved_at_or_after))
            
        if resolved_at_or_before is not None:
            if isinstance(resolved_at_or_before, datetime):
                _query_params.append(
                    (
                        'resolved_at_or_before',
                        resolved_at_or_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resolved_at_or_before', resolved_at_or_before))
            
        if created_at_or_after is not None:
            if isinstance(created_at_or_after, datetime):
                _query_params.append(
                    (
                        'created_at_or_after',
                        created_at_or_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at_or_after', created_at_or_after))
            
        if created_at_or_before is not None:
            if isinstance(created_at_or_before, datetime):
                _query_params.append(
                    (
                        'created_at_or_before',
                        created_at_or_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at_or_before', created_at_or_before))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if saved_search_id is not None:
            
            _query_params.append(('saved_search_id', saved_search_id))
            
        if priorities is not None:
            
            _query_params.append(('priorities', priorities))
            
        if priority_not_set is not None:
            
            _query_params.append(('priority_not_set', priority_not_set))
            
        if severities is not None:
            
            _query_params.append(('severities', severities))
            
        if severity_not_set is not None:
            
            _query_params.append(('severity_not_set', severity_not_set))
            
        if current_milestones is not None:
            
            _query_params.append(('current_milestones', current_milestones))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if tag_match_strategy is not None:
            
            _query_params.append(('tag_match_strategy', tag_match_strategy))
            
        if archived is not None:
            
            _query_params.append(('archived', archived))
            
        if updated_after is not None:
            if isinstance(updated_after, datetime):
                _query_params.append(
                    (
                        'updated_after',
                        updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_after', updated_after))
            
        if updated_before is not None:
            if isinstance(updated_before, datetime):
                _query_params.append(
                    (
                        'updated_before',
                        updated_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_before', updated_before))
            
        if custom_field_id is not None:
            
            _query_params.append(('custom_field_id', custom_field_id))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if measurements is not None:
            
            _query_params.append(('measurements', measurements))
            
        # process the header parameters
        # process the form parameters
        if group_by is not None:
            _form_params.append(('group_by', group_by))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/metrics/mttx',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v1_metrics_retrospectives(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricsRetrospectiveEntity:
        """List retrospective metrics

        Returns a report with retrospective analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_retrospectives_serialize(
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsRetrospectiveEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_metrics_retrospectives_with_http_info(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricsRetrospectiveEntity]:
        """List retrospective metrics

        Returns a report with retrospective analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_retrospectives_serialize(
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsRetrospectiveEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_metrics_retrospectives_without_preload_content(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List retrospective metrics

        Returns a report with retrospective analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_retrospectives_serialize(
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsRetrospectiveEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_metrics_retrospectives_serialize(
        self,
        start_date,
        end_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/metrics/retrospectives',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v1_metrics_user_involvements(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        bucket_size: Optional[StrictStr] = None,
        by: Optional[StrictStr] = None,
        sort_field: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        sort_limit: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricsMetricsEntity:
        """List user metrics

        Returns a report with time bucketed analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param bucket_size:
        :type bucket_size: str
        :param by:
        :type by: str
        :param sort_field:
        :type sort_field: str
        :param sort_direction:
        :type sort_direction: str
        :param sort_limit:
        :type sort_limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_user_involvements_serialize(
            start_date=start_date,
            end_date=end_date,
            bucket_size=bucket_size,
            by=by,
            sort_field=sort_field,
            sort_direction=sort_direction,
            sort_limit=sort_limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_metrics_user_involvements_with_http_info(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        bucket_size: Optional[StrictStr] = None,
        by: Optional[StrictStr] = None,
        sort_field: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        sort_limit: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricsMetricsEntity]:
        """List user metrics

        Returns a report with time bucketed analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param bucket_size:
        :type bucket_size: str
        :param by:
        :type by: str
        :param sort_field:
        :type sort_field: str
        :param sort_direction:
        :type sort_direction: str
        :param sort_limit:
        :type sort_limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_user_involvements_serialize(
            start_date=start_date,
            end_date=end_date,
            bucket_size=bucket_size,
            by=by,
            sort_field=sort_field,
            sort_direction=sort_direction,
            sort_limit=sort_limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_metrics_user_involvements_without_preload_content(
        self,
        start_date: Annotated[Optional[date], Field(description="The start date to return metrics from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return metrics from")] = None,
        bucket_size: Optional[StrictStr] = None,
        by: Optional[StrictStr] = None,
        sort_field: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        sort_limit: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List user metrics

        Returns a report with time bucketed analytics data

        :param start_date: The start date to return metrics from
        :type start_date: date
        :param end_date: The end date to return metrics from
        :type end_date: date
        :param bucket_size:
        :type bucket_size: str
        :param by:
        :type by: str
        :param sort_field:
        :type sort_field: str
        :param sort_direction:
        :type sort_direction: str
        :param sort_limit:
        :type sort_limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_metrics_user_involvements_serialize(
            start_date=start_date,
            end_date=end_date,
            bucket_size=bucket_size,
            by=by,
            sort_field=sort_field,
            sort_direction=sort_direction,
            sort_limit=sort_limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsMetricsEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_metrics_user_involvements_serialize(
        self,
        start_date,
        end_date,
        bucket_size,
        by,
        sort_field,
        sort_direction,
        sort_limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if bucket_size is not None:
            
            _query_params.append(('bucket_size', bucket_size))
            
        if by is not None:
            
            _query_params.append(('by', by))
            
        if sort_field is not None:
            
            _query_params.append(('sort_field', sort_field))
            
        if sort_direction is not None:
            
            _query_params.append(('sort_direction', sort_direction))
            
        if sort_limit is not None:
            
            _query_params.append(('sort_limit', sort_limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/metrics/user_involvements',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


