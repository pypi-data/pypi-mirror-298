# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.patch_v1_integrations_statuspage_connections_connection_id_conditions_inner import PatchV1IntegrationsStatuspageConnectionsConnectionIdConditionsInner
from firehydrant_api_client.models.patch_v1_integrations_statuspage_connections_connection_id_milestone_mappings_inner import PatchV1IntegrationsStatuspageConnectionsConnectionIdMilestoneMappingsInner
from firehydrant_api_client.models.patch_v1_integrations_statuspage_connections_connection_id_severities_inner import PatchV1IntegrationsStatuspageConnectionsConnectionIdSeveritiesInner
from typing import Optional, Set
from typing_extensions import Self

class PatchV1IntegrationsStatuspageConnectionsConnectionId(BaseModel):
    """
    Update the given Statuspage integration connection.
    """ # noqa: E501
    page_id: Optional[StrictStr] = None
    severities: Optional[List[PatchV1IntegrationsStatuspageConnectionsConnectionIdSeveritiesInner]] = None
    conditions: Optional[List[PatchV1IntegrationsStatuspageConnectionsConnectionIdConditionsInner]] = None
    milestone_mappings: Optional[List[PatchV1IntegrationsStatuspageConnectionsConnectionIdMilestoneMappingsInner]] = None
    __properties: ClassVar[List[str]] = ["page_id", "severities", "conditions", "milestone_mappings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchV1IntegrationsStatuspageConnectionsConnectionId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in severities (list)
        _items = []
        if self.severities:
            for _item_severities in self.severities:
                if _item_severities:
                    _items.append(_item_severities.to_dict())
            _dict['severities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in milestone_mappings (list)
        _items = []
        if self.milestone_mappings:
            for _item_milestone_mappings in self.milestone_mappings:
                if _item_milestone_mappings:
                    _items.append(_item_milestone_mappings.to_dict())
            _dict['milestone_mappings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchV1IntegrationsStatuspageConnectionsConnectionId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "page_id": obj.get("page_id"),
            "severities": [PatchV1IntegrationsStatuspageConnectionsConnectionIdSeveritiesInner.from_dict(_item) for _item in obj["severities"]] if obj.get("severities") is not None else None,
            "conditions": [PatchV1IntegrationsStatuspageConnectionsConnectionIdConditionsInner.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "milestone_mappings": [PatchV1IntegrationsStatuspageConnectionsConnectionIdMilestoneMappingsInner.from_dict(_item) for _item in obj["milestone_mappings"]] if obj.get("milestone_mappings") is not None else None
        })
        return _obj


