# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.patch_v1_functionalities_functionality_id_external_resources_inner import PatchV1FunctionalitiesFunctionalityIdExternalResourcesInner
from firehydrant_api_client.models.patch_v1_functionalities_functionality_id_owner import PatchV1FunctionalitiesFunctionalityIdOwner
from firehydrant_api_client.models.patch_v1_functionalities_functionality_id_services_inner import PatchV1FunctionalitiesFunctionalityIdServicesInner
from firehydrant_api_client.models.patch_v1_functionalities_functionality_id_teams_inner import PatchV1FunctionalitiesFunctionalityIdTeamsInner
from firehydrant_api_client.models.patch_v1_services_service_id_links_inner import PatchV1ServicesServiceIdLinksInner
from typing import Optional, Set
from typing_extensions import Self

class PatchV1FunctionalitiesFunctionalityId(BaseModel):
    """
    Update a functionalities attributes
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    services: Optional[List[PatchV1FunctionalitiesFunctionalityIdServicesInner]] = None
    links: Optional[List[PatchV1ServicesServiceIdLinksInner]] = Field(default=None, description="An array of links to associate with this functionality. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.")
    owner: Optional[PatchV1FunctionalitiesFunctionalityIdOwner] = None
    remove_owner: Optional[StrictBool] = Field(default=None, description="If you are trying to remove a team as an owner from a functionality, set this to 'true'")
    teams: Optional[List[PatchV1FunctionalitiesFunctionalityIdTeamsInner]] = Field(default=None, description="An array of teams to attach to this functionality.")
    remove_remaining_teams: Optional[StrictBool] = Field(default=None, description="If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams")
    external_resources: Optional[List[PatchV1FunctionalitiesFunctionalityIdExternalResourcesInner]] = Field(default=None, description="An array of external resources to attach to this service.")
    remove_remaining_external_resources: Optional[StrictBool] = Field(default=None, description="If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A hash of label keys and values")
    alert_on_add: Optional[StrictBool] = None
    auto_add_responding_team: Optional[StrictBool] = None
    remove_remaining_services: Optional[StrictBool] = Field(default=False, description="Set this to true if you want to remove all of the services that are not included in the services array from the functionality")
    __properties: ClassVar[List[str]] = ["name", "description", "services", "links", "owner", "remove_owner", "teams", "remove_remaining_teams", "external_resources", "remove_remaining_external_resources", "labels", "alert_on_add", "auto_add_responding_team", "remove_remaining_services"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchV1FunctionalitiesFunctionalityId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item_teams in self.teams:
                if _item_teams:
                    _items.append(_item_teams.to_dict())
            _dict['teams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in external_resources (list)
        _items = []
        if self.external_resources:
            for _item_external_resources in self.external_resources:
                if _item_external_resources:
                    _items.append(_item_external_resources.to_dict())
            _dict['external_resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchV1FunctionalitiesFunctionalityId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "services": [PatchV1FunctionalitiesFunctionalityIdServicesInner.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "links": [PatchV1ServicesServiceIdLinksInner.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "owner": PatchV1FunctionalitiesFunctionalityIdOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "remove_owner": obj.get("remove_owner"),
            "teams": [PatchV1FunctionalitiesFunctionalityIdTeamsInner.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None,
            "remove_remaining_teams": obj.get("remove_remaining_teams"),
            "external_resources": [PatchV1FunctionalitiesFunctionalityIdExternalResourcesInner.from_dict(_item) for _item in obj["external_resources"]] if obj.get("external_resources") is not None else None,
            "remove_remaining_external_resources": obj.get("remove_remaining_external_resources"),
            "labels": obj.get("labels"),
            "alert_on_add": obj.get("alert_on_add"),
            "auto_add_responding_team": obj.get("auto_add_responding_team"),
            "remove_remaining_services": obj.get("remove_remaining_services") if obj.get("remove_remaining_services") is not None else False
        })
        return _obj


