# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_v1_runbooks_attachment_rule import PostV1RunbooksAttachmentRule
from openapi_client.models.post_v1_runbooks_owner import PostV1RunbooksOwner
from openapi_client.models.post_v1_runbooks_steps_inner import PostV1RunbooksStepsInner
from typing import Optional, Set
from typing_extensions import Self

class PostV1Runbooks(BaseModel):
    """
    Create a new runbook for use with incidents.
    """ # noqa: E501
    name: StrictStr
    type: StrictStr = Field(description="Deprecated, but still required. Please just use 'incident'")
    summary: Optional[StrictStr] = Field(default=None, description="Deprecated. Use description")
    description: Optional[StrictStr] = Field(default=None, description="A longer description about the Runbook. Supports markdown format")
    auto_attach_to_restricted_incidents: Optional[StrictBool] = Field(default=None, description="Whether or not this runbook should be automatically attached to restricted incidents. Note that setting this to `true` will prevent it from being attached to public incidents, even manually. Defaults to `false`.")
    tutorial: Optional[StrictBool] = Field(default=None, description="Whether or not this runbook is a tutorial runbook")
    owner: Optional[PostV1RunbooksOwner] = None
    attachment_rule: Optional[PostV1RunbooksAttachmentRule] = None
    steps: Optional[List[PostV1RunbooksStepsInner]] = None
    __properties: ClassVar[List[str]] = ["name", "type", "summary", "description", "auto_attach_to_restricted_incidents", "tutorial", "owner", "attachment_rule", "steps"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['incident', 'general', 'infrastructure', 'incident_role']):
            raise ValueError("must be one of enum values ('incident', 'general', 'infrastructure', 'incident_role')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostV1Runbooks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attachment_rule
        if self.attachment_rule:
            _dict['attachment_rule'] = self.attachment_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostV1Runbooks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "auto_attach_to_restricted_incidents": obj.get("auto_attach_to_restricted_incidents"),
            "tutorial": obj.get("tutorial"),
            "owner": PostV1RunbooksOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "attachment_rule": PostV1RunbooksAttachmentRule.from_dict(obj["attachment_rule"]) if obj.get("attachment_rule") is not None else None,
            "steps": [PostV1RunbooksStepsInner.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None
        })
        return _obj


