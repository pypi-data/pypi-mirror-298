# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.incident_type_entity_template_impact_entity import IncidentTypeEntityTemplateImpactEntity
from openapi_client.models.team_entity import TeamEntity
from typing import Optional, Set
from typing_extensions import Self

class IncidentTypeEntityTemplateValuesEntity(BaseModel):
    """
    IncidentTypeEntityTemplateValuesEntity
    """ # noqa: E501
    services: Optional[List[IncidentTypeEntityTemplateImpactEntity]] = None
    functionalities: Optional[List[IncidentTypeEntityTemplateImpactEntity]] = None
    environments: Optional[List[IncidentTypeEntityTemplateImpactEntity]] = None
    runbooks: Optional[Dict[str, Any]] = Field(default=None, description="A hash mapping runbook IDs to runbook names.")
    teams: Optional[List[TeamEntity]] = None
    __properties: ClassVar[List[str]] = ["services", "functionalities", "environments", "runbooks", "teams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncidentTypeEntityTemplateValuesEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in functionalities (list)
        _items = []
        if self.functionalities:
            for _item_functionalities in self.functionalities:
                if _item_functionalities:
                    _items.append(_item_functionalities.to_dict())
            _dict['functionalities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in environments (list)
        _items = []
        if self.environments:
            for _item_environments in self.environments:
                if _item_environments:
                    _items.append(_item_environments.to_dict())
            _dict['environments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item_teams in self.teams:
                if _item_teams:
                    _items.append(_item_teams.to_dict())
            _dict['teams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncidentTypeEntityTemplateValuesEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "services": [IncidentTypeEntityTemplateImpactEntity.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "functionalities": [IncidentTypeEntityTemplateImpactEntity.from_dict(_item) for _item in obj["functionalities"]] if obj.get("functionalities") is not None else None,
            "environments": [IncidentTypeEntityTemplateImpactEntity.from_dict(_item) for _item in obj["environments"]] if obj.get("environments") is not None else None,
            "runbooks": obj.get("runbooks"),
            "teams": [TeamEntity.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None
        })
        return _obj


