# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_v1_teams_memberships_inner import PostV1TeamsMembershipsInner
from openapi_client.models.post_v1_teams_ms_teams_channel import PostV1TeamsMsTeamsChannel
from typing import Optional, Set
from typing_extensions import Self

class PostV1Teams(BaseModel):
    """
    Create a new team
    """ # noqa: E501
    name: StrictStr
    description: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    slack_channel_id: Optional[StrictStr] = Field(default=None, description="The Slack channel ID that this team is associated with")
    ms_teams_channel: Optional[PostV1TeamsMsTeamsChannel] = None
    memberships: Optional[List[PostV1TeamsMembershipsInner]] = None
    __properties: ClassVar[List[str]] = ["name", "description", "slug", "slack_channel_id", "ms_teams_channel", "memberships"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostV1Teams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ms_teams_channel
        if self.ms_teams_channel:
            _dict['ms_teams_channel'] = self.ms_teams_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in memberships (list)
        _items = []
        if self.memberships:
            for _item_memberships in self.memberships:
                if _item_memberships:
                    _items.append(_item_memberships.to_dict())
            _dict['memberships'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostV1Teams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "slug": obj.get("slug"),
            "slack_channel_id": obj.get("slack_channel_id"),
            "ms_teams_channel": PostV1TeamsMsTeamsChannel.from_dict(obj["ms_teams_channel"]) if obj.get("ms_teams_channel") is not None else None,
            "memberships": [PostV1TeamsMembershipsInner.from_dict(_item) for _item in obj["memberships"]] if obj.get("memberships") is not None else None
        })
        return _obj


