# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.runbooks_element_dynamic_select_entity import RunbooksElementDynamicSelectEntity
from openapi_client.models.runbooks_element_input_entity import RunbooksElementInputEntity
from openapi_client.models.runbooks_element_markdown_entity import RunbooksElementMarkdownEntity
from openapi_client.models.runbooks_element_textarea_entity import RunbooksElementTextareaEntity
from typing import Optional, Set
from typing_extensions import Self

class RunbooksElementEntity(BaseModel):
    """
    RunbooksElementEntity
    """ # noqa: E501
    id: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    markdown: Optional[RunbooksElementMarkdownEntity] = None
    textarea: Optional[RunbooksElementTextareaEntity] = None
    input: Optional[RunbooksElementInputEntity] = None
    plain_text: Optional[RunbooksElementMarkdownEntity] = None
    dynamic_select: Optional[RunbooksElementDynamicSelectEntity] = None
    __properties: ClassVar[List[str]] = ["id", "type", "markdown", "textarea", "input", "plain_text", "dynamic_select"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbooksElementEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of markdown
        if self.markdown:
            _dict['markdown'] = self.markdown.to_dict()
        # override the default output from pydantic by calling `to_dict()` of textarea
        if self.textarea:
            _dict['textarea'] = self.textarea.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plain_text
        if self.plain_text:
            _dict['plain_text'] = self.plain_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dynamic_select
        if self.dynamic_select:
            _dict['dynamic_select'] = self.dynamic_select.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbooksElementEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "markdown": RunbooksElementMarkdownEntity.from_dict(obj["markdown"]) if obj.get("markdown") is not None else None,
            "textarea": RunbooksElementTextareaEntity.from_dict(obj["textarea"]) if obj.get("textarea") is not None else None,
            "input": RunbooksElementInputEntity.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "plain_text": RunbooksElementMarkdownEntity.from_dict(obj["plain_text"]) if obj.get("plain_text") is not None else None,
            "dynamic_select": RunbooksElementDynamicSelectEntity.from_dict(obj["dynamic_select"]) if obj.get("dynamic_select") is not None else None
        })
        return _obj


