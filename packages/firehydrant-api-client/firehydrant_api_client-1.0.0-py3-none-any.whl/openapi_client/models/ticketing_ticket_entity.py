# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attachments_link_entity import AttachmentsLinkEntity
from openapi_client.models.author_entity import AuthorEntity
from openapi_client.models.ticketing_priority_entity import TicketingPriorityEntity
from typing import Optional, Set
from typing_extensions import Self

class TicketingTicketEntity(BaseModel):
    """
    Ticketing_TicketEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    assignees: Optional[List[AuthorEntity]] = None
    priority: Optional[TicketingPriorityEntity] = None
    created_by: Optional[AuthorEntity] = None
    attachments: Optional[List[Dict[str, Any]]] = Field(default=None, description="A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity")
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    tag_list: Optional[List[StrictStr]] = None
    incident_id: Optional[StrictStr] = Field(default=None, description="ID of incident that this ticket is related to")
    incident_name: Optional[StrictStr] = Field(default=None, description="Name of incident that this ticket is related to")
    incident_current_milestone: Optional[StrictStr] = Field(default=None, description="Milestone of incident that this ticket is related to")
    task_id: Optional[StrictStr] = Field(default=None, description="ID of task that this ticket is related to")
    due_at: Optional[datetime] = None
    link: Optional[AttachmentsLinkEntity] = None
    __properties: ClassVar[List[str]] = ["id", "summary", "description", "state", "type", "assignees", "priority", "created_by", "attachments", "created_at", "updated_at", "tag_list", "incident_id", "incident_name", "incident_current_milestone", "task_id", "due_at", "link"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['open', 'in_progress', 'cancelled', 'done']):
            raise ValueError("must be one of enum values ('open', 'in_progress', 'cancelled', 'done')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['incident', 'task', 'follow_up']):
            raise ValueError("must be one of enum values ('incident', 'task', 'follow_up')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TicketingTicketEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assignees (list)
        _items = []
        if self.assignees:
            for _item_assignees in self.assignees:
                if _item_assignees:
                    _items.append(_item_assignees.to_dict())
            _dict['assignees'] = _items
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['link'] = self.link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TicketingTicketEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "assignees": [AuthorEntity.from_dict(_item) for _item in obj["assignees"]] if obj.get("assignees") is not None else None,
            "priority": TicketingPriorityEntity.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "created_by": AuthorEntity.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "attachments": obj.get("attachments"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "tag_list": obj.get("tag_list"),
            "incident_id": obj.get("incident_id"),
            "incident_name": obj.get("incident_name"),
            "incident_current_milestone": obj.get("incident_current_milestone"),
            "task_id": obj.get("task_id"),
            "due_at": obj.get("due_at"),
            "link": AttachmentsLinkEntity.from_dict(obj["link"]) if obj.get("link") is not None else None
        })
        return _obj


