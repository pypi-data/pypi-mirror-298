# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.checklist_check_entity import ChecklistCheckEntity
from typing import Optional, Set
from typing_extensions import Self

class ChecklistTemplateEntity(BaseModel):
    """
    ChecklistTemplateEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    checks: Optional[List[ChecklistCheckEntity]] = None
    owner: Optional[TeamEntity] = None
    connected_services: Optional[List[ServiceEntity]] = Field(default=None, description="List of services that use this checklist")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "created_at", "updated_at", "checks", "owner", "connected_services"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChecklistTemplateEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in checks (list)
        _items = []
        if self.checks:
            for _item_checks in self.checks:
                if _item_checks:
                    _items.append(_item_checks.to_dict())
            _dict['checks'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in connected_services (list)
        _items = []
        if self.connected_services:
            for _item_connected_services in self.connected_services:
                if _item_connected_services:
                    _items.append(_item_connected_services.to_dict())
            _dict['connected_services'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChecklistTemplateEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "checks": [ChecklistCheckEntity.from_dict(_item) for _item in obj["checks"]] if obj.get("checks") is not None else None,
            "owner": TeamEntity.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "connected_services": [ServiceEntity.from_dict(_item) for _item in obj["connected_services"]] if obj.get("connected_services") is not None else None
        })
        return _obj

from openapi_client.models.service_entity import ServiceEntity
from openapi_client.models.team_entity import TeamEntity
# TODO: Rewrite to not use raise_errors
ChecklistTemplateEntity.model_rebuild(raise_errors=False)

