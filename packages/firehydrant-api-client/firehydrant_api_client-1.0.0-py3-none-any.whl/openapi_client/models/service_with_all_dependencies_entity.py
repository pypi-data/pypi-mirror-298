# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_child_dependency_entity import ServiceChildDependencyEntity
from openapi_client.models.service_parent_dependency_entity import ServiceParentDependencyEntity
from typing import Optional, Set
from typing_extensions import Self

class ServiceWithAllDependenciesEntity(BaseModel):
    """
    ServiceWithAllDependenciesEntity model
    """ # noqa: E501
    child_service_dependencies: Optional[List[ServiceChildDependencyEntity]] = Field(default=None, description="Services that depend on this service")
    parent_service_dependencies: Optional[List[ServiceParentDependencyEntity]] = Field(default=None, description="Services that this service is dependent on")
    service_dependencies: Optional[List[Dict[str, Any]]] = Field(default=None, description="All dependencies. Can be one of: ServiceChildDependencyEntity, ServiceParentDependencyEntity")
    __properties: ClassVar[List[str]] = ["child_service_dependencies", "parent_service_dependencies", "service_dependencies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceWithAllDependenciesEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_service_dependencies (list)
        _items = []
        if self.child_service_dependencies:
            for _item_child_service_dependencies in self.child_service_dependencies:
                if _item_child_service_dependencies:
                    _items.append(_item_child_service_dependencies.to_dict())
            _dict['child_service_dependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parent_service_dependencies (list)
        _items = []
        if self.parent_service_dependencies:
            for _item_parent_service_dependencies in self.parent_service_dependencies:
                if _item_parent_service_dependencies:
                    _items.append(_item_parent_service_dependencies.to_dict())
            _dict['parent_service_dependencies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceWithAllDependenciesEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "child_service_dependencies": [ServiceChildDependencyEntity.from_dict(_item) for _item in obj["child_service_dependencies"]] if obj.get("child_service_dependencies") is not None else None,
            "parent_service_dependencies": [ServiceParentDependencyEntity.from_dict(_item) for _item in obj["parent_service_dependencies"]] if obj.get("parent_service_dependencies") is not None else None,
            "service_dependencies": obj.get("service_dependencies")
        })
        return _obj


