# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rules_rule_entity import RulesRuleEntity
from openapi_client.models.runbooks_actions_entity import RunbooksActionsEntity
from openapi_client.models.votes_entity import VotesEntity
from typing import Optional, Set
from typing_extensions import Self

class RunbookStepEntity(BaseModel):
    """
    RunbookStepEntity
    """ # noqa: E501
    name: Optional[StrictStr] = None
    action_id: Optional[StrictStr] = None
    step_id: Optional[StrictStr] = None
    config: Optional[Dict[str, Any]] = Field(default=None, description="An unstructured object of key/value pairs describing the config settings for the step.")
    action_elements: Optional[List[Dict[str, Any]]] = Field(default=None, description="A list of action elements")
    step_elements: Optional[List[Dict[str, Any]]] = Field(default=None, description="A list of step elements")
    automatic: Optional[StrictBool] = None
    delay_duration: Optional[datetime] = None
    action: Optional[RunbooksActionsEntity] = None
    reruns: Optional[StrictBool] = None
    repeats: Optional[StrictBool] = None
    repeats_duration: Optional[datetime] = None
    votes: Optional[VotesEntity] = None
    rule: Optional[RulesRuleEntity] = None
    __properties: ClassVar[List[str]] = ["name", "action_id", "step_id", "config", "action_elements", "step_elements", "automatic", "delay_duration", "action", "reruns", "repeats", "repeats_duration", "votes", "rule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbookStepEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of votes
        if self.votes:
            _dict['votes'] = self.votes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule
        if self.rule:
            _dict['rule'] = self.rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbookStepEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "action_id": obj.get("action_id"),
            "step_id": obj.get("step_id"),
            "config": obj.get("config"),
            "action_elements": obj.get("action_elements"),
            "step_elements": obj.get("step_elements"),
            "automatic": obj.get("automatic"),
            "delay_duration": obj.get("delay_duration"),
            "action": RunbooksActionsEntity.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "reruns": obj.get("reruns"),
            "repeats": obj.get("repeats"),
            "repeats_duration": obj.get("repeats_duration"),
            "votes": VotesEntity.from_dict(obj["votes"]) if obj.get("votes") is not None else None,
            "rule": RulesRuleEntity.from_dict(obj["rule"]) if obj.get("rule") is not None else None
        })
        return _obj


