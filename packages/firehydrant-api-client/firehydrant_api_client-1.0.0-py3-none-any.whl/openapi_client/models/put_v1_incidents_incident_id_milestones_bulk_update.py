# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.put_v1_incidents_incident_id_milestones_bulk_update_milestones_inner import PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestonesInner
from typing import Optional, Set
from typing_extensions import Self

class PutV1IncidentsIncidentIdMilestonesBulkUpdate(BaseModel):
    """
    Update milestone times in bulk for a given incident. All milestone times for an incident must occur in chronological order corresponding to the configured order of milestones. If the result of this request would cause any milestone(s) to appear out of place, a 422 response will instead be returned. This includes milestones not explicitly submitted or updated in this request. 
    """ # noqa: E501
    bulk: Optional[StrictStr] = None
    milestones: List[PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestonesInner]
    __properties: ClassVar[List[str]] = ["bulk", "milestones"]

    @field_validator('bulk')
    def bulk_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true']):
            raise ValueError("must be one of enum values ('true')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutV1IncidentsIncidentIdMilestonesBulkUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in milestones (list)
        _items = []
        if self.milestones:
            for _item_milestones in self.milestones:
                if _item_milestones:
                    _items.append(_item_milestones.to_dict())
            _dict['milestones'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutV1IncidentsIncidentIdMilestonesBulkUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bulk": obj.get("bulk"),
            "milestones": [PutV1IncidentsIncidentIdMilestonesBulkUpdateMilestonesInner.from_dict(_item) for _item in obj["milestones"]] if obj.get("milestones") is not None else None
        })
        return _obj


