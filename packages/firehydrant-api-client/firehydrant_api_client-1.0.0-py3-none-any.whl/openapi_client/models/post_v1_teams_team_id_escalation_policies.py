# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_v1_teams_team_id_escalation_policies_handoff_step import PostV1TeamsTeamIdEscalationPoliciesHandoffStep
from openapi_client.models.post_v1_teams_team_id_escalation_policies_steps_inner import PostV1TeamsTeamIdEscalationPoliciesStepsInner
from typing import Optional, Set
from typing_extensions import Self

class PostV1TeamsTeamIdEscalationPolicies(BaseModel):
    """
    Create a Signals escalation policy for a team.
    """ # noqa: E501
    name: StrictStr = Field(description="The escalation policy's name.")
    description: Optional[StrictStr] = Field(default=None, description="A detailed description of the escalation policy.")
    repetitions: Optional[StrictInt] = Field(default=0, description="The number of times that the escalation policy should repeat before an alert is dropped.")
    default: Optional[StrictBool] = Field(default=False, description="Whether this escalation policy should be the default for the team.")
    steps: List[PostV1TeamsTeamIdEscalationPoliciesStepsInner] = Field(description="A list of steps that define how an alert should escalate through the policy.")
    handoff_step: Optional[PostV1TeamsTeamIdEscalationPoliciesHandoffStep] = None
    __properties: ClassVar[List[str]] = ["name", "description", "repetitions", "default", "steps", "handoff_step"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostV1TeamsTeamIdEscalationPolicies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of handoff_step
        if self.handoff_step:
            _dict['handoff_step'] = self.handoff_step.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostV1TeamsTeamIdEscalationPolicies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "repetitions": obj.get("repetitions") if obj.get("repetitions") is not None else 0,
            "default": obj.get("default") if obj.get("default") is not None else False,
            "steps": [PostV1TeamsTeamIdEscalationPoliciesStepsInner.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None,
            "handoff_step": PostV1TeamsTeamIdEscalationPoliciesHandoffStep.from_dict(obj["handoff_step"]) if obj.get("handoff_step") is not None else None
        })
        return _obj


