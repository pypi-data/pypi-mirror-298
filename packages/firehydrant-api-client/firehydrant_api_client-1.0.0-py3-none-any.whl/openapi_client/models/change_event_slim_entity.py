# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.author_entity import AuthorEntity
from openapi_client.models.environment_entry_entity import EnvironmentEntryEntity
from openapi_client.models.service_entity import ServiceEntity
from typing import Optional, Set
from typing_extensions import Self

class ChangeEventSlimEntity(BaseModel):
    """
    ChangeEventSlimEntity
    """ # noqa: E501
    id: Optional[StrictStr] = None
    summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    external_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    starts_at: Optional[datetime] = None
    ends_at: Optional[datetime] = None
    duration_ms: Optional[StrictInt] = None
    duration_iso8601: Optional[StrictStr] = None
    environments: Optional[List[EnvironmentEntryEntity]] = None
    authors: Optional[List[AuthorEntity]] = None
    labels: Optional[Dict[str, Any]] = Field(default=None, description="An object of label key and values")
    services: Optional[List[ServiceEntity]] = None
    __properties: ClassVar[List[str]] = ["id", "summary", "description", "external_id", "created_at", "updated_at", "starts_at", "ends_at", "duration_ms", "duration_iso8601", "environments", "authors", "labels", "services"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeEventSlimEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in environments (list)
        _items = []
        if self.environments:
            for _item_environments in self.environments:
                if _item_environments:
                    _items.append(_item_environments.to_dict())
            _dict['environments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authors (list)
        _items = []
        if self.authors:
            for _item_authors in self.authors:
                if _item_authors:
                    _items.append(_item_authors.to_dict())
            _dict['authors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # set to None if ends_at (nullable) is None
        # and model_fields_set contains the field
        if self.ends_at is None and "ends_at" in self.model_fields_set:
            _dict['ends_at'] = None

        # set to None if duration_ms (nullable) is None
        # and model_fields_set contains the field
        if self.duration_ms is None and "duration_ms" in self.model_fields_set:
            _dict['duration_ms'] = None

        # set to None if duration_iso8601 (nullable) is None
        # and model_fields_set contains the field
        if self.duration_iso8601 is None and "duration_iso8601" in self.model_fields_set:
            _dict['duration_iso8601'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeEventSlimEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "external_id": obj.get("external_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "starts_at": obj.get("starts_at"),
            "ends_at": obj.get("ends_at"),
            "duration_ms": obj.get("duration_ms"),
            "duration_iso8601": obj.get("duration_iso8601"),
            "environments": [EnvironmentEntryEntity.from_dict(_item) for _item in obj["environments"]] if obj.get("environments") is not None else None,
            "authors": [AuthorEntity.from_dict(_item) for _item in obj["authors"]] if obj.get("authors") is not None else None,
            "labels": obj.get("labels"),
            "services": [ServiceEntity.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None
        })
        return _obj


