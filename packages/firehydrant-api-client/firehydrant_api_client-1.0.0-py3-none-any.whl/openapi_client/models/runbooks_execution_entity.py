# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.runbooks_execution_entity_executed_for_entity import RunbooksExecutionEntityExecutedForEntity
from openapi_client.models.runbooks_execution_step_entity import RunbooksExecutionStepEntity
from openapi_client.models.slim_runbook_entity import SlimRunbookEntity
from typing import Optional, Set
from typing_extensions import Self

class RunbooksExecutionEntity(BaseModel):
    """
    Runbooks_ExecutionEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    status_reason: Optional[StrictStr] = None
    status_reason_message: Optional[StrictStr] = None
    has_been_rerun: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    created_by: Optional[StrictStr] = None
    runbook: Optional[SlimRunbookEntity] = None
    steps: Optional[RunbooksExecutionStepEntity] = None
    executed_for: Optional[RunbooksExecutionEntityExecutedForEntity] = None
    __properties: ClassVar[List[str]] = ["id", "status", "status_reason", "status_reason_message", "has_been_rerun", "created_at", "updated_at", "created_by", "runbook", "steps", "executed_for"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbooksExecutionEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of runbook
        if self.runbook:
            _dict['runbook'] = self.runbook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of steps
        if self.steps:
            _dict['steps'] = self.steps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of executed_for
        if self.executed_for:
            _dict['executed_for'] = self.executed_for.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbooksExecutionEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "status_reason": obj.get("status_reason"),
            "status_reason_message": obj.get("status_reason_message"),
            "has_been_rerun": obj.get("has_been_rerun"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "created_by": obj.get("created_by"),
            "runbook": SlimRunbookEntity.from_dict(obj["runbook"]) if obj.get("runbook") is not None else None,
            "steps": RunbooksExecutionStepEntity.from_dict(obj["steps"]) if obj.get("steps") is not None else None,
            "executed_for": RunbooksExecutionEntityExecutedForEntity.from_dict(obj["executed_for"]) if obj.get("executed_for") is not None else None
        })
        return _obj


