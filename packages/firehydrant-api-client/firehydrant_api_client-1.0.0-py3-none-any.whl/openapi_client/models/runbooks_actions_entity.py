# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.integrations_integration_entity import IntegrationsIntegrationEntity
from openapi_client.models.runbooks_action_config_entity import RunbooksActionConfigEntity
from typing import Optional, Set
from typing_extensions import Self

class RunbooksActionsEntity(BaseModel):
    """
    RunbooksActionsEntity
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    config: Optional[RunbooksActionConfigEntity] = None
    category: Optional[StrictStr] = None
    prerequisites: Optional[Dict[str, Any]] = None
    integration: Optional[IntegrationsIntegrationEntity] = None
    supported_runbook_types: Optional[List[StrictStr]] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    automatable: Optional[StrictBool] = None
    rerunnable: Optional[StrictBool] = None
    repeatable: Optional[StrictBool] = None
    default_logic: Optional[Dict[str, Any]] = None
    default_rule_data: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "slug", "description", "config", "category", "prerequisites", "integration", "supported_runbook_types", "created_at", "updated_at", "automatable", "rerunnable", "repeatable", "default_logic", "default_rule_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbooksActionsEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integration
        if self.integration:
            _dict['integration'] = self.integration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbooksActionsEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "description": obj.get("description"),
            "config": RunbooksActionConfigEntity.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "category": obj.get("category"),
            "prerequisites": obj.get("prerequisites"),
            "integration": IntegrationsIntegrationEntity.from_dict(obj["integration"]) if obj.get("integration") is not None else None,
            "supported_runbook_types": obj.get("supported_runbook_types"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "automatable": obj.get("automatable"),
            "rerunnable": obj.get("rerunnable"),
            "repeatable": obj.get("repeatable"),
            "default_logic": obj.get("default_logic"),
            "default_rule_data": obj.get("default_rule_data")
        })
        return _obj


