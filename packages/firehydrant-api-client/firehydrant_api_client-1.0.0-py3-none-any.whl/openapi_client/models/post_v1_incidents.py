# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_v1_incidents_custom_fields_inner import PostV1IncidentsCustomFieldsInner
from openapi_client.models.post_v1_incidents_impacts_inner import PostV1IncidentsImpactsInner
from openapi_client.models.post_v1_incidents_milestones_inner import PostV1IncidentsMilestonesInner
from typing import Optional, Set
from typing_extensions import Self

class PostV1Incidents(BaseModel):
    """
    Create a new incident
    """ # noqa: E501
    name: StrictStr
    summary: Optional[StrictStr] = None
    customer_impact_summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    priority: Optional[StrictStr] = None
    severity: Optional[StrictStr] = None
    severity_condition_id: Optional[StrictStr] = None
    severity_impact_id: Optional[StrictStr] = None
    alert_ids: Optional[List[StrictStr]] = Field(default=None, description="List of alert IDs that this incident should be associated to")
    labels: Optional[Dict[str, Any]] = Field(default=None, description="Key:value pairs to track custom data for the incident")
    runbook_ids: Optional[List[StrictStr]] = Field(default=None, description="List of ids of Runbooks to attach to this incident. Foregoes any conditions these Runbooks may have guarding automatic attachment.")
    tag_list: Optional[List[StrictStr]] = Field(default=None, description="List of tags for the incident")
    impacts: Optional[List[PostV1IncidentsImpactsInner]] = Field(default=None, description="An array of impacted infrastructure")
    milestones: Optional[List[PostV1IncidentsMilestonesInner]] = Field(default=None, description="An array of milestones to set on an incident. This can be used to create an already-resolved incident.")
    restricted: Optional[StrictBool] = None
    team_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of teams you wish to assign to this incident.")
    custom_fields: Optional[List[PostV1IncidentsCustomFieldsInner]] = Field(default=None, description="An array of custom fields to set on the incident.")
    external_links: Optional[StrictStr] = None
    skip_incident_type_values: Optional[StrictBool] = Field(default=False, description="If true, the incident type values will not be copied to the incident. This is useful when creating an incident from an incident type, but you want to set the values manually.")
    __properties: ClassVar[List[str]] = ["name", "summary", "customer_impact_summary", "description", "priority", "severity", "severity_condition_id", "severity_impact_id", "alert_ids", "labels", "runbook_ids", "tag_list", "impacts", "milestones", "restricted", "team_ids", "custom_fields", "external_links", "skip_incident_type_values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostV1Incidents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in impacts (list)
        _items = []
        if self.impacts:
            for _item_impacts in self.impacts:
                if _item_impacts:
                    _items.append(_item_impacts.to_dict())
            _dict['impacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in milestones (list)
        _items = []
        if self.milestones:
            for _item_milestones in self.milestones:
                if _item_milestones:
                    _items.append(_item_milestones.to_dict())
            _dict['milestones'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostV1Incidents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "summary": obj.get("summary"),
            "customer_impact_summary": obj.get("customer_impact_summary"),
            "description": obj.get("description"),
            "priority": obj.get("priority"),
            "severity": obj.get("severity"),
            "severity_condition_id": obj.get("severity_condition_id"),
            "severity_impact_id": obj.get("severity_impact_id"),
            "alert_ids": obj.get("alert_ids"),
            "labels": obj.get("labels"),
            "runbook_ids": obj.get("runbook_ids"),
            "tag_list": obj.get("tag_list"),
            "impacts": [PostV1IncidentsImpactsInner.from_dict(_item) for _item in obj["impacts"]] if obj.get("impacts") is not None else None,
            "milestones": [PostV1IncidentsMilestonesInner.from_dict(_item) for _item in obj["milestones"]] if obj.get("milestones") is not None else None,
            "restricted": obj.get("restricted"),
            "team_ids": obj.get("team_ids"),
            "custom_fields": [PostV1IncidentsCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "external_links": obj.get("external_links"),
            "skip_incident_type_values": obj.get("skip_incident_type_values") if obj.get("skip_incident_type_values") is not None else False
        })
        return _obj


