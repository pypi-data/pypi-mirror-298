# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_v1_scheduled_maintenances_impacts_inner import PostV1ScheduledMaintenancesImpactsInner
from openapi_client.models.post_v1_scheduled_maintenances_status_pages_inner import PostV1ScheduledMaintenancesStatusPagesInner
from typing import Optional, Set
from typing_extensions import Self

class PostV1ScheduledMaintenances(BaseModel):
    """
    Create a new scheduled maintenance event
    """ # noqa: E501
    name: StrictStr
    starts_at: datetime = Field(description="ISO8601 timestamp for the start time of the scheduled maintenance")
    ends_at: datetime = Field(description="ISO8601 timestamp for the end time of the scheduled maintenance")
    summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A json object of label keys and values")
    status_pages: Optional[List[PostV1ScheduledMaintenancesStatusPagesInner]] = Field(default=None, description="An array of status pages to display this maintenance on")
    impacts: Optional[List[PostV1ScheduledMaintenancesImpactsInner]] = Field(default=None, description="An array of impact/condition combinations")
    __properties: ClassVar[List[str]] = ["name", "starts_at", "ends_at", "summary", "description", "labels", "status_pages", "impacts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostV1ScheduledMaintenances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in status_pages (list)
        _items = []
        if self.status_pages:
            for _item_status_pages in self.status_pages:
                if _item_status_pages:
                    _items.append(_item_status_pages.to_dict())
            _dict['status_pages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in impacts (list)
        _items = []
        if self.impacts:
            for _item_impacts in self.impacts:
                if _item_impacts:
                    _items.append(_item_impacts.to_dict())
            _dict['impacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostV1ScheduledMaintenances from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "starts_at": obj.get("starts_at"),
            "ends_at": obj.get("ends_at"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "labels": obj.get("labels"),
            "status_pages": [PostV1ScheduledMaintenancesStatusPagesInner.from_dict(_item) for _item in obj["status_pages"]] if obj.get("status_pages") is not None else None,
            "impacts": [PostV1ScheduledMaintenancesImpactsInner.from_dict(_item) for _item in obj["impacts"]] if obj.get("impacts") is not None else None
        })
        return _obj


