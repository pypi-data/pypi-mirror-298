# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.integrations_connection_entity import IntegrationsConnectionEntity
from openapi_client.models.integrations_integration_entity_logo_entity import IntegrationsIntegrationEntityLogoEntity
from typing import Optional, Set
from typing_extensions import Self

class IntegrationsIntegrationEntity(BaseModel):
    """
    Integrations_IntegrationEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    setup_url: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    connections: Optional[IntegrationsConnectionEntity] = None
    enabled: Optional[StrictBool] = None
    installed: Optional[StrictBool] = None
    deprecated: Optional[StrictBool] = None
    logo: Optional[IntegrationsIntegrationEntityLogoEntity] = None
    nat_ip: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "slug", "name", "description", "setup_url", "created_at", "connections", "enabled", "installed", "deprecated", "logo", "nat_ip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationsIntegrationEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connections
        if self.connections:
            _dict['connections'] = self.connections.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationsIntegrationEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "slug": obj.get("slug"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "setup_url": obj.get("setup_url"),
            "created_at": obj.get("created_at"),
            "connections": IntegrationsConnectionEntity.from_dict(obj["connections"]) if obj.get("connections") is not None else None,
            "enabled": obj.get("enabled"),
            "installed": obj.get("installed"),
            "deprecated": obj.get("deprecated"),
            "logo": IntegrationsIntegrationEntityLogoEntity.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "nat_ip": obj.get("nat_ip")
        })
        return _obj


