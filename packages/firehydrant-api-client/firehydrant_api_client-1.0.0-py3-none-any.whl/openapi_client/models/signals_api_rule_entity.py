# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.author_entity import AuthorEntity
from openapi_client.models.signals_api_target_entity import SignalsAPITargetEntity
from openapi_client.models.succinct_entity import SuccinctEntity
from typing import Optional, Set
from typing_extensions import Self

class SignalsAPIRuleEntity(BaseModel):
    """
    SignalsAPIRuleEntity
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    expression: Optional[StrictStr] = None
    team_id: Optional[StrictStr] = None
    target: Optional[SignalsAPITargetEntity] = None
    created_by: Optional[AuthorEntity] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    incident_type: Optional[SuccinctEntity] = None
    notification_priority_override: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "expression", "team_id", "target", "created_by", "created_at", "updated_at", "incident_type", "notification_priority_override"]

    @field_validator('notification_priority_override')
    def notification_priority_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HIGH', 'MEDIUM', 'LOW']):
            raise ValueError("must be one of enum values ('HIGH', 'MEDIUM', 'LOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignalsAPIRuleEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incident_type
        if self.incident_type:
            _dict['incident_type'] = self.incident_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignalsAPIRuleEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "expression": obj.get("expression"),
            "team_id": obj.get("team_id"),
            "target": SignalsAPITargetEntity.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "created_by": AuthorEntity.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "incident_type": SuccinctEntity.from_dict(obj["incident_type"]) if obj.get("incident_type") is not None else None,
            "notification_priority_override": obj.get("notification_priority_override")
        })
        return _obj


