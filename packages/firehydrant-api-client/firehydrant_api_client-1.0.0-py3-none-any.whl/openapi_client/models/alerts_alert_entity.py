# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alerts_siren_event_entity import AlertsSirenEventEntity
from openapi_client.models.public_apiv1_incidents_succinct_entity import PublicAPIV1IncidentsSuccinctEntity
from openapi_client.models.signals_api_rule_entity import SignalsAPIRuleEntity
from openapi_client.models.succinct_entity import SuccinctEntity
from typing import Optional, Set
from typing_extensions import Self

class AlertsAlertEntity(BaseModel):
    """
    Alerts_AlertEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    priority: Optional[StrictStr] = None
    integration_name: Optional[StrictStr] = None
    starts_at: Optional[datetime] = None
    ends_at: Optional[datetime] = None
    duration_ms: Optional[StrictInt] = None
    duration_iso8601: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    remote_id: Optional[StrictStr] = None
    remote_url: Optional[StrictStr] = None
    labels: Optional[Dict[str, Any]] = Field(default=None, description="Arbitrary key:value pairs of labels.")
    environments: Optional[List[SuccinctEntity]] = None
    services: Optional[List[SuccinctEntity]] = None
    tags: Optional[List[StrictStr]] = None
    source_icon: Optional[StrictStr] = None
    signal_id: Optional[StrictStr] = None
    signal_rule: Optional[SignalsAPIRuleEntity] = None
    team_name: Optional[StrictStr] = None
    team_id: Optional[StrictStr] = None
    position: Optional[StrictInt] = None
    incidents: Optional[List[PublicAPIV1IncidentsSuccinctEntity]] = None
    events: Optional[List[AlertsSirenEventEntity]] = None
    is_expired: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "summary", "description", "priority", "integration_name", "starts_at", "ends_at", "duration_ms", "duration_iso8601", "status", "remote_id", "remote_url", "labels", "environments", "services", "tags", "source_icon", "signal_id", "signal_rule", "team_name", "team_id", "position", "incidents", "events", "is_expired"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertsAlertEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in environments (list)
        _items = []
        if self.environments:
            for _item_environments in self.environments:
                if _item_environments:
                    _items.append(_item_environments.to_dict())
            _dict['environments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of signal_rule
        if self.signal_rule:
            _dict['signal_rule'] = self.signal_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in incidents (list)
        _items = []
        if self.incidents:
            for _item_incidents in self.incidents:
                if _item_incidents:
                    _items.append(_item_incidents.to_dict())
            _dict['incidents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # set to None if ends_at (nullable) is None
        # and model_fields_set contains the field
        if self.ends_at is None and "ends_at" in self.model_fields_set:
            _dict['ends_at'] = None

        # set to None if duration_ms (nullable) is None
        # and model_fields_set contains the field
        if self.duration_ms is None and "duration_ms" in self.model_fields_set:
            _dict['duration_ms'] = None

        # set to None if duration_iso8601 (nullable) is None
        # and model_fields_set contains the field
        if self.duration_iso8601 is None and "duration_iso8601" in self.model_fields_set:
            _dict['duration_iso8601'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertsAlertEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "priority": obj.get("priority"),
            "integration_name": obj.get("integration_name"),
            "starts_at": obj.get("starts_at"),
            "ends_at": obj.get("ends_at"),
            "duration_ms": obj.get("duration_ms"),
            "duration_iso8601": obj.get("duration_iso8601"),
            "status": obj.get("status"),
            "remote_id": obj.get("remote_id"),
            "remote_url": obj.get("remote_url"),
            "labels": obj.get("labels"),
            "environments": [SuccinctEntity.from_dict(_item) for _item in obj["environments"]] if obj.get("environments") is not None else None,
            "services": [SuccinctEntity.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "tags": obj.get("tags"),
            "source_icon": obj.get("source_icon"),
            "signal_id": obj.get("signal_id"),
            "signal_rule": SignalsAPIRuleEntity.from_dict(obj["signal_rule"]) if obj.get("signal_rule") is not None else None,
            "team_name": obj.get("team_name"),
            "team_id": obj.get("team_id"),
            "position": obj.get("position"),
            "incidents": [PublicAPIV1IncidentsSuccinctEntity.from_dict(_item) for _item in obj["incidents"]] if obj.get("incidents") is not None else None,
            "events": [AlertsSirenEventEntity.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "is_expired": obj.get("is_expired")
        })
        return _obj


