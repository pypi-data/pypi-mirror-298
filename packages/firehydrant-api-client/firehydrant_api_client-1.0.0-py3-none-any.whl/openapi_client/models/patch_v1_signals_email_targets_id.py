# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_v1_signals_email_targets_target import PostV1SignalsEmailTargetsTarget
from typing import Optional, Set
from typing_extensions import Self

class PatchV1SignalsEmailTargetsId(BaseModel):
    """
    Update a Signals email target by ID
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The email target's name.")
    slug: Optional[StrictStr] = Field(default=None, description="The email address that will be listening to events.")
    description: Optional[StrictStr] = Field(default=None, description="A detailed description of the email target.")
    target: Optional[PostV1SignalsEmailTargetsTarget] = None
    allowed_senders: Optional[List[StrictStr]] = Field(default=None, description="A list of email addresses that are allowed to send events to the target. Must be exact match.")
    status_cel: Optional[StrictStr] = Field(default=None, description="The CEL expression that defines the status of an incoming email that is sent to the target.")
    level_cel: Optional[StrictStr] = Field(default=None, description="The CEL expression that defines the level of an incoming email that is sent to the target.")
    rules: Optional[List[StrictStr]] = Field(default=None, description="A list of CEL expressions that should be evaluated and matched to determine if the target should be notified.")
    rule_matching_strategy: Optional[StrictStr] = Field(default=None, description="Whether or not all rules must match, or if only one rule must match.")
    __properties: ClassVar[List[str]] = ["name", "slug", "description", "target", "allowed_senders", "status_cel", "level_cel", "rules", "rule_matching_strategy"]

    @field_validator('rule_matching_strategy')
    def rule_matching_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'any']):
            raise ValueError("must be one of enum values ('all', 'any')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchV1SignalsEmailTargetsId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchV1SignalsEmailTargetsId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "description": obj.get("description"),
            "target": PostV1SignalsEmailTargetsTarget.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "allowed_senders": obj.get("allowed_senders"),
            "status_cel": obj.get("status_cel"),
            "level_cel": obj.get("level_cel"),
            "rules": obj.get("rules"),
            "rule_matching_strategy": obj.get("rule_matching_strategy")
        })
        return _obj


