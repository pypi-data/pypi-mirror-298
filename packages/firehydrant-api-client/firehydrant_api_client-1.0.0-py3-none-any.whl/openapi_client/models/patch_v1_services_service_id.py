# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.patch_v1_services_service_id_checklists_inner import PatchV1ServicesServiceIdChecklistsInner
from openapi_client.models.patch_v1_services_service_id_external_resources_inner import PatchV1ServicesServiceIdExternalResourcesInner
from openapi_client.models.patch_v1_services_service_id_functionalities_inner import PatchV1ServicesServiceIdFunctionalitiesInner
from openapi_client.models.patch_v1_services_service_id_links_inner import PatchV1ServicesServiceIdLinksInner
from openapi_client.models.patch_v1_services_service_id_teams_inner import PatchV1ServicesServiceIdTeamsInner
from openapi_client.models.post_v1_services_owner import PostV1ServicesOwner
from typing import Optional, Set
from typing_extensions import Self

class PatchV1ServicesServiceId(BaseModel):
    """
    Update a services attributes, you may also add or remove functionalities from the service as well. Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values. 
    """ # noqa: E501
    alert_on_add: Optional[StrictBool] = None
    auto_add_responding_team: Optional[StrictBool] = None
    checklists: Optional[List[PatchV1ServicesServiceIdChecklistsInner]] = Field(default=None, description="Array of checklist IDs to attach to the service")
    description: Optional[StrictStr] = None
    external_resources: Optional[List[PatchV1ServicesServiceIdExternalResourcesInner]] = Field(default=None, description="An array of external resources to attach to this service.")
    functionalities: Optional[List[PatchV1ServicesServiceIdFunctionalitiesInner]] = Field(default=None, description="An array of functionalities")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A hash of label keys and values")
    links: Optional[List[PatchV1ServicesServiceIdLinksInner]] = Field(default=None, description="An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.")
    name: Optional[StrictStr] = None
    owner: Optional[PostV1ServicesOwner] = None
    remove_owner: Optional[StrictBool] = Field(default=None, description="If you are trying to remove a team as an owner from a service, set this to 'true'")
    remove_remaining_checklists: Optional[StrictBool] = Field(default=None, description="If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists")
    remove_remaining_external_resources: Optional[StrictBool] = Field(default=None, description="If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources")
    remove_remaining_functionalities: Optional[StrictBool] = Field(default=None, description="If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities")
    remove_remaining_teams: Optional[StrictBool] = Field(default=None, description="If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams")
    service_tier: Optional[StrictInt] = Field(default=None, description="Integer representing service tier")
    teams: Optional[List[PatchV1ServicesServiceIdTeamsInner]] = Field(default=None, description="An array of teams to attach to this service.")
    __properties: ClassVar[List[str]] = ["alert_on_add", "auto_add_responding_team", "checklists", "description", "external_resources", "functionalities", "labels", "links", "name", "owner", "remove_owner", "remove_remaining_checklists", "remove_remaining_external_resources", "remove_remaining_functionalities", "remove_remaining_teams", "service_tier", "teams"]

    @field_validator('service_tier')
    def service_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchV1ServicesServiceId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in checklists (list)
        _items = []
        if self.checklists:
            for _item_checklists in self.checklists:
                if _item_checklists:
                    _items.append(_item_checklists.to_dict())
            _dict['checklists'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in external_resources (list)
        _items = []
        if self.external_resources:
            for _item_external_resources in self.external_resources:
                if _item_external_resources:
                    _items.append(_item_external_resources.to_dict())
            _dict['external_resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in functionalities (list)
        _items = []
        if self.functionalities:
            for _item_functionalities in self.functionalities:
                if _item_functionalities:
                    _items.append(_item_functionalities.to_dict())
            _dict['functionalities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item_teams in self.teams:
                if _item_teams:
                    _items.append(_item_teams.to_dict())
            _dict['teams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchV1ServicesServiceId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alert_on_add": obj.get("alert_on_add"),
            "auto_add_responding_team": obj.get("auto_add_responding_team"),
            "checklists": [PatchV1ServicesServiceIdChecklistsInner.from_dict(_item) for _item in obj["checklists"]] if obj.get("checklists") is not None else None,
            "description": obj.get("description"),
            "external_resources": [PatchV1ServicesServiceIdExternalResourcesInner.from_dict(_item) for _item in obj["external_resources"]] if obj.get("external_resources") is not None else None,
            "functionalities": [PatchV1ServicesServiceIdFunctionalitiesInner.from_dict(_item) for _item in obj["functionalities"]] if obj.get("functionalities") is not None else None,
            "labels": obj.get("labels"),
            "links": [PatchV1ServicesServiceIdLinksInner.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "name": obj.get("name"),
            "owner": PostV1ServicesOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "remove_owner": obj.get("remove_owner"),
            "remove_remaining_checklists": obj.get("remove_remaining_checklists"),
            "remove_remaining_external_resources": obj.get("remove_remaining_external_resources"),
            "remove_remaining_functionalities": obj.get("remove_remaining_functionalities"),
            "remove_remaining_teams": obj.get("remove_remaining_teams"),
            "service_tier": obj.get("service_tier"),
            "teams": [PatchV1ServicesServiceIdTeamsInner.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None
        })
        return _obj


