# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.actor_entity import ActorEntity
from openapi_client.models.runbooks_webhook_delivery_entity import RunbooksWebhookDeliveryEntity
from typing import Optional, Set
from typing_extensions import Self

class RunbooksExecutionStepExecutionEntity(BaseModel):
    """
    RunbooksExecutionStepExecutionEntity
    """ # noqa: E501
    state: Optional[StrictStr] = None
    data: Optional[Dict[str, Any]] = None
    performed_by: Optional[ActorEntity] = None
    performed_at: Optional[datetime] = None
    scheduled_for: Optional[datetime] = None
    error: Optional[StrictStr] = None
    webhook_delivery: Optional[RunbooksWebhookDeliveryEntity] = None
    __properties: ClassVar[List[str]] = ["state", "data", "performed_by", "performed_at", "scheduled_for", "error", "webhook_delivery"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['initial', 'pending', 'scheduled', 'started', 'dismissed', 'completed', 'errored']):
            raise ValueError("must be one of enum values ('initial', 'pending', 'scheduled', 'started', 'dismissed', 'completed', 'errored')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbooksExecutionStepExecutionEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of performed_by
        if self.performed_by:
            _dict['performed_by'] = self.performed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webhook_delivery
        if self.webhook_delivery:
            _dict['webhook_delivery'] = self.webhook_delivery.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbooksExecutionStepExecutionEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "state": obj.get("state"),
            "data": obj.get("data"),
            "performed_by": ActorEntity.from_dict(obj["performed_by"]) if obj.get("performed_by") is not None else None,
            "performed_at": obj.get("performed_at"),
            "scheduled_for": obj.get("scheduled_for"),
            "error": obj.get("error"),
            "webhook_delivery": RunbooksWebhookDeliveryEntity.from_dict(obj["webhook_delivery"]) if obj.get("webhook_delivery") is not None else None
        })
        return _obj


