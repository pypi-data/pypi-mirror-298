# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.author_entity import AuthorEntity
from firehydrant_api_client.models.conversations_api_entities_reference import ConversationsAPIEntitiesReference
from firehydrant_api_client.models.custom_fields_field_value import CustomFieldsFieldValue
from firehydrant_api_client.models.event_note_entity import EventNoteEntity
from firehydrant_api_client.models.incident_entity_field_requirement_entity import IncidentEntityFieldRequirementEntity
from firehydrant_api_client.models.incidents_channel_entity import IncidentsChannelEntity
from firehydrant_api_client.models.incidents_conference_bridge_entity import IncidentsConferenceBridgeEntity
from firehydrant_api_client.models.incidents_context_object_entity import IncidentsContextObjectEntity
from firehydrant_api_client.models.incidents_impact_entity import IncidentsImpactEntity
from firehydrant_api_client.models.incidents_milestone_entity import IncidentsMilestoneEntity
from firehydrant_api_client.models.incidents_role_assignment_entity import IncidentsRoleAssignmentEntity
from firehydrant_api_client.models.incidents_status_page_entity import IncidentsStatusPageEntity
from firehydrant_api_client.models.organization_entity import OrganizationEntity
from firehydrant_api_client.models.severity_matrix_condition_entity import SeverityMatrixConditionEntity
from firehydrant_api_client.models.severity_matrix_impact_entity import SeverityMatrixImpactEntity
from firehydrant_api_client.models.succinct_entity import SuccinctEntity
from firehydrant_api_client.models.ticketing_ticket_entity import TicketingTicketEntity
from typing import Optional, Set
from typing_extensions import Self

class IncidentEntity(BaseModel):
    """
    IncidentEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="UUID of the Incident")
    name: Optional[StrictStr] = Field(default=None, description="Name of the incident")
    created_at: Optional[datetime] = Field(default=None, description="The time the incident was opened")
    started_at: Optional[datetime] = Field(default=None, description="The time the incident started")
    discarded_at: Optional[datetime] = Field(default=None, description="The time the incident was archived")
    summary: Optional[StrictStr] = None
    customer_impact_summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    current_milestone: Optional[StrictStr] = Field(default=None, description="The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.")
    number: Optional[StrictInt] = Field(default=None, description="Incident number")
    priority: Optional[StrictStr] = None
    severity: Optional[StrictStr] = None
    severity_color: Optional[StrictStr] = None
    severity_impact: Optional[StrictStr] = None
    severity_condition: Optional[StrictStr] = None
    tag_list: Optional[List[StrictStr]] = None
    severity_impact_object: Optional[SeverityMatrixImpactEntity] = None
    severity_condition_object: Optional[SeverityMatrixConditionEntity] = None
    private_id: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = None
    milestones: Optional[List[IncidentsMilestoneEntity]] = None
    active: Optional[StrictBool] = None
    labels: Optional[Dict[str, Any]] = Field(default=None, description="A key/value of labels")
    role_assignments: Optional[List[IncidentsRoleAssignmentEntity]] = None
    status_pages: Optional[List[IncidentsStatusPageEntity]] = None
    incident_url: Optional[StrictStr] = None
    private_status_page_url: Optional[StrictStr] = None
    organization: Optional[OrganizationEntity] = None
    customers_impacted: Optional[StrictInt] = None
    monetary_impact: Optional[StrictInt] = None
    monetary_impact_cents: Optional[StrictInt] = None
    last_update: Optional[StrictStr] = None
    last_note: Optional[EventNoteEntity] = None
    report_id: Optional[StrictStr] = None
    ai_incident_summary: Optional[StrictStr] = None
    services: Optional[List[SuccinctEntity]] = None
    environments: Optional[List[SuccinctEntity]] = None
    functionalities: Optional[List[SuccinctEntity]] = None
    channel_name: Optional[StrictStr] = None
    channel_reference: Optional[StrictStr] = None
    channel_id: Optional[StrictStr] = None
    channel_status: Optional[StrictStr] = Field(default=None, description="inoperative: 0, operational: 1, archived: 2")
    incident_tickets: Optional[List[TicketingTicketEntity]] = None
    ticket: Optional[TicketingTicketEntity] = None
    impacts: Optional[List[IncidentsImpactEntity]] = None
    conference_bridges: Optional[List[IncidentsConferenceBridgeEntity]] = None
    incident_channels: Optional[List[IncidentsChannelEntity]] = None
    retro_exports: Optional[List[Dict[str, Any]]] = Field(default=None, description="A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity")
    created_by: Optional[AuthorEntity] = None
    context_object: Optional[IncidentsContextObjectEntity] = None
    team_assignments: Optional[List[IncidentsTeamAssignmentEntity]] = None
    conversations: Optional[List[ConversationsAPIEntitiesReference]] = None
    custom_fields: Optional[List[CustomFieldsFieldValue]] = None
    field_requirements: Optional[List[IncidentEntityFieldRequirementEntity]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "created_at", "started_at", "discarded_at", "summary", "customer_impact_summary", "description", "current_milestone", "number", "priority", "severity", "severity_color", "severity_impact", "severity_condition", "tag_list", "severity_impact_object", "severity_condition_object", "private_id", "organization_id", "milestones", "active", "labels", "role_assignments", "status_pages", "incident_url", "private_status_page_url", "organization", "customers_impacted", "monetary_impact", "monetary_impact_cents", "last_update", "last_note", "report_id", "ai_incident_summary", "services", "environments", "functionalities", "channel_name", "channel_reference", "channel_id", "channel_status", "incident_tickets", "ticket", "impacts", "conference_bridges", "incident_channels", "retro_exports", "created_by", "context_object", "team_assignments", "conversations", "custom_fields", "field_requirements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncidentEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of severity_impact_object
        if self.severity_impact_object:
            _dict['severity_impact_object'] = self.severity_impact_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of severity_condition_object
        if self.severity_condition_object:
            _dict['severity_condition_object'] = self.severity_condition_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in milestones (list)
        _items = []
        if self.milestones:
            for _item_milestones in self.milestones:
                if _item_milestones:
                    _items.append(_item_milestones.to_dict())
            _dict['milestones'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in role_assignments (list)
        _items = []
        if self.role_assignments:
            for _item_role_assignments in self.role_assignments:
                if _item_role_assignments:
                    _items.append(_item_role_assignments.to_dict())
            _dict['role_assignments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in status_pages (list)
        _items = []
        if self.status_pages:
            for _item_status_pages in self.status_pages:
                if _item_status_pages:
                    _items.append(_item_status_pages.to_dict())
            _dict['status_pages'] = _items
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_note
        if self.last_note:
            _dict['last_note'] = self.last_note.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in environments (list)
        _items = []
        if self.environments:
            for _item_environments in self.environments:
                if _item_environments:
                    _items.append(_item_environments.to_dict())
            _dict['environments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in functionalities (list)
        _items = []
        if self.functionalities:
            for _item_functionalities in self.functionalities:
                if _item_functionalities:
                    _items.append(_item_functionalities.to_dict())
            _dict['functionalities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in incident_tickets (list)
        _items = []
        if self.incident_tickets:
            for _item_incident_tickets in self.incident_tickets:
                if _item_incident_tickets:
                    _items.append(_item_incident_tickets.to_dict())
            _dict['incident_tickets'] = _items
        # override the default output from pydantic by calling `to_dict()` of ticket
        if self.ticket:
            _dict['ticket'] = self.ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in impacts (list)
        _items = []
        if self.impacts:
            for _item_impacts in self.impacts:
                if _item_impacts:
                    _items.append(_item_impacts.to_dict())
            _dict['impacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conference_bridges (list)
        _items = []
        if self.conference_bridges:
            for _item_conference_bridges in self.conference_bridges:
                if _item_conference_bridges:
                    _items.append(_item_conference_bridges.to_dict())
            _dict['conference_bridges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in incident_channels (list)
        _items = []
        if self.incident_channels:
            for _item_incident_channels in self.incident_channels:
                if _item_incident_channels:
                    _items.append(_item_incident_channels.to_dict())
            _dict['incident_channels'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context_object
        if self.context_object:
            _dict['context_object'] = self.context_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in team_assignments (list)
        _items = []
        if self.team_assignments:
            for _item_team_assignments in self.team_assignments:
                if _item_team_assignments:
                    _items.append(_item_team_assignments.to_dict())
            _dict['team_assignments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conversations (list)
        _items = []
        if self.conversations:
            for _item_conversations in self.conversations:
                if _item_conversations:
                    _items.append(_item_conversations.to_dict())
            _dict['conversations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in field_requirements (list)
        _items = []
        if self.field_requirements:
            for _item_field_requirements in self.field_requirements:
                if _item_field_requirements:
                    _items.append(_item_field_requirements.to_dict())
            _dict['field_requirements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncidentEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created_at": obj.get("created_at"),
            "started_at": obj.get("started_at"),
            "discarded_at": obj.get("discarded_at"),
            "summary": obj.get("summary"),
            "customer_impact_summary": obj.get("customer_impact_summary"),
            "description": obj.get("description"),
            "current_milestone": obj.get("current_milestone"),
            "number": obj.get("number"),
            "priority": obj.get("priority"),
            "severity": obj.get("severity"),
            "severity_color": obj.get("severity_color"),
            "severity_impact": obj.get("severity_impact"),
            "severity_condition": obj.get("severity_condition"),
            "tag_list": obj.get("tag_list"),
            "severity_impact_object": SeverityMatrixImpactEntity.from_dict(obj["severity_impact_object"]) if obj.get("severity_impact_object") is not None else None,
            "severity_condition_object": SeverityMatrixConditionEntity.from_dict(obj["severity_condition_object"]) if obj.get("severity_condition_object") is not None else None,
            "private_id": obj.get("private_id"),
            "organization_id": obj.get("organization_id"),
            "milestones": [IncidentsMilestoneEntity.from_dict(_item) for _item in obj["milestones"]] if obj.get("milestones") is not None else None,
            "active": obj.get("active"),
            "labels": obj.get("labels"),
            "role_assignments": [IncidentsRoleAssignmentEntity.from_dict(_item) for _item in obj["role_assignments"]] if obj.get("role_assignments") is not None else None,
            "status_pages": [IncidentsStatusPageEntity.from_dict(_item) for _item in obj["status_pages"]] if obj.get("status_pages") is not None else None,
            "incident_url": obj.get("incident_url"),
            "private_status_page_url": obj.get("private_status_page_url"),
            "organization": OrganizationEntity.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "customers_impacted": obj.get("customers_impacted"),
            "monetary_impact": obj.get("monetary_impact"),
            "monetary_impact_cents": obj.get("monetary_impact_cents"),
            "last_update": obj.get("last_update"),
            "last_note": EventNoteEntity.from_dict(obj["last_note"]) if obj.get("last_note") is not None else None,
            "report_id": obj.get("report_id"),
            "ai_incident_summary": obj.get("ai_incident_summary"),
            "services": [SuccinctEntity.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "environments": [SuccinctEntity.from_dict(_item) for _item in obj["environments"]] if obj.get("environments") is not None else None,
            "functionalities": [SuccinctEntity.from_dict(_item) for _item in obj["functionalities"]] if obj.get("functionalities") is not None else None,
            "channel_name": obj.get("channel_name"),
            "channel_reference": obj.get("channel_reference"),
            "channel_id": obj.get("channel_id"),
            "channel_status": obj.get("channel_status"),
            "incident_tickets": [TicketingTicketEntity.from_dict(_item) for _item in obj["incident_tickets"]] if obj.get("incident_tickets") is not None else None,
            "ticket": TicketingTicketEntity.from_dict(obj["ticket"]) if obj.get("ticket") is not None else None,
            "impacts": [IncidentsImpactEntity.from_dict(_item) for _item in obj["impacts"]] if obj.get("impacts") is not None else None,
            "conference_bridges": [IncidentsConferenceBridgeEntity.from_dict(_item) for _item in obj["conference_bridges"]] if obj.get("conference_bridges") is not None else None,
            "incident_channels": [IncidentsChannelEntity.from_dict(_item) for _item in obj["incident_channels"]] if obj.get("incident_channels") is not None else None,
            "retro_exports": obj.get("retro_exports"),
            "created_by": AuthorEntity.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "context_object": IncidentsContextObjectEntity.from_dict(obj["context_object"]) if obj.get("context_object") is not None else None,
            "team_assignments": [IncidentsTeamAssignmentEntity.from_dict(_item) for _item in obj["team_assignments"]] if obj.get("team_assignments") is not None else None,
            "conversations": [ConversationsAPIEntitiesReference.from_dict(_item) for _item in obj["conversations"]] if obj.get("conversations") is not None else None,
            "custom_fields": [CustomFieldsFieldValue.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "field_requirements": [IncidentEntityFieldRequirementEntity.from_dict(_item) for _item in obj["field_requirements"]] if obj.get("field_requirements") is not None else None
        })
        return _obj

from firehydrant_api_client.models.incidents_team_assignment_entity import IncidentsTeamAssignmentEntity
# TODO: Rewrite to not use raise_errors
IncidentEntity.model_rebuild(raise_errors=False)

