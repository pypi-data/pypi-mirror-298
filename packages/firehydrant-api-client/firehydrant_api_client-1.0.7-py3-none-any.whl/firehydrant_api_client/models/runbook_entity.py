# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.author_entity import AuthorEntity
from firehydrant_api_client.models.rules_rule_entity import RulesRuleEntity
from firehydrant_api_client.models.runbook_step_entity import RunbookStepEntity
from firehydrant_api_client.models.team_entity import TeamEntity
from firehydrant_api_client.models.votes_entity import VotesEntity
from typing import Optional, Set
from typing_extensions import Self

class RunbookEntity(BaseModel):
    """
    RunbookEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    summary: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    runbook_template_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    created_by: Optional[AuthorEntity] = None
    updated_by: Optional[AuthorEntity] = None
    steps: Optional[RunbookStepEntity] = None
    attachment_rule: Optional[RulesRuleEntity] = None
    votes: Optional[VotesEntity] = None
    is_editable: Optional[StrictBool] = None
    owner: Optional[TeamEntity] = None
    categories: Optional[StrictStr] = Field(default=None, description="categories the runbook applies to")
    auto_attach_to_restricted_incidents: Optional[StrictBool] = None
    tutorial: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "name", "summary", "description", "type", "runbook_template_id", "created_at", "updated_at", "created_by", "updated_by", "steps", "attachment_rule", "votes", "is_editable", "owner", "categories", "auto_attach_to_restricted_incidents", "tutorial"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbookEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updated_by'] = self.updated_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of steps
        if self.steps:
            _dict['steps'] = self.steps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attachment_rule
        if self.attachment_rule:
            _dict['attachment_rule'] = self.attachment_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of votes
        if self.votes:
            _dict['votes'] = self.votes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbookEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "runbook_template_id": obj.get("runbook_template_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "created_by": AuthorEntity.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "updated_by": AuthorEntity.from_dict(obj["updated_by"]) if obj.get("updated_by") is not None else None,
            "steps": RunbookStepEntity.from_dict(obj["steps"]) if obj.get("steps") is not None else None,
            "attachment_rule": RulesRuleEntity.from_dict(obj["attachment_rule"]) if obj.get("attachment_rule") is not None else None,
            "votes": VotesEntity.from_dict(obj["votes"]) if obj.get("votes") is not None else None,
            "is_editable": obj.get("is_editable"),
            "owner": TeamEntity.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "categories": obj.get("categories"),
            "auto_attach_to_restricted_incidents": obj.get("auto_attach_to_restricted_incidents"),
            "tutorial": obj.get("tutorial")
        })
        return _obj


