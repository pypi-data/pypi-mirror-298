# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from firehydrant_api_client.models.report_entity import ReportEntity

from firehydrant_api_client.api_client import ApiClient, RequestSerialized
from firehydrant_api_client.api_response import ApiResponse
from firehydrant_api_client.rest import RESTResponseType


class ReportsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_v1_reports_mean_time(
        self,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Incident status")] = None,
        start_date: Annotated[Optional[date], Field(description="The start date to return incidents from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return incidents from")] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for an incident that searches on name, summary, and desciption")] = None,
        saved_search_id: Annotated[Optional[StrictStr], Field(description="The id of a previously saved search.")] = None,
        priorities: Annotated[Optional[StrictStr], Field(description="A comma separated list of priorities")] = None,
        priority_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where priority has not been set")] = None,
        severities: Annotated[Optional[StrictStr], Field(description="A comma separated list of severities")] = None,
        severity_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where severity has not been set")] = None,
        current_milestones: Annotated[Optional[StrictStr], Field(description="A comma separated list of current milestones")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReportEntity:
        """Get mean time report

        Returns a report with time bucketed analytics data

        :param environments: A comma separated list of environment IDs
        :type environments: str
        :param teams: A comma separated list of team IDs
        :type teams: str
        :param services: A comma separated list of service IDs
        :type services: str
        :param status: Incident status
        :type status: str
        :param start_date: The start date to return incidents from
        :type start_date: date
        :param end_date: The end date to return incidents from
        :type end_date: date
        :param query: A text query for an incident that searches on name, summary, and desciption
        :type query: str
        :param saved_search_id: The id of a previously saved search.
        :type saved_search_id: str
        :param priorities: A comma separated list of priorities
        :type priorities: str
        :param priority_not_set: Flag for including incidents where priority has not been set
        :type priority_not_set: bool
        :param severities: A comma separated list of severities
        :type severities: str
        :param severity_not_set: Flag for including incidents where severity has not been set
        :type severity_not_set: bool
        :param current_milestones: A comma separated list of current milestones
        :type current_milestones: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_reports_mean_time_serialize(
            environments=environments,
            teams=teams,
            services=services,
            status=status,
            start_date=start_date,
            end_date=end_date,
            query=query,
            saved_search_id=saved_search_id,
            priorities=priorities,
            priority_not_set=priority_not_set,
            severities=severities,
            severity_not_set=severity_not_set,
            current_milestones=current_milestones,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReportEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v1_reports_mean_time_with_http_info(
        self,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Incident status")] = None,
        start_date: Annotated[Optional[date], Field(description="The start date to return incidents from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return incidents from")] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for an incident that searches on name, summary, and desciption")] = None,
        saved_search_id: Annotated[Optional[StrictStr], Field(description="The id of a previously saved search.")] = None,
        priorities: Annotated[Optional[StrictStr], Field(description="A comma separated list of priorities")] = None,
        priority_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where priority has not been set")] = None,
        severities: Annotated[Optional[StrictStr], Field(description="A comma separated list of severities")] = None,
        severity_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where severity has not been set")] = None,
        current_milestones: Annotated[Optional[StrictStr], Field(description="A comma separated list of current milestones")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReportEntity]:
        """Get mean time report

        Returns a report with time bucketed analytics data

        :param environments: A comma separated list of environment IDs
        :type environments: str
        :param teams: A comma separated list of team IDs
        :type teams: str
        :param services: A comma separated list of service IDs
        :type services: str
        :param status: Incident status
        :type status: str
        :param start_date: The start date to return incidents from
        :type start_date: date
        :param end_date: The end date to return incidents from
        :type end_date: date
        :param query: A text query for an incident that searches on name, summary, and desciption
        :type query: str
        :param saved_search_id: The id of a previously saved search.
        :type saved_search_id: str
        :param priorities: A comma separated list of priorities
        :type priorities: str
        :param priority_not_set: Flag for including incidents where priority has not been set
        :type priority_not_set: bool
        :param severities: A comma separated list of severities
        :type severities: str
        :param severity_not_set: Flag for including incidents where severity has not been set
        :type severity_not_set: bool
        :param current_milestones: A comma separated list of current milestones
        :type current_milestones: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_reports_mean_time_serialize(
            environments=environments,
            teams=teams,
            services=services,
            status=status,
            start_date=start_date,
            end_date=end_date,
            query=query,
            saved_search_id=saved_search_id,
            priorities=priorities,
            priority_not_set=priority_not_set,
            severities=severities,
            severity_not_set=severity_not_set,
            current_milestones=current_milestones,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReportEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v1_reports_mean_time_without_preload_content(
        self,
        environments: Annotated[Optional[StrictStr], Field(description="A comma separated list of environment IDs")] = None,
        teams: Annotated[Optional[StrictStr], Field(description="A comma separated list of team IDs")] = None,
        services: Annotated[Optional[StrictStr], Field(description="A comma separated list of service IDs")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Incident status")] = None,
        start_date: Annotated[Optional[date], Field(description="The start date to return incidents from")] = None,
        end_date: Annotated[Optional[date], Field(description="The end date to return incidents from")] = None,
        query: Annotated[Optional[StrictStr], Field(description="A text query for an incident that searches on name, summary, and desciption")] = None,
        saved_search_id: Annotated[Optional[StrictStr], Field(description="The id of a previously saved search.")] = None,
        priorities: Annotated[Optional[StrictStr], Field(description="A comma separated list of priorities")] = None,
        priority_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where priority has not been set")] = None,
        severities: Annotated[Optional[StrictStr], Field(description="A comma separated list of severities")] = None,
        severity_not_set: Annotated[Optional[StrictBool], Field(description="Flag for including incidents where severity has not been set")] = None,
        current_milestones: Annotated[Optional[StrictStr], Field(description="A comma separated list of current milestones")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get mean time report

        Returns a report with time bucketed analytics data

        :param environments: A comma separated list of environment IDs
        :type environments: str
        :param teams: A comma separated list of team IDs
        :type teams: str
        :param services: A comma separated list of service IDs
        :type services: str
        :param status: Incident status
        :type status: str
        :param start_date: The start date to return incidents from
        :type start_date: date
        :param end_date: The end date to return incidents from
        :type end_date: date
        :param query: A text query for an incident that searches on name, summary, and desciption
        :type query: str
        :param saved_search_id: The id of a previously saved search.
        :type saved_search_id: str
        :param priorities: A comma separated list of priorities
        :type priorities: str
        :param priority_not_set: Flag for including incidents where priority has not been set
        :type priority_not_set: bool
        :param severities: A comma separated list of severities
        :type severities: str
        :param severity_not_set: Flag for including incidents where severity has not been set
        :type severity_not_set: bool
        :param current_milestones: A comma separated list of current milestones
        :type current_milestones: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v1_reports_mean_time_serialize(
            environments=environments,
            teams=teams,
            services=services,
            status=status,
            start_date=start_date,
            end_date=end_date,
            query=query,
            saved_search_id=saved_search_id,
            priorities=priorities,
            priority_not_set=priority_not_set,
            severities=severities,
            severity_not_set=severity_not_set,
            current_milestones=current_milestones,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReportEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v1_reports_mean_time_serialize(
        self,
        environments,
        teams,
        services,
        status,
        start_date,
        end_date,
        query,
        saved_search_id,
        priorities,
        priority_not_set,
        severities,
        severity_not_set,
        current_milestones,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if environments is not None:
            
            _query_params.append(('environments', environments))
            
        if teams is not None:
            
            _query_params.append(('teams', teams))
            
        if services is not None:
            
            _query_params.append(('services', services))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if saved_search_id is not None:
            
            _query_params.append(('saved_search_id', saved_search_id))
            
        if priorities is not None:
            
            _query_params.append(('priorities', priorities))
            
        if priority_not_set is not None:
            
            _query_params.append(('priority_not_set', priority_not_set))
            
        if severities is not None:
            
            _query_params.append(('severities', severities))
            
        if severity_not_set is not None:
            
            _query_params.append(('severity_not_set', severity_not_set))
            
        if current_milestones is not None:
            
            _query_params.append(('current_milestones', current_milestones))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/reports/mean_time',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


