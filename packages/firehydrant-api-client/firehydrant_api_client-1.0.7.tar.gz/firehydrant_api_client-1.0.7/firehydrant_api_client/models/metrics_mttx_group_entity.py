# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MetricsMttxGroupEntity(BaseModel):
    """
    MetricsMttxGroupEntity
    """ # noqa: E501
    group_attributes: Optional[StrictStr] = None
    filter_params: Optional[Dict[str, Any]] = None
    count: Optional[StrictInt] = None
    mttd: Optional[Union[StrictFloat, StrictInt]] = None
    mtta: Optional[Union[StrictFloat, StrictInt]] = None
    mttm: Optional[Union[StrictFloat, StrictInt]] = None
    mttr: Optional[Union[StrictFloat, StrictInt]] = None
    count_diff: Optional[StrictInt] = None
    count_percent_diff: Optional[Union[StrictFloat, StrictInt]] = None
    mttd_diff: Optional[Union[StrictFloat, StrictInt]] = None
    mtta_diff: Optional[Union[StrictFloat, StrictInt]] = None
    mttm_diff: Optional[Union[StrictFloat, StrictInt]] = None
    mttr_diff: Optional[Union[StrictFloat, StrictInt]] = None
    mttd_percent_diff: Optional[Union[StrictFloat, StrictInt]] = None
    mtta_percent_diff: Optional[Union[StrictFloat, StrictInt]] = None
    mttm_percent_diff: Optional[Union[StrictFloat, StrictInt]] = None
    mttr_percent_diff: Optional[Union[StrictFloat, StrictInt]] = None
    healthiness: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["group_attributes", "filter_params", "count", "mttd", "mtta", "mttm", "mttr", "count_diff", "count_percent_diff", "mttd_diff", "mtta_diff", "mttm_diff", "mttr_diff", "mttd_percent_diff", "mtta_percent_diff", "mttm_percent_diff", "mttr_percent_diff", "healthiness"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricsMttxGroupEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricsMttxGroupEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "group_attributes": obj.get("group_attributes"),
            "filter_params": obj.get("filter_params"),
            "count": obj.get("count"),
            "mttd": obj.get("mttd"),
            "mtta": obj.get("mtta"),
            "mttm": obj.get("mttm"),
            "mttr": obj.get("mttr"),
            "count_diff": obj.get("count_diff"),
            "count_percent_diff": obj.get("count_percent_diff"),
            "mttd_diff": obj.get("mttd_diff"),
            "mtta_diff": obj.get("mtta_diff"),
            "mttm_diff": obj.get("mttm_diff"),
            "mttr_diff": obj.get("mttr_diff"),
            "mttd_percent_diff": obj.get("mttd_percent_diff"),
            "mtta_percent_diff": obj.get("mtta_percent_diff"),
            "mttm_percent_diff": obj.get("mttm_percent_diff"),
            "mttr_percent_diff": obj.get("mttr_percent_diff"),
            "healthiness": obj.get("healthiness")
        })
        return _obj


