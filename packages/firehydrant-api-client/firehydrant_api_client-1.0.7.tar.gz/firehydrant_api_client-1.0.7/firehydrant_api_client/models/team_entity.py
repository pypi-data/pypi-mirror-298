# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firehydrant_api_client.models.author_entity import AuthorEntity
from firehydrant_api_client.models.integrations_slack_slack_channel_entity import IntegrationsSlackSlackChannelEntity
from firehydrant_api_client.models.membership_entity import MembershipEntity
from typing import Optional, Set
from typing_extensions import Self

class TeamEntity(BaseModel):
    """
    TeamEntity model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    signals_ical_url: Optional[StrictStr] = None
    created_by: Optional[AuthorEntity] = None
    slack_channel: Optional[IntegrationsSlackSlackChannelEntity] = None
    ms_teams_channel: Optional[IntegrationsMicrosoftTeamsV2ChannelEntity] = None
    memberships: Optional[List[MembershipEntity]] = None
    owned_checklist_templates: Optional[List[ChecklistTemplateEntity]] = None
    owned_functionalities: Optional[List[FunctionalityEntity]] = None
    owned_services: Optional[List[ServiceEntity]] = None
    owned_runbooks: Optional[List[SlimRunbookEntity]] = None
    responding_services: Optional[List[ServiceEntity]] = None
    services: Optional[List[ServiceEntity]] = None
    functionalities: Optional[List[FunctionalityEntity]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "slug", "created_at", "updated_at", "signals_ical_url", "created_by", "slack_channel", "ms_teams_channel", "memberships", "owned_checklist_templates", "owned_functionalities", "owned_services", "owned_runbooks", "responding_services", "services", "functionalities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slack_channel
        if self.slack_channel:
            _dict['slack_channel'] = self.slack_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ms_teams_channel
        if self.ms_teams_channel:
            _dict['ms_teams_channel'] = self.ms_teams_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in memberships (list)
        _items = []
        if self.memberships:
            for _item_memberships in self.memberships:
                if _item_memberships:
                    _items.append(_item_memberships.to_dict())
            _dict['memberships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owned_checklist_templates (list)
        _items = []
        if self.owned_checklist_templates:
            for _item_owned_checklist_templates in self.owned_checklist_templates:
                if _item_owned_checklist_templates:
                    _items.append(_item_owned_checklist_templates.to_dict())
            _dict['owned_checklist_templates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owned_functionalities (list)
        _items = []
        if self.owned_functionalities:
            for _item_owned_functionalities in self.owned_functionalities:
                if _item_owned_functionalities:
                    _items.append(_item_owned_functionalities.to_dict())
            _dict['owned_functionalities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owned_services (list)
        _items = []
        if self.owned_services:
            for _item_owned_services in self.owned_services:
                if _item_owned_services:
                    _items.append(_item_owned_services.to_dict())
            _dict['owned_services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owned_runbooks (list)
        _items = []
        if self.owned_runbooks:
            for _item_owned_runbooks in self.owned_runbooks:
                if _item_owned_runbooks:
                    _items.append(_item_owned_runbooks.to_dict())
            _dict['owned_runbooks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in responding_services (list)
        _items = []
        if self.responding_services:
            for _item_responding_services in self.responding_services:
                if _item_responding_services:
                    _items.append(_item_responding_services.to_dict())
            _dict['responding_services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in functionalities (list)
        _items = []
        if self.functionalities:
            for _item_functionalities in self.functionalities:
                if _item_functionalities:
                    _items.append(_item_functionalities.to_dict())
            _dict['functionalities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "slug": obj.get("slug"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "signals_ical_url": obj.get("signals_ical_url"),
            "created_by": AuthorEntity.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "slack_channel": IntegrationsSlackSlackChannelEntity.from_dict(obj["slack_channel"]) if obj.get("slack_channel") is not None else None,
            "ms_teams_channel": IntegrationsMicrosoftTeamsV2ChannelEntity.from_dict(obj["ms_teams_channel"]) if obj.get("ms_teams_channel") is not None else None,
            "memberships": [MembershipEntity.from_dict(_item) for _item in obj["memberships"]] if obj.get("memberships") is not None else None,
            "owned_checklist_templates": [ChecklistTemplateEntity.from_dict(_item) for _item in obj["owned_checklist_templates"]] if obj.get("owned_checklist_templates") is not None else None,
            "owned_functionalities": [FunctionalityEntity.from_dict(_item) for _item in obj["owned_functionalities"]] if obj.get("owned_functionalities") is not None else None,
            "owned_services": [ServiceEntity.from_dict(_item) for _item in obj["owned_services"]] if obj.get("owned_services") is not None else None,
            "owned_runbooks": [SlimRunbookEntity.from_dict(_item) for _item in obj["owned_runbooks"]] if obj.get("owned_runbooks") is not None else None,
            "responding_services": [ServiceEntity.from_dict(_item) for _item in obj["responding_services"]] if obj.get("responding_services") is not None else None,
            "services": [ServiceEntity.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "functionalities": [FunctionalityEntity.from_dict(_item) for _item in obj["functionalities"]] if obj.get("functionalities") is not None else None
        })
        return _obj

from firehydrant_api_client.models.checklist_template_entity import ChecklistTemplateEntity
from firehydrant_api_client.models.functionality_entity import FunctionalityEntity
from firehydrant_api_client.models.integrations_microsoft_teams_v2_channel_entity import IntegrationsMicrosoftTeamsV2ChannelEntity
from firehydrant_api_client.models.service_entity import ServiceEntity
from firehydrant_api_client.models.slim_runbook_entity import SlimRunbookEntity
# TODO: Rewrite to not use raise_errors
TeamEntity.model_rebuild(raise_errors=False)

