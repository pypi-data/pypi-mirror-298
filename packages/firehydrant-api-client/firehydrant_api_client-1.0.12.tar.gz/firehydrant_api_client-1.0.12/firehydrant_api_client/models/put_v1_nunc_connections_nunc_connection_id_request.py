# coding: utf-8

"""
    FireHydrant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PutV1NuncConnectionsNuncConnectionIdRequest(BaseModel):
    """
    PutV1NuncConnectionsNuncConnectionIdRequest
    """ # noqa: E501
    company_name: Optional[StrictStr] = None
    company_website: Optional[StrictStr] = None
    company_tos_url: Optional[StrictStr] = None
    greeting_title: Optional[StrictStr] = None
    greeting_body: Optional[StrictStr] = None
    operational_message: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    conditions_nunc_condition: List[StrictStr] = Field(description="Status page condition to map your severity matrix condition to", alias="conditions[nunc_condition]")
    conditions_condition_id: List[StrictStr] = Field(description="Severity matrix condition id", alias="conditions[condition_id]")
    components_infrastructure_type: List[StrictStr] = Field(alias="components[infrastructure_type]")
    components_infrastructure_id: List[StrictStr] = Field(alias="components[infrastructure_id]")
    primary_color: Optional[StrictStr] = None
    secondary_color: Optional[StrictStr] = None
    exposed_fields: Optional[List[StrictStr]] = None
    enable_histogram: Optional[StrictBool] = None
    ui_version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["company_name", "company_website", "company_tos_url", "greeting_title", "greeting_body", "operational_message", "title", "conditions[nunc_condition]", "conditions[condition_id]", "components[infrastructure_type]", "components[infrastructure_id]", "primary_color", "secondary_color", "exposed_fields", "enable_histogram", "ui_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutV1NuncConnectionsNuncConnectionIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutV1NuncConnectionsNuncConnectionIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "company_name": obj.get("company_name"),
            "company_website": obj.get("company_website"),
            "company_tos_url": obj.get("company_tos_url"),
            "greeting_title": obj.get("greeting_title"),
            "greeting_body": obj.get("greeting_body"),
            "operational_message": obj.get("operational_message"),
            "title": obj.get("title"),
            "conditions[nunc_condition]": obj.get("conditions[nunc_condition]"),
            "conditions[condition_id]": obj.get("conditions[condition_id]"),
            "components[infrastructure_type]": obj.get("components[infrastructure_type]"),
            "components[infrastructure_id]": obj.get("components[infrastructure_id]"),
            "primary_color": obj.get("primary_color"),
            "secondary_color": obj.get("secondary_color"),
            "exposed_fields": obj.get("exposed_fields"),
            "enable_histogram": obj.get("enable_histogram"),
            "ui_version": obj.get("ui_version")
        })
        return _obj


