import re


find_all_regex = lambda content,regex: re.compile(regex).findall(content)

find_Chinese = lambda lines: '|'.join(find_all_regex(x,'([\u4e00-\u9fa5]+)+?') for x in lines)

def get_str_pinyin(word):
    import pypinyin
    s = ''
    for i in pypinyin.pinyin(word, style=pypinyin.NORMAL):
        s += ''.join(i)
    return s

# str_replace_dic = lambda line, repdic : list(line:=line.replace(x, repdic[x]) for x in repdic) and line

# afterDecodeCP932 = lambda x, replis:[list(x:=x.replace(y[0],y[1]) for y in [['〜','～'],['‖','∥'],['−','－']]),x][1]
# '''fix CP932 content read with python'''
# beforeEncodeCP932 = lambda x, replis:[list(x:=x.replace(y[0],y[1]) for y in [['·','・'],['～','〜'],['∥','‖'],['－','−']]),x][1]
# ''''''

def str_replace_dic(line, repdic):
    for x in repdic:
        line = line.replace(x, repdic[x])
    return line

def afterDecodeCP932(x, replis):
    res = x
    for y in [['〜','～'],['‖','∥'],['−','－']]:
        res = res.replace(y[0], y[1])
    return res

# 不应该['·','・'], 因为·不能gbk
beforeEncodeCP932 = lambda x, replis: [x.replace(y[0],y[1]) for y in [['～','〜'],['∥','‖'],['－','−']]][1]


is_jpchar = lambda ch: ord(ch)>0x3041 and ord(ch)<0x30f6
is_jpline = lambda line: any(map(is_jpchar, line))


# toKatakanaCase = lambda x : x.translate(dict(zip(range(0x3041, 0x3097), range(0x30A1, 0x30F7))))
# toHiraganaCase = lambda x : x.translate(dict(zip(range(0x30A1, 0x30F7), range(0x3041, 0x3097))))

def toHankanaCase(string):
    """
    将传入的字符串转换为半角片假名
    Args:
        string (str): 需要转换的字符串
    Returns:
        str: 转换后的字符串
    """
    # 将全角片假名转换为半角片假名
    table = str.maketrans({
        'ァ': 'ｧ', 'ィ': 'ｨ', 'ゥ': 'ｩ', 'ェ': 'ｪ', 'ォ': 'ｫ',
        'ャ': 'ｬ', 'ュ': 'ｭ', 'ョ': 'ｮ', 'ッ': 'ｯ',

        # 72个大写
        'ア': 'ｱ', 'イ': 'ｲ', 'ウ': 'ｳ', 'エ': 'ｴ', 'オ': 'ｵ',
        'カ': 'ｶ', 'キ': 'ｷ', 'ク': 'ｸ', 'ケ': 'ｹ', 'コ': 'ｺ',
        'サ': 'ｻ', 'シ': 'ｼ', 'ス': 'ｽ', 'セ': 'ｾ', 'ソ': 'ｿ',
        'タ': 'ﾀ', 'チ': 'ﾁ', 'ツ': 'ﾂ', 'テ': 'ﾃ', 'ト': 'ﾄ',
        'ナ': 'ﾅ', 'ニ': 'ﾆ', 'ヌ': 'ﾇ', 'ネ': 'ﾈ', 'ノ': 'ﾉ',
        'ハ': 'ﾊ', 'ヒ': 'ﾋ', 'フ': 'ﾌ', 'ヘ': 'ﾍ', 'ホ': 'ﾎ',
        'マ': 'ﾏ', 'ミ': 'ﾐ', 'ム': 'ﾑ', 'メ': 'ﾒ', 'モ': 'ﾓ',
        'ラ': 'ﾗ', 'リ': 'ﾘ', 'ル': 'ﾙ', 'レ': 'ﾚ', 'ロ': 'ﾛ',
        'ヤ': 'ﾔ', 'ユ': 'ﾕ', 'ヨ': 'ﾖ',
        'ワ': 'ﾜ', 'ヲ': 'ｦ', 'ン': 'ﾝ',
        
        'ヴ': 'ｳﾞ',
        'ガ': 'ｶﾞ', 'ギ': 'ｷﾞ', 'グ': 'ｸﾞ', 'ゲ': 'ｹﾞ', 'ゴ': 'ｺﾞ',
        'ザ': 'ｻﾞ', 'ジ': 'ｼﾞ', 'ズ': 'ｽﾞ', 'ゼ': 'ｾﾞ', 'ゾ': 'ｿﾞ',
        'ダ': 'ﾀﾞ', 'ヂ': 'ﾁﾞ', 'ヅ': 'ﾂﾞ', 'デ': 'ﾃﾞ', 'ド': 'ﾄﾞ',
        'バ': 'ﾊﾞ', 'ビ': 'ﾋﾞ', 'ブ': 'ﾌﾞ', 'ベ': 'ﾍﾞ', 'ボ': 'ﾎﾞ',
        'パ': 'ﾊﾟ', 'ピ': 'ﾋﾟ', 'プ': 'ﾌﾟ', 'ペ': 'ﾍﾟ', 'ポ': 'ﾎﾟ',
    })

    # print(table)
    return string.translate(table)


# xx
def toZenkanaCase(string):
    """
    将传入的字符串转换为全角片假名
    Args:
        string (str): 需要转换的字符串
    Returns:
        str: 转换后的字符串
    """
    # 将半角片假名转换为全角片假名
    table = {
        # 先搞定双音节
        'ｳﾞ': 'ヴ',
        'ｶﾞ': 'ガ', 'ｷﾞ': 'ギ', 'ｸﾞ': 'グ', 'ｹﾞ': 'ゲ', 'ｺﾞ': 'ゴ',
        'ｻﾞ': 'ザ', 'ｼﾞ': 'ジ', 'ｽﾞ': 'ズ', 'ｾﾞ': 'ゼ', 'ｿﾞ': 'ゾ',
        'ﾀﾞ': 'ダ', 'ﾁﾞ': 'ヂ', 'ﾂﾞ': 'ヅ', 'ﾃﾞ': 'デ', 'ﾄﾞ': 'ド',
        'ﾊﾞ': 'バ', 'ﾋﾞ': 'ビ', 'ﾌﾞ': 'ブ', 'ﾍﾞ': 'ベ', 'ﾎﾞ': 'ボ',
        'ﾊﾟ': 'パ', 'ﾋﾟ': 'ピ', 'ﾌﾟ': 'プ', 'ﾍﾟ': 'ペ', 'ﾎﾟ': 'ポ',

        'ｧ': 'ァ', 'ｨ': 'ィ', 'ｩ': 'ゥ', 'ｪ': 'ェ', 'ｫ': 'ォ',
        'ｬ': 'ャ', 'ｭ': 'ュ', 'ｮ': 'ョ', 'ｯ': 'ッ',

        'ｱ': 'ア', 'ｲ': 'イ', 'ｳ': 'ウ', 'ｴ': 'エ', 'ｵ': 'オ',
        'ｶ': 'カ', 'ｷ': 'キ', 'ｸ': 'ク', 'ｹ': 'ケ', 'ｺ': 'コ',
        'ｻ': 'サ', 'ｼ': 'シ', 'ｽ': 'ス', 'ｾ': 'セ', 'ｿ': 'ソ',
        'ﾀ': 'タ', 'ﾁ': 'チ', 'ﾂ': 'ツ', 'ﾃ': 'テ', 'ﾄ': 'ト',
        'ﾅ': 'ナ', 'ﾆ': 'ニ', 'ﾇ': 'ヌ', 'ﾈ': 'ネ', 'ﾉ': 'ノ',
        'ﾊ': 'ハ', 'ﾋ': 'ヒ', 'ﾌ': 'フ', 'ﾍ': 'ヘ', 'ﾎ': 'ホ',
        'ﾏ': 'マ', 'ﾐ': 'ミ', 'ﾑ': 'ム', 'ﾒ': 'メ', 'ﾓ': 'モ',
        'ﾗ': 'ラ', 'ﾘ': 'リ', 'ﾙ': 'ル', 'ﾚ': 'レ', 'ﾛ': 'ロ',
        'ﾔ': 'ヤ', 'ﾕ': 'ユ', 'ﾖ': 'ヨ',
        'ﾜ': 'ワ', 'ｦ': 'ヲ', 'ﾝ': 'ン',
    }
    return str_replace_dic(string,table)


cp932_to_gbk_dic = jp_zh_dic = {
# 多字形同码cp932
"−":"－","〜":"～",

# 半角
'ｳﾞ': 'ヴ',
'ｶﾞ': 'ガ', 'ｷﾞ': 'ギ', 'ｸﾞ': 'グ', 'ｹﾞ': 'ゲ', 'ｺﾞ': 'ゴ',
'ｻﾞ': 'ザ', 'ｼﾞ': 'ジ', 'ｽﾞ': 'ズ', 'ｾﾞ': 'ゼ', 'ｿﾞ': 'ゾ',
'ﾀﾞ': 'ダ', 'ﾁﾞ': 'ヂ', 'ﾂﾞ': 'ヅ', 'ﾃﾞ': 'デ', 'ﾄﾞ': 'ド',
'ﾊﾞ': 'バ', 'ﾋﾞ': 'ビ', 'ﾌﾞ': 'ブ', 'ﾍﾞ': 'ベ', 'ﾎﾞ': 'ボ',
'ﾊﾟ': 'パ', 'ﾋﾟ': 'ピ', 'ﾌﾟ': 'プ', 'ﾍﾟ': 'ペ', 'ﾎﾟ': 'ポ',

'ｧ': 'ァ', 'ｨ': 'ィ', 'ｩ': 'ゥ', 'ｪ': 'ェ', 'ｫ': 'ォ',
'ｬ': 'ャ', 'ｭ': 'ュ', 'ｮ': 'ョ', 'ｯ': 'ッ',

'ｱ': 'ア', 'ｲ': 'イ', 'ｳ': 'ウ', 'ｴ': 'エ', 'ｵ': 'オ',
'ｶ': 'カ', 'ｷ': 'キ', 'ｸ': 'ク', 'ｹ': 'ケ', 'ｺ': 'コ',
'ｻ': 'サ', 'ｼ': 'シ', 'ｽ': 'ス', 'ｾ': 'セ', 'ｿ': 'ソ',
'ﾀ': 'タ', 'ﾁ': 'チ', 'ﾂ': 'ツ', 'ﾃ': 'テ', 'ﾄ': 'ト',
'ﾅ': 'ナ', 'ﾆ': 'ニ', 'ﾇ': 'ヌ', 'ﾈ': 'ネ', 'ﾉ': 'ノ',
'ﾊ': 'ハ', 'ﾋ': 'ヒ', 'ﾌ': 'フ', 'ﾍ': 'ヘ', 'ﾎ': 'ホ',
'ﾏ': 'マ', 'ﾐ': 'ミ', 'ﾑ': 'ム', 'ﾒ': 'メ', 'ﾓ': 'モ',
'ﾗ': 'ラ', 'ﾘ': 'リ', 'ﾙ': 'ル', 'ﾚ': 'レ', 'ﾛ': 'ロ',
'ﾔ': 'ヤ', 'ﾕ': 'ユ', 'ﾖ': 'ヨ',
'ﾜ': 'ワ', 'ｦ': 'ヲ', 'ﾝ': 'ン',

# 半角符号集
'｡': '。',
'｢': '「',
'｣': '」',
'､': '、',
'･': '·',
'ｰ': 'ー',
'ﾞ': '゛', # 最后处理
'ﾟ': '゜', # 最后处理

# 双字节
'・': '·', '´': '?', '∋': '?', '⊆': '?', '⊇': '?', '⊂': '?', '⊃': '?', '⇒': '?', '⇔': '?', '∀': '?', 
'∃': '?', '∂': '?', '∇': '?', '≪': '?', '≫': '?', '∬': '?', 'Å': '?', '♯': '?', '♭': '?', '♪': '?', 
'†': '?', '‡': '?', '¶': '?', '◯': '〇', '⑪': '?', '⑫': '?', '⑬': '?', '⑭': '?', '⑮': '?', '⑯': '?', 
'⑰': '?', '⑱': '?', '⑲': '?', '⑳': '?', '㍉': '?', '㌔': '?', '㌢': '?', '㍍': '?', '㌘': '?', '㌧': '?', 
'㌃': '?', '㌶': '?', '㍑': '?', '㍗': '?', '㌍': '?', '㌦': '?', '㌣': '?', '㌫': '?', '㍊': '?', '㌻': '?', 
'㍻': '?', '〟': '〞', '㏍': '?', '㊤': '?', '㊥': '?', '㊦': '?', '㊧': '?', '㊨': '?', '㈲': '?', '㈹': '?', 
'㍾': '?', '㍽': '?', '㍼': '?'
}

# jpdic_withnote = jpdic.update({"♪":"⑨"})


# def Kanji2Hanzi(line,CP9322gbkdic):
#     newline=''
#     for it in line:
#         newline+=(CP9322gbkdic[it] if it in CP9322gbkdic else it)
#     return newline

def Kanji2Hanzi(line,cp932_to_gbk_dic=cp932_to_gbk_dic):
    for it in cp932_to_gbk_dic:
        line = line.replace(it, cp932_to_gbk_dic[it])
    return line

cp9322gbk = Kanji2Hanzi

# 翻译



