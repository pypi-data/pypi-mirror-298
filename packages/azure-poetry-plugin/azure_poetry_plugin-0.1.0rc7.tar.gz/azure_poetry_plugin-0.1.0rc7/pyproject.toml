[tool.poetry]
name = "azure-poetry-plugin"
version = "0.1.0rc7"
description = """A poetry plugin for easy and uniform way of configuring \
azure devops artifact feeds with Poetry, without any `.NET` dependencies or \
complicated poetry commands."""

authors = [
    "Daniel Gottlieb Dollerup <dgot@baselifescience.com>",
]
packages = [
    {include = "azure_poetry_plugin", from = "src"},
]

[tool.poetry.dependencies]
python =  ">=3.10,<4.0"
poetry = { version = "^1.8.3", allow-prereleases = true }

[tool.poetry.plugins."poetry.application.plugin"]
azure_poetry_plugin = "azure_poetry_plugin:AzurePoetryPlugin"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.6.0"
ruff = "^0.6.0"
pytest = "^8.0.0"
pytest-cov = "^5.0.0"
pytest-html = "^4.0.0"
pyright = "^1.1.349"
ipython = "^8.27.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
lint.fixable = ["ALL"]
# See https://docs.astral.sh/ruff/rules/ for documentation on the rules
lint.select = [
    "ANN",  # Annotations
    "B",    # Bugbear
    "D",    # pydocstyle
    "E",    # pycodestyle
    "F",    # pyflakes
    "FLY",  # flynt (no static string.join)
    "I",    # isort
    "ISC",  # Implicit string concatenation
    "LOG",  # Logging
    "PIE",  # Pie
    "PERF", # Perflint
    "PL",   # Pylint
    "PT",   # Pytest
    "Q",    # Quotes
    "TCH",  # Typecheck
    "TID",  # Ban some import, see tidy-imports section below
    "T10",  # debugger (No breakpoints)
    "T20",  # print (No print statements)
    "UP",   # Pyupgrade
    "W",    # pycodestyle
]
lint.ignore = [
    "D100",      # Missing docstring in public module
    "D104",      # Missing docstring in public package
    "D107",      # Missing docstring in __init__
    "D417",      # Missing argument description for *args, **kwargs
    "PLR0913",   # Allow many arguments in as long as they the remainder are all keyword arguments
    "ANN101",    # Python version not ready for Self type annotation
    "ANN401",    # Allow use of Any type
]

[tool.ruff.lint.per-file-ignores]
"*/test/*" = [
    "D103", # No need to have docstrings in tests
    "ANN", # No need to have annotations in tests
]

[tool.ruff.lint.pydocstyle]
convention = "numpy" # see: https://numpydoc.readthedocs.io/en/latest/format.html

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.pyright]
exclude = ["**/test", "examples", "development"]  # No need to check for strict typing for tests
ignore = ["**/test", "examples", "development"]  # No need to have strict typing for tests
extraPaths = ["bases", "components"]
pythonPlatform = "Linux"
typeCheckingMode = "strict"  # parameter and return types is required
strictDictionaryInference = true  # {"a": 1, "b": "a"} infered as dict[str, int | str]
reportUnusedVariable = false  # handled by Ruff
reportShadowedImports = true  # report imports overriding a module in the stdlib
reportUnsupportedDunderAll = true  # report incorrect manipulatations of __all__
reportMissingTypeStubs = false
