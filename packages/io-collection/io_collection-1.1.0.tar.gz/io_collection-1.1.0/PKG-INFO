Metadata-Version: 2.1
Name: io-collection
Version: 1.1.0
Summary: Collection of tasks for I/O.
License: BSD-3-Clause
Author: Jessica S. Yu
Author-email: jesyu@uw.edu
Requires-Python: >=3.9,<4.0
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Provides-Extra: images
Requires-Dist: bioio (>=1.0.0,<2.0.0) ; extra == "images"
Requires-Dist: bioio-ome-tiff (>=1.0.0,<2.0.0) ; extra == "images"
Requires-Dist: bioio-tifffile (>=1.0.0,<2.0.0) ; extra == "images"
Requires-Dist: boto3 (>=1.24.59,<2.0.0)
Requires-Dist: matplotlib (>=3.7.0,<4.0.0)
Requires-Dist: numpy (>=1.24.2,<2.0.0)
Requires-Dist: pandas (>=1.5.3,<2.0.0)
Requires-Dist: pillow (>=10.3.0,<11.0.0)
Requires-Dist: prefect (>=2.8.2,<3.0.0)
Requires-Dist: quilt3 (>=5.0.0,<6.0.0)
Requires-Dist: s3fs (>=2023.1.0,<2024.0.0)
Description-Content-Type: text/markdown

[![Build status](https://allen-cell-animated.github.io/io-collection/_badges/build.svg)](https://github.com/allen-cell-animated/io-collection/actions?query=workflow%3Abuild)
[![Lint status](https://allen-cell-animated.github.io/io-collection/_badges/lint.svg)](https://github.com/allen-cell-animated/io-collection/actions?query=workflow%3Alint)
[![Documentation](https://allen-cell-animated.github.io/io-collection/_badges/documentation.svg)](https://allen-cell-animated.github.io/io-collection/)
[![Coverage](https://allen-cell-animated.github.io/io-collection/_badges/coverage.svg)](https://allen-cell-animated.github.io/io-collection/_coverage/)
[![Code style](https://allen-cell-animated.github.io/io-collection/_badges/style.svg)](https://github.com/psf/black)
[![Version](https://allen-cell-animated.github.io/io-collection/_badges/version.svg)](https://pypi.org/project/io-collection/)
[![License](https://allen-cell-animated.github.io/io-collection/_badges/license.svg)](https://github.com/allen-cell-animated/io-collection/blob/main/LICENSE)

Collection of tasks for I/O.
Designed to be used both in [Prefect](https://docs.prefect.io/latest/) workflows and as modular, useful pieces of code.

# Installation

The collection can be installed using:

```bash
pip install io-collection
```

Note that loading and saving images requires additional dependencies. Install these using:

```bash
pip install 'io-collection[images]'
```

We recommend using [Poetry](https://python-poetry.org/) to manage and install dependencies.
To install into your Poetry project, use:

```bash
poetry add io-collection
```

To include additional dependencies for loading and saving images:

```bash
poetry add 'io-collection[images]'
```

# Usage

## Prefect workflows

All tasks in this collection are wrapped in a Prefect `@task` decorator, and can be used directly in a Prefect `@flow`.
Running tasks within a [Prefect](https://docs.prefect.io/latest/) flow enables you to take advantage of features such as automatically retrying failed tasks, monitoring workflow states, running tasks concurrently, deploying and scheduling flows, and more.

```python
from prefect import flow
from io_collection.<module_name> import <task_name>

@flow
def run_flow():
    <task_name>()

if __name__ == "__main__":
    run_flow()
```

See [cell-abm-pipeline](https://github.com/allen-cell-animated/cell-abm-pipeline) for examples of using tasks from different collections to build a pipeline for simulating and analyzing agent-based model data.

## Individual tasks

Not all use cases require a full workflow.
Tasks in this collection can be used without the Prefect `@task` decorator by simply importing directly from the module:

```python
from io_collection.<module_name>.<task_name> import <task_name>

def main():
    <task_name>()

if __name__ == "__main__":
    main()
```

or using the `.fn()` method:

```python
from io_collection.<module_name> import <task_name>

def main():
    <task_name>.fn()

if __name__ == "__main__":
    main()
```

