################################################################################
#                           PROJECT INFORMATION                                #
#                              Name: MUTADOCK                                  #
#                           Author: Naisarg Patel                              #
#                                                                              #
#       Copyright (C) 2024 Naisarg Patel (https://github.com/naisarg14)        #
#                                                                              #
#          Project: https://github.com/naisarg14/mutadock                      #
#                                                                              #
#   This program is free software; you can redistribute it and/or modify it    #
#  under the terms of the GNU General Public License version 3 as published    #
#  by the Free Software Foundation.                                            #
#                                                                              #
#  This program is distributed in the hope that it will be useful, but         #
#  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY  #
#  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License    #
#  for more details.                                                           #
################################################################################


import predict_ddG
import csv, os, sys, argparse
from Amino import get_1
from helpers import backup

try:
    from pyrosetta import *
except ImportError:
    msg = "Error with importing pyrosetta module for mutation using mutadock.\n"
    msg += "Easiest way to fix this is to install pyrosetta using the following command:\n\n"
    msg += "python -m pip install pyrosetta_installer && python3 -c 'import pyrosetta_installer; pyrosetta_installer.install_pyrosetta()'\n"
    msg += "Alternative is to install from PyRosetta's official website.\n"
    msg += "If you already have pyrosetta installed, please check the installation.\n"
    msg += "If the problem persists, please create a github issue or contact developer at naisarg.patel14@hotmail.com"
    print(msg)
    sys.exit(2)

try:
    from tqdm import tqdm
except ImportError:
    msg = "Error with importing tqdm module for mutation using mutadock.\n"
    msg += "Easiest way to fix this is to install tqdm using the following command:\n\n"
    msg += "python -m pip install tqdm\n"
    msg += "If you already have tqdm installed, please check the installation.\n"
    msg += "If the problem persists, please create a github issue or contact developer at naisarg.patel14@hotmail.com"
    print(msg)
    sys.exit(2)


def main():
    full_pdb_path, full_csv_path, out_csv = get_inputs()
    calc_ddg(pdb_file=full_pdb_path, in_file=full_csv_path, out_file=out_csv)


def calc_ddg(pdb_file, in_file, out_file=None):

    sys.stdout = open(os.devnull, 'w')
    init('-mute all')
    sys.stdout = sys.__stdout__
    
    if not out_file:
        out_file = f"{in_file.removesuffix('.csv')}_ddG.csv"
    backup(out_file)

    with open(out_file, 'w+') as out:
        writer = csv.DictWriter(out, fieldnames=['sr','pdb','chain','position','wtAA','prAA','wtProb','prProb','ddG_value'])
        writer.writeheader()
        with open(in_file) as csvfile:
            reader = csv.DictReader(csvfile)
            pose = pose_from_pdb(f"{pdb_file.removesuffix('.pdb')}.pdb")
            sfxn = get_fa_scorefxn()
            score_1 = sfxn.score(pose)
            for row in tqdm(reader):
                chain = row['chain']
                position = int(row['position'])
                mutation = row['prAA']
                pose_position = pose.pdb_info().pdb2pose(chain, position)
                mut_pose = predict_ddG.mutate_residue(pose, pose_position, get_1(mutation), 8.0, sfxn)
                score_2 = sfxn.score(mut_pose)
                ddG = score_2 - score_1
                row['ddG_value'] = ddG
                writer.writerow(row)
    return out_file


def get_inputs():
    parser = argparse.ArgumentParser(description="Takes input a PDB file and CSV of mutations and then calculated the ddG values for all the mutations. Input CSV can be easily generated by using the \'csv_generator.py\' in the package.", epilog="Written by Naisarg Patel (https://github.com/naisarg14)")
    parser.add_argument("-p", "--pdb", help="PDB File", metavar="PDB", required=True)
    parser.add_argument("-i","--input", help="Input CSV File", metavar="CSV", required=True)
    parser.add_argument("-o","--output", help="Output CSV with the ddG", metavar="CSV")

    args = parser.parse_args()


    pdb_file = args.pdb
    mut_csv = args.input
    out_csv = args.output

    if not os.path.isabs(pdb_file):
        print(f"Assuming current directory for {pdb_file} as root since path not specified.")
        dir = os.getcwd()
        file = pdb_file
    else:
        dir, file = os.path.split(os.path.abspath(pdb_file))

    full_pdb_path = os.path.join(dir, file)

    if not os.path.isfile(full_pdb_path):
        sys.exit("No such file found in current directory, enter full path for other directories.")

    if not file.endswith(".pdb"):
        print("Given file is not a PDB file, input should be a PDB file.")
        sys.exit("Usage: python ddg_calc_double.py <PDB file> <single_csv> <total> (optional) <out_csv>")
    
    if not os.path.isabs(mut_csv):
        print(f"Assuming current directory for {mut_csv} as root since path not specified.")
        dir = os.getcwd()
        file = mut_csv
    else:
        dir, file = os.path.split(os.path.abspath(mut_csv))

    full_csv_path = os.path.join(dir, file)

    if not os.path.isfile(full_csv_path):
        sys.exit("No such file found in current directory, enter full path for other directories.")

    if not file.endswith(".csv"):
        print("Given file is not a CSV file, input should be a CSV file.")
        sys.exit("Usage: python ddg_calc_double.py <PDB file> <single_csv> (optional) <out_csv>")

    return full_pdb_path, full_csv_path, out_csv


if __name__ == "__main__":
    main()
