Metadata-Version: 2.3
Name: pvtool
Version: 0.3.2rc1
Summary: This tool contains validation logic for the BO4E migration data model (ibims). It uses the pvframework. 
Project-URL: Changelog, https://github.com/Hochfrequenz/pedantic-validator-tool/releases
Project-URL: Homepage, https://github.com/Hochfrequenz/pedantic-validator-tool
Author-email: Hochfrequenz Unternehmensberatung GmbH <info@hochfrequenz.de>
License: MIT
License-File: LICENSE
Keywords: bo4e,migration,python,validation
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.11
Requires-Dist: bomf
Requires-Dist: ibims>=0.3.6
Requires-Dist: more-itertools
Requires-Dist: pvframework>=0.0.8
Requires-Dist: pydantic[email]
Requires-Dist: python-dateutil
Requires-Dist: pytz
Requires-Dist: schwifty
Provides-Extra: coverage
Requires-Dist: coverage==7.6.1; extra == 'coverage'
Provides-Extra: formatting
Requires-Dist: black==24.8.0; extra == 'formatting'
Requires-Dist: isort==5.13.2; extra == 'formatting'
Provides-Extra: linting
Requires-Dist: pylint==3.3.0; extra == 'linting'
Provides-Extra: packaging
Requires-Dist: build==1.2.2; extra == 'packaging'
Requires-Dist: twine==5.1.1; extra == 'packaging'
Provides-Extra: spellcheck
Requires-Dist: codespell==2.3.0; extra == 'spellcheck'
Provides-Extra: tests
Requires-Dist: pytest-asyncio==0.24.0; extra == 'tests'
Requires-Dist: pytest==8.3.3; extra == 'tests'
Provides-Extra: type-check
Requires-Dist: mypy==1.11.2; extra == 'type-check'
Requires-Dist: types-python-dateutil==2.9.0.20240906; extra == 'type-check'
Requires-Dist: types-pytz==2024.2.0.20240913; extra == 'type-check'
Description-Content-Type: text/markdown

# Pedantic Validator Tool

![Unittests status badge](https://github.com/Hochfrequenz/pedantic-validator-tool/workflows/Unittests/badge.svg)
![Coverage status badge](https://github.com/Hochfrequenz/pedantic-validator-tool/workflows/Coverage/badge.svg)
![Linting status badge](https://github.com/Hochfrequenz/pedantic-validator-tool/workflows/Linting/badge.svg)
![Black status badge](https://github.com/Hochfrequenz/pedantic-validator-tool/workflows/Formatting/badge.svg)
![PyPI](https://img.shields.io/pypi/v/pvtool)

This package contains the validation logic to validate the data of the BO4E migration model
[ibims](https://github.com/Hochfrequenz/intermediate-bo4e-migration-models).
It uses the [pedantic-validator-framework](https://github.com/Hochfrequenz/pedantic-validator-framework) to
create `ValidationManager`s for each data set in
[ibims](https://github.com/Hochfrequenz/intermediate-bo4e-migration-models).
(Currently supported are only `Customer`, `Network` and `Resource`.)

This package is designed to be used together with [bomf](https://github.com/Hochfrequenz/bo4e_migration_framework).
Although, it only uses the `MigrationConfig` to use the `migration_key_date` which is necessary for some validations.

## Usage
Install it [from pypi](https://pypi.org/project/pvtool/):
```bash
pip install pvtool
```

To use the validation logic you just need to bind the preconfigured modules of this package to
`ValidationManager` of your `Injector`. Alternatively, you could execute the provider-method of the
module on your own by supplying a `MigrationConfig` instance.

```python
from injector import Injector
from pvtool import ValidationManagerProviderCustomer
from pvframework import ValidationManager
from bomf.config import MigrationConfig
from datetime import datetime, UTC

customer_injector = Injector([
    ValidationManagerProviderCustomer,
    lambda binder: binder.bind(MigrationConfig, MigrationConfig(migration_key_date=datetime(2021, 1, 1, tzinfo=UTC))),
])

customer_validation_manager = customer_injector.get(ValidationManager)
```

## How to use this Repository on Your Machine

Follow the instructions in our [Python template repository](https://github.com/Hochfrequenz/python_template_repository#how-to-use-this-repository-on-your-machine).

## Contribute

You are very welcome to contribute to this repository by opening a pull request against the main branch.
