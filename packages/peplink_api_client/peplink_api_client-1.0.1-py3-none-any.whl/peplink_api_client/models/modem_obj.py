# coding: utf-8

"""
    Peplink API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from peplink_api_client.models.band_obj import BandObj
from peplink_api_client.models.carrier_obj import CarrierObj
from typing import Optional, Set
from typing_extensions import Self

class ModemObj(BaseModel):
    """
    ModemObj
    """ # noqa: E501
    name: Optional[StrictStr] = None
    vendor_id: Optional[StrictInt] = Field(default=None, alias="vendorId")
    product_id: Optional[StrictInt] = Field(default=None, alias="productId")
    manufacturer: Optional[StrictStr] = None
    carrier: Optional[CarrierObj] = None
    signal_level: Optional[Annotated[int, Field(le=5, strict=True, ge=0)]] = Field(default=None, alias="signalLevel")
    network: Optional[StrictStr] = None
    imsi: Optional[StrictStr] = None
    iccid: Optional[StrictStr] = None
    esn: Optional[StrictStr] = None
    mtn: Optional[StrictStr] = None
    apn: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    dial_number: Optional[StrictStr] = Field(default=None, alias="dialNumber")
    band: Optional[List[BandObj]] = None
    __properties: ClassVar[List[str]] = ["name", "vendorId", "productId", "manufacturer", "carrier", "signalLevel", "network", "imsi", "iccid", "esn", "mtn", "apn", "username", "password", "dialNumber", "band"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModemObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of carrier
        if self.carrier:
            _dict['carrier'] = self.carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in band (list)
        _items = []
        if self.band:
            for _item_band in self.band:
                if _item_band:
                    _items.append(_item_band.to_dict())
            _dict['band'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModemObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "vendorId": obj.get("vendorId"),
            "productId": obj.get("productId"),
            "manufacturer": obj.get("manufacturer"),
            "carrier": CarrierObj.from_dict(obj["carrier"]) if obj.get("carrier") is not None else None,
            "signalLevel": obj.get("signalLevel"),
            "network": obj.get("network"),
            "imsi": obj.get("imsi"),
            "iccid": obj.get("iccid"),
            "esn": obj.get("esn"),
            "mtn": obj.get("mtn"),
            "apn": obj.get("apn"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "dialNumber": obj.get("dialNumber"),
            "band": [BandObj.from_dict(_item) for _item in obj["band"]] if obj.get("band") is not None else None
        })
        return _obj


