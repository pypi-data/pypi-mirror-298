# coding: utf-8

"""
    Peplink API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from peplink_api_client.models.bw_allowance_monitor_obj import BWAllowanceMonitorObj
from peplink_api_client.models.gobi_obj import GobiObj
from peplink_api_client.models.modem_obj import ModemObj
from peplink_api_client.models.wifi_obj import WifiObj
from typing import Optional, Set
from typing_extensions import Self

class WanStatusResponseResponseValue(BaseModel):
    """
    WanStatusResponseResponseValue
    """ # noqa: E501
    name: StrictStr
    enable: StrictBool
    as_lan: StrictBool = Field(alias="asLan")
    message: StrictStr
    uptime: StrictInt
    type: StrictStr
    virtual_type: StrictStr = Field(alias="virtualType")
    priority: Optional[StrictInt] = None
    ip: Optional[StrictStr] = None
    status_led: StrictStr = Field(alias="statusLed")
    mask: Optional[StrictInt] = None
    gateway: Optional[StrictStr] = None
    method: Optional[StrictStr] = None
    mode: Optional[StrictStr] = None
    routing_mode: Optional[StrictStr] = Field(default=None, alias="routingMode")
    dns: Optional[List[StrictStr]] = None
    additional_ip: Optional[List[StrictStr]] = Field(default=None, alias="additionalIp")
    mtu: Optional[Annotated[int, Field(le=9000, strict=True, ge=576)]] = None
    mss: Optional[Annotated[int, Field(le=8960, strict=True, ge=536)]] = None
    mac: Optional[StrictStr] = None
    wireless: Optional[WifiObj] = None
    modem: Optional[ModemObj] = None
    cellular: Optional[GobiObj] = None
    gobi: Optional[GobiObj] = None
    bandwidth_allowance_monitor: Optional[BWAllowanceMonitorObj] = Field(default=None, alias="bandwidthAllowanceMonitor")
    __properties: ClassVar[List[str]] = ["name", "enable", "asLan", "message", "uptime", "type", "virtualType", "priority", "ip", "statusLed", "mask", "gateway", "method", "mode", "routingMode", "dns", "additionalIp", "mtu", "mss", "mac", "wireless", "modem", "cellular", "gobi", "bandwidthAllowanceMonitor"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['modem', 'wireless', 'gobi', 'cellular', 'ipsec', 'adsl', 'ethernet']):
            raise ValueError("must be one of enum values ('modem', 'wireless', 'gobi', 'cellular', 'ipsec', 'adsl', 'ethernet')")
        return value

    @field_validator('virtual_type')
    def virtual_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['modem', 'wireless', 'gobi', 'cellular', 'ipsec', 'adsl', 'ethernet']):
            raise ValueError("must be one of enum values ('modem', 'wireless', 'gobi', 'cellular', 'ipsec', 'adsl', 'ethernet')")
        return value

    @field_validator('status_led')
    def status_led_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['empty', 'gray', 'red', 'yellow', 'green', 'flash']):
            raise ValueError("must be one of enum values ('empty', 'gray', 'red', 'yellow', 'green', 'flash')")
        return value

    @field_validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dhcp', 'static']):
            raise ValueError("must be one of enum values ('dhcp', 'static')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NAT', 'IP Forwarding']):
            raise ValueError("must be one of enum values ('NAT', 'IP Forwarding')")
        return value

    @field_validator('routing_mode')
    def routing_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NAT', 'IP Forwarding']):
            raise ValueError("must be one of enum values ('NAT', 'IP Forwarding')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WanStatusResponseResponseValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wireless
        if self.wireless:
            _dict['wireless'] = self.wireless.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modem
        if self.modem:
            _dict['modem'] = self.modem.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cellular
        if self.cellular:
            _dict['cellular'] = self.cellular.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gobi
        if self.gobi:
            _dict['gobi'] = self.gobi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bandwidth_allowance_monitor
        if self.bandwidth_allowance_monitor:
            _dict['bandwidthAllowanceMonitor'] = self.bandwidth_allowance_monitor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WanStatusResponseResponseValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "enable": obj.get("enable"),
            "asLan": obj.get("asLan"),
            "message": obj.get("message"),
            "uptime": obj.get("uptime"),
            "type": obj.get("type"),
            "virtualType": obj.get("virtualType"),
            "priority": obj.get("priority"),
            "ip": obj.get("ip"),
            "statusLed": obj.get("statusLed"),
            "mask": obj.get("mask"),
            "gateway": obj.get("gateway"),
            "method": obj.get("method"),
            "mode": obj.get("mode"),
            "routingMode": obj.get("routingMode"),
            "dns": obj.get("dns"),
            "additionalIp": obj.get("additionalIp"),
            "mtu": obj.get("mtu"),
            "mss": obj.get("mss"),
            "mac": obj.get("mac"),
            "wireless": WifiObj.from_dict(obj["wireless"]) if obj.get("wireless") is not None else None,
            "modem": ModemObj.from_dict(obj["modem"]) if obj.get("modem") is not None else None,
            "cellular": GobiObj.from_dict(obj["cellular"]) if obj.get("cellular") is not None else None,
            "gobi": GobiObj.from_dict(obj["gobi"]) if obj.get("gobi") is not None else None,
            "bandwidthAllowanceMonitor": BWAllowanceMonitorObj.from_dict(obj["bandwidthAllowanceMonitor"]) if obj.get("bandwidthAllowanceMonitor") is not None else None
        })
        return _obj


