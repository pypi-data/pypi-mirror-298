# coding: utf-8

"""
    Peplink API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from peplink_api_client.models.band_obj import BandObj
from peplink_api_client.models.carrier_obj import CarrierObj
from peplink_api_client.models.cell_tower_obj import CellTowerObj
from peplink_api_client.models.meid_obj import MEIDObj
from peplink_api_client.models.rat_obj import RATObj
from peplink_api_client.models.remote_sim_obj import RemoteSIMObj
from peplink_api_client.models.roaming_obj import RoamingObj
from peplink_api_client.models.sim_group_obj import SIMGroupObj
from typing import Optional, Set
from typing_extensions import Self

class GobiObj(BaseModel):
    """
    GobiObj
    """ # noqa: E501
    roaming_status: Optional[RoamingObj] = Field(default=None, alias="roamingStatus")
    network: Optional[StrictStr] = None
    mobile_type: Optional[StrictStr] = Field(default=None, alias="mobileType")
    sim: Optional[SIMGroupObj] = None
    remote_sim: Optional[RemoteSIMObj] = Field(default=None, alias="remoteSim")
    carrier: Optional[CarrierObj] = None
    carrier_aggregation: Optional[StrictBool] = Field(default=None, alias="carrierAggregation")
    signal_level: Optional[Annotated[int, Field(le=5, strict=True, ge=0)]] = Field(default=None, alias="signalLevel")
    meid: Optional[MEIDObj] = None
    imei: Optional[StrictStr] = None
    esn: Optional[StrictStr] = None
    mode: Optional[StrictStr] = None
    band: Optional[List[BandObj]] = None
    rat: Optional[List[RATObj]] = None
    mcc: Optional[StrictStr] = None
    mnc: Optional[StrictStr] = None
    cell_tower: Optional[CellTowerObj] = Field(default=None, alias="cellTower")
    __properties: ClassVar[List[str]] = ["roamingStatus", "network", "mobileType", "sim", "remoteSim", "carrier", "carrierAggregation", "signalLevel", "meid", "imei", "esn", "mode", "band", "rat", "mcc", "mnc", "cellTower"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GobiObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of roaming_status
        if self.roaming_status:
            _dict['roamingStatus'] = self.roaming_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sim
        if self.sim:
            _dict['sim'] = self.sim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_sim
        if self.remote_sim:
            _dict['remoteSim'] = self.remote_sim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carrier
        if self.carrier:
            _dict['carrier'] = self.carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meid
        if self.meid:
            _dict['meid'] = self.meid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in band (list)
        _items = []
        if self.band:
            for _item_band in self.band:
                if _item_band:
                    _items.append(_item_band.to_dict())
            _dict['band'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rat (list)
        _items = []
        if self.rat:
            for _item_rat in self.rat:
                if _item_rat:
                    _items.append(_item_rat.to_dict())
            _dict['rat'] = _items
        # override the default output from pydantic by calling `to_dict()` of cell_tower
        if self.cell_tower:
            _dict['cellTower'] = self.cell_tower.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GobiObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "roamingStatus": RoamingObj.from_dict(obj["roamingStatus"]) if obj.get("roamingStatus") is not None else None,
            "network": obj.get("network"),
            "mobileType": obj.get("mobileType"),
            "sim": SIMGroupObj.from_dict(obj["sim"]) if obj.get("sim") is not None else None,
            "remoteSim": RemoteSIMObj.from_dict(obj["remoteSim"]) if obj.get("remoteSim") is not None else None,
            "carrier": CarrierObj.from_dict(obj["carrier"]) if obj.get("carrier") is not None else None,
            "carrierAggregation": obj.get("carrierAggregation"),
            "signalLevel": obj.get("signalLevel"),
            "meid": MEIDObj.from_dict(obj["meid"]) if obj.get("meid") is not None else None,
            "imei": obj.get("imei"),
            "esn": obj.get("esn"),
            "mode": obj.get("mode"),
            "band": [BandObj.from_dict(_item) for _item in obj["band"]] if obj.get("band") is not None else None,
            "rat": [RATObj.from_dict(_item) for _item in obj["rat"]] if obj.get("rat") is not None else None,
            "mcc": obj.get("mcc"),
            "mnc": obj.get("mnc"),
            "cellTower": CellTowerObj.from_dict(obj["cellTower"]) if obj.get("cellTower") is not None else None
        })
        return _obj


