# Generated by Django 4.1.4 on 2024-09-18 13:05

import b3_bpmn.models.base
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import form_builder.annotations.models_base
import import_export_report.models
import model_app.abstract_base.models
import model_app.base.mixins
import uuid
import versioning.mixin.versioning_mixin


class Migration(migrations.Migration):

    dependencies = [
        ('b3integrations', '0008_alter_integrationinfo_app_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('b3integration_test', '0002_add_fields_to_settings'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommercialTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('root_id', models.UUIDField(default=uuid.uuid4, verbose_name='Root ID')),
                ('v_date_start', models.DateTimeField(auto_now=True, null=True, verbose_name='Начальная дата актуальности версии.')),
                ('v_date_end', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания актуальности версии.')),
                ('fields_changed', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, null=True, size=None, verbose_name='Поля, измененные с предыдущей версии')),
                ('track_previous_version_changes', models.BooleanField(blank=True, null=True, verbose_name='Синхронизировать изменения предыдущей версии')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Время добавления')),
                ('datetime_update', models.DateTimeField(auto_now=True, null=True, verbose_name='Время обновления')),
                ('deleted', models.BooleanField(blank=True, db_index=True, default=False, null=True)),
                ('datetime_delete', models.DateTimeField(blank=True, null=True, verbose_name='Время удаления')),
                ('attrs_values', models.JSONField(blank=True, db_index=True, default=dict, null=True, verbose_name='Значения атрибутов')),
                ('square', models.FloatField(blank=True, null=True)),
                ('owner_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Кем создано')),
                ('author_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_%(class)s_update', to=settings.AUTH_USER_MODEL, verbose_name='Кем обновлено')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Кем удалено')),
                ('integration', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='b3integrations.integrationinfo')),
                ('next_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='my_previous_version', to='b3integration_test.commercialtest', verbose_name='Следующая версия')),
                ('participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owner_%(class)s', to='model_app.participant', verbose_name='Владелец')),
                ('previous_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='my_next_version', to='b3integration_test.commercialtest', verbose_name='Предыдущая версия')),
            ],
            options={
                'verbose_name': 'Коммерческие помещения (тест)',
                'verbose_name_plural': 'Коммерческие помещения (тест)',
                'abstract': False,
            },
            bases=(model_app.base.mixins.MultiLoadingPrintForm, form_builder.annotations.models_base.AnnotationsManagerMixin, models.Model, versioning.mixin.versioning_mixin.VersioningMixin, import_export_report.models.BaseModelReport, model_app.abstract_base.models.BaseModelOffline, model_app.abstract_base.models.BaseModelScope, b3_bpmn.models.base.EventIncidentOperations),
        ),
        migrations.CreateModel(
            name='BuildingTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('root_id', models.UUIDField(default=uuid.uuid4, verbose_name='Root ID')),
                ('v_date_start', models.DateTimeField(auto_now=True, null=True, verbose_name='Начальная дата актуальности версии.')),
                ('v_date_end', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания актуальности версии.')),
                ('fields_changed', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, null=True, size=None, verbose_name='Поля, измененные с предыдущей версии')),
                ('track_previous_version_changes', models.BooleanField(blank=True, null=True, verbose_name='Синхронизировать изменения предыдущей версии')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Время добавления')),
                ('datetime_update', models.DateTimeField(auto_now=True, null=True, verbose_name='Время обновления')),
                ('deleted', models.BooleanField(blank=True, db_index=True, default=False, null=True)),
                ('datetime_delete', models.DateTimeField(blank=True, null=True, verbose_name='Время удаления')),
                ('attrs_values', models.JSONField(blank=True, db_index=True, default=dict, null=True, verbose_name='Значения атрибутов')),
                ('square', models.FloatField(blank=True, null=True)),
                ('owner_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Кем создано')),
                ('author_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_%(class)s_update', to=settings.AUTH_USER_MODEL, verbose_name='Кем обновлено')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Кем удалено')),
                ('integration', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='b3integrations.integrationinfo')),
                ('next_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='my_previous_version', to='b3integration_test.buildingtest', verbose_name='Следующая версия')),
                ('participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owner_%(class)s', to='model_app.participant', verbose_name='Владелец')),
                ('previous_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='my_next_version', to='b3integration_test.buildingtest', verbose_name='Предыдущая версия')),
            ],
            options={
                'verbose_name': 'Дом (тест)',
                'verbose_name_plural': 'Дома (тест)',
                'abstract': False,
            },
            bases=(model_app.base.mixins.MultiLoadingPrintForm, form_builder.annotations.models_base.AnnotationsManagerMixin, models.Model, versioning.mixin.versioning_mixin.VersioningMixin, import_export_report.models.BaseModelReport, model_app.abstract_base.models.BaseModelOffline, model_app.abstract_base.models.BaseModelScope, b3_bpmn.models.base.EventIncidentOperations),
        ),
    ]
